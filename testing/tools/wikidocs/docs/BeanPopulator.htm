
[[Dashboard | << Back to Dashboard ]]

{| align="right"
| __TOC__
|}

= Exploring the BeanPopulator Plugin =


== Overview ==
This is a bean populator that binds different types of data to a bean.


== populateFromXML ==
Populate a named or instantiated bean from an XML packet

=== Returns ===
* This function returns ''any''


=== Arguments ===

{| cellpadding="5", class="tablelisting"
! '''Key''' !! '''Type'''  !! '''Required''' !! '''Default''' !! '''Description''' 
|-
| target || any || Yes || --- || The target to populate
|-
| xml || any || Yes || --- || The XML string or packet
|-
| root || string || No ||  || The XML root element to start from
|-
| scope || string || No ||  || Use scope injection instead of setters population. Ex: scope=variables.instance.
|-
| trustedSetter || boolean || No || false || If set to true, the setter method will be called even if it does not exist in the bean
|-
| include || string || No ||  || A list of keys to include in the population
|-
| exclude || string || No ||  || A list of keys to exclude in the population
|}

=== Examples ===

== populateFromQuery ==
Populate a named or instantiated bean from query

=== Returns ===
* This function returns ''Any''


=== Arguments ===

{| cellpadding="5", class="tablelisting"
! '''Key''' !! '''Type'''  !! '''Required''' !! '''Default''' !! '''Description''' 
|-
| target || any || Yes || --- || The target to populate
|-
| qry || query || Yes || --- || The query to popluate the bean object with
|-
| rowNumber || Numeric || No || 1 || The query row number to use for population
|-
| scope || string || No ||  || Use scope injection instead of setters population. Ex: scope=variables.instance.
|-
| trustedSetter || boolean || No || false || If set to true, the setter method will be called even if it does not exist in the bean
|-
| include || string || No ||  || A list of keys to include in the population
|-
| exclude || string || No ||  || A list of keys to exclude in the population
|}

=== Examples ===

== populateFromStruct ==
Populate a named or instantiated bean from a structure

=== Returns ===
* This function returns ''any''


=== Arguments ===

{| cellpadding="5", class="tablelisting"
! '''Key''' !! '''Type'''  !! '''Required''' !! '''Default''' !! '''Description''' 
|-
| target || any || Yes || --- || The target to populate
|-
| memento || struct || Yes || --- || The structure to populate the object with.
|-
| scope || string || No || --- || Use scope injection instead of setters population.
|-
| trustedSetter || boolean || No || false || If set to true, the setter method will be called even if it does not exist in the bean
|-
| include || string || No ||  || A list of keys to include in the population
|-
| exclude || string || No ||  || A list of keys to exclude in the population
|}

=== Examples ===

== populateFromQueryWithPrefix ==
Populates an Object using only specific columns from a query. Useful for performing a query with joins that needs to populate multiple objects.

=== Returns ===
* This function returns ''any''


=== Arguments ===

{| cellpadding="5", class="tablelisting"
! '''Key''' !! '''Type'''  !! '''Required''' !! '''Default''' !! '''Description''' 
|-
| target || any || Yes || --- || This can be an instantiated bean object or a bean instantitation path as a string. If you pass an instantiation path and the bean has an 'init' method. It will be executed. This method follows the bean contract (set{property_name}). Example: setUsername(), setfname()
|-
| qry || query || Yes || --- || The query to popluate the bean object with
|-
| rowNumber || Numeric || No || 1 || The query row number to use for population
|-
| scope || string || No ||  || Use scope injection instead of setters population. Ex: scope=variables.instance.
|-
| trustedSetter || boolean || No || false || If set to true, the setter method will be called even if it does not exist in the bean
|-
| include || string || No ||  || A list of keys to include in the population
|-
| exclude || string || No ||  || A list of keys to exclude in the population
|-
| prefix || string || Yes || --- || The prefix used to filter, Example: 'user_' would apply to the following columns: 'user_id' and 'user_name' but not 'address_id'.
|}

=== Examples ===

== populateFromJSON ==
Populate a named or instantiated bean from a json string

=== Returns ===
* This function returns ''any''


=== Arguments ===

{| cellpadding="5", class="tablelisting"
! '''Key''' !! '''Type'''  !! '''Required''' !! '''Default''' !! '''Description''' 
|-
| target || any || Yes || --- || The target to populate
|-
| JSONString || string || Yes || --- || The JSON string to populate the object with. It has to be valid JSON and also a structure with name-key value pairs. 
|-
| scope || string || No ||  || Use scope injection instead of setters population. Ex: scope=variables.instance.
|-
| trustedSetter || boolean || No || false || If set to true, the setter method will be called even if it does not exist in the bean
|-
| include || string || No ||  || A list of keys to include in the population
|-
| exclude || string || No ||  || A list of keys to exclude in the population
|}

=== Examples ===
