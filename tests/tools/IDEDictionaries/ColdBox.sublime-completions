{
				"scope": "meta.name.interpolated.hash - string, source.cfscript - source.sql - text.html.cfm - string - meta - comment, source.cfscript.embedded.cfml - string, source.sql, text, source.cfml.script, embedding.cfml",
				"completions":
				[
		{
							"trigger": "onHandlerDIComplete\tfn. (ColdBox:EventHandler)",
							"contents": "onHandlerDIComplete( )"
					},{
							"trigger": "_privateInvoker\tfn. (ColdBox:EventHandler)",
							"contents": "_privateInvoker( method=${1:Any}, argCollection=${2:Any} )"
					},{
							"trigger": "_actionExists\tfn. (ColdBox:EventHandler)",
							"contents": "_actionExists( action=${1:Any} )"
					},{
							"trigger": "_actionMetadata\tfn. (ColdBox:EventHandler)",
							"contents": "_actionMetadata( action=${1:Any} )"
					},{
							"trigger": "propertyExists\tfn. (ColdBox:Interceptor)",
							"contents": "propertyExists( property=${1:Any} )"
					},{
							"trigger": "cbLoadInterceptorHelpers\tfn. (ColdBox:Interceptor)",
							"contents": "cbLoadInterceptorHelpers( event=${1:Any}, interceptData=${2:Any} )"
					},{
							"trigger": "setProperty\tfn. (ColdBox:Interceptor)",
							"contents": "setProperty( property=${1:Any}, value=${2:Any} )"
					},{
							"trigger": "getProperties\tfn. (ColdBox:Interceptor)",
							"contents": "getProperties( )"
					},{
							"trigger": "getProperty\tfn. (ColdBox:Interceptor)",
							"contents": "getProperty( property=${1:Any}, defaultValue=${2:Any} )"
					},{
							"trigger": "unregister\tfn. (ColdBox:Interceptor)",
							"contents": "unregister( state=${1:Any} )"
					},{
							"trigger": "toJson\tfn. (ColdBox:FrameworkSuperType)",
							"contents": "toJson( obj=${1:any} )"
					},{
							"trigger": "ifNull\tfn. (ColdBox:FrameworkSuperType)",
							"contents": "ifNull( target=${1:Any}, success=${2:Any}, failure=${3:Any} )"
					},{
							"trigger": "runRoute\tfn. (ColdBox:FrameworkSuperType)",
							"contents": "runRoute( name=${1:Any}, params=${2:{}}, cache=${3:true,false}, cacheTimeout=${4:Any}, cacheLastAccessTimeout=${5:Any}, cacheSuffix=${6:Any}, cacheProvider=${7:Any}, prePostExempt=${8:true,false} )"
					},{
							"trigger": "populateModel\tfn. (ColdBox:FrameworkSuperType)",
							"contents": "populateModel( )"
					},{
							"trigger": "when\tfn. (ColdBox:FrameworkSuperType)",
							"contents": "when( target=${1:true,false}, success=${2:Any}, failure=${3:Any} )"
					},{
							"trigger": "unless\tfn. (ColdBox:FrameworkSuperType)",
							"contents": "unless( target=${1:true,false}, success=${2:Any}, failure=${3:Any} )"
					},{
							"trigger": "getModuleConfig\tfn. (ColdBox:FrameworkSuperType)",
							"contents": "getModuleConfig( module=${1:Any} )"
					},{
							"trigger": "loadApplicationHelpers\tfn. (ColdBox:FrameworkSuperType)",
							"contents": "loadApplicationHelpers( force=${1:true,false} )"
					},{
							"trigger": "layout\tfn. (ColdBox:FrameworkSuperType)",
							"contents": "layout( layout=${1:Any}, module=${2:Any}, view=${3:Any}, args=${4:{}}, viewModule=${5:Any}, prePostExempt=${6:true,false}, viewVariables=${7:Any} )"
					},{
							"trigger": "renderview\tfn. (ColdBox:FrameworkSuperType)",
							"contents": "renderview( )"
					},{
							"trigger": "getModuleSettings\tfn. (ColdBox:FrameworkSuperType)",
							"contents": "getModuleSettings( module=${1:Any}, setting=${2:Any}, defaultValue=${3:Any} )"
					},{
							"trigger": "ifPresent\tfn. (ColdBox:FrameworkSuperType)",
							"contents": "ifPresent( target=${1:Any}, success=${2:Any}, failure=${3:Any} )"
					},{
							"trigger": "announceInterception\tfn. (ColdBox:FrameworkSuperType)",
							"contents": "announceInterception( )"
					},{
							"trigger": "back\tfn. (ColdBox:FrameworkSuperType)",
							"contents": "back( fallback=${1:Any}, persist=${2:Any}, persistStruct=${3:{}} )"
					},{
							"trigger": "isDevelopment\tfn. (ColdBox:FrameworkSuperType)",
							"contents": "isDevelopment( )"
					},{
							"trigger": "getRequestContext\tfn. (ColdBox:FrameworkSuperType)",
							"contents": "getRequestContext( )"
					},{
							"trigger": "getIsoTime\tfn. (ColdBox:FrameworkSuperType)",
							"contents": "getIsoTime( dateTime=${1:Any}, toUTC=${2:true,false} )"
					},{
							"trigger": "getDateTimeHelper\tfn. (ColdBox:FrameworkSuperType)",
							"contents": "getDateTimeHelper( )"
					},{
							"trigger": "announce\tfn. (ColdBox:FrameworkSuperType)",
							"contents": "announce( state=${1:Any}, data=${2:{}}, async=${3:true,false}, asyncAll=${4:true,false}, asyncAllJoin=${5:true,false}, asyncPriority=${6:Any}, asyncJoinTimeout=${7:numeric} )"
					},{
							"trigger": "getSystemSetting\tfn. (ColdBox:FrameworkSuperType)",
							"contents": "getSystemSetting( key=${1:Any}, defaultValue=${2:Any} )"
					},{
							"trigger": "throwUnless\tfn. (ColdBox:FrameworkSuperType)",
							"contents": "throwUnless( target=${1:true,false}, type=${2:Any}, message=${3:Any}, detail=${4:Any} )"
					},{
							"trigger": "getInstance\tfn. (ColdBox:FrameworkSuperType)",
							"contents": "getInstance( name=${1:Any}, initArguments=${2:{}}, dsl=${3:Any}, targetObject=${4:Any}, injector=${5:Any} )"
					},{
							"trigger": "getRootWireBox\tfn. (ColdBox:FrameworkSuperType)",
							"contents": "getRootWireBox( )"
					},{
							"trigger": "isProduction\tfn. (ColdBox:FrameworkSuperType)",
							"contents": "isProduction( )"
					},{
							"trigger": "runEvent\tfn. (ColdBox:FrameworkSuperType)",
							"contents": "runEvent( event=${1:Any}, prePostExempt=${2:true,false}, private=${3:true,false}, defaultEvent=${4:true,false}, eventArguments=${5:{}}, cache=${6:true,false}, cacheTimeout=${7:Any}, cacheLastAccessTimeout=${8:Any}, cacheSuffix=${9:Any}, cacheProvider=${10:Any} )"
					},{
							"trigger": "includeUDF\tfn. (ColdBox:FrameworkSuperType)",
							"contents": "includeUDF( udflibrary=${1:Any} )"
					},{
							"trigger": "populate\tfn. (ColdBox:FrameworkSuperType)",
							"contents": "populate( model=${1:Any}, scope=${2:Any}, trustedSetter=${3:true,false}, include=${4:Any}, exclude=${5:Any}, ignoreEmpty=${6:true,false}, nullEmptyInclude=${7:Any}, nullEmptyExclude=${8:Any}, composeRelationships=${9:true,false}, memento=${10:{}}, jsonstring=\"${11:}\", xml=\"${12:}\", qry=${13:query}, ignoreTargetLists=${14:true,false} )"
					},{
							"trigger": "getSystemProperty\tfn. (ColdBox:FrameworkSuperType)",
							"contents": "getSystemProperty( key=${1:Any}, defaultValue=${2:Any} )"
					},{
							"trigger": "throwIf\tfn. (ColdBox:FrameworkSuperType)",
							"contents": "throwIf( target=${1:true,false}, type=${2:Any}, message=${3:Any}, detail=${4:Any} )"
					},{
							"trigger": "renderLayout\tfn. (ColdBox:FrameworkSuperType)",
							"contents": "renderLayout( )"
					},{
							"trigger": "relocate\tfn. (ColdBox:FrameworkSuperType)",
							"contents": "relocate( event=${1:Any}, URL=${2:Any}, URI=${3:Any}, queryString=${4:Any}, persist=${5:Any}, persistStruct=${6:{}}, addToken=${7:true,false}, ssl=${8:true,false}, baseURL=${9:Any}, postProcessExempt=${10:true,false}, statusCode=${11:numeric} )"
					},{
							"trigger": "getUserSessionIdentifier\tfn. (ColdBox:FrameworkSuperType)",
							"contents": "getUserSessionIdentifier( )"
					},{
							"trigger": "getRequestCollection\tfn. (ColdBox:FrameworkSuperType)",
							"contents": "getRequestCollection( private=${1:true,false} )"
					},{
							"trigger": "locateFilePath\tfn. (ColdBox:FrameworkSuperType)",
							"contents": "locateFilePath( pathToCheck=${1:Any} )"
					},{
							"trigger": "getCache\tfn. (ColdBox:FrameworkSuperType)",
							"contents": "getCache( name=${1:Any} )"
					},{
							"trigger": "renderExternalView\tfn. (ColdBox:FrameworkSuperType)",
							"contents": "renderExternalView( )"
					},{
							"trigger": "setSetting\tfn. (ColdBox:FrameworkSuperType)",
							"contents": "setSetting( name=${1:Any}, value=${2:Any} )"
					},{
							"trigger": "externalView\tfn. (ColdBox:FrameworkSuperType)",
							"contents": "externalView( view=${1:Any}, args=${2:{}}, cache=${3:true,false}, cacheTimeout=${4:Any}, cacheLastAccessTimeout=${5:Any}, cacheSuffix=${6:Any}, cacheProvider=${7:Any}, viewVariables=${8:Any} )"
					},{
							"trigger": "getRenderer\tfn. (ColdBox:FrameworkSuperType)",
							"contents": "getRenderer( )"
					},{
							"trigger": "locateDirectoryPath\tfn. (ColdBox:FrameworkSuperType)",
							"contents": "locateDirectoryPath( pathToCheck=${1:Any} )"
					},{
							"trigger": "forAttribute\tfn. (ColdBox:FrameworkSuperType)",
							"contents": "forAttribute( data=${1:Any} )"
					},{
							"trigger": "settingExists\tfn. (ColdBox:FrameworkSuperType)",
							"contents": "settingExists( name=${1:Any} )"
					},{
							"trigger": "async\tfn. (ColdBox:FrameworkSuperType)",
							"contents": "async( )"
					},{
							"trigger": "isTesting\tfn. (ColdBox:FrameworkSuperType)",
							"contents": "isTesting( )"
					},{
							"trigger": "listen\tfn. (ColdBox:FrameworkSuperType)",
							"contents": "listen( target=${1:Any}, point=${2:Any} )"
					},{
							"trigger": "inDebugMode\tfn. (ColdBox:FrameworkSuperType)",
							"contents": "inDebugMode( )"
					},{
							"trigger": "persistVariables\tfn. (ColdBox:FrameworkSuperType)",
							"contents": "persistVariables( persist=${1:Any}, persistStruct=${2:{}} )"
					},{
							"trigger": "view\tfn. (ColdBox:FrameworkSuperType)",
							"contents": "view( view=${1:Any}, args=${2:{}}, module=${3:Any}, cache=${4:true,false}, cacheTimeout=${5:Any}, cacheLastAccessTimeout=${6:Any}, cacheSuffix=${7:Any}, cacheProvider=${8:Any}, collection=${9:Any}, collectionAs=${10:Any}, collectionStartRow=${11:numeric}, collectionMaxRows=${12:numeric}, collectionDelim=${13:Any}, prePostExempt=${14:true,false}, name=${15:Any}, viewVariables=${16:Any} )"
					},{
							"trigger": "getColdBoxSetting\tfn. (ColdBox:FrameworkSuperType)",
							"contents": "getColdBoxSetting( name=${1:Any}, defaultValue=${2:Any} )"
					},{
							"trigger": "getEnv\tfn. (ColdBox:FrameworkSuperType)",
							"contents": "getEnv( key=${1:Any}, defaultValue=${2:Any} )"
					},{
							"trigger": "getSetting\tfn. (ColdBox:FrameworkSuperType)",
							"contents": "getSetting( name=${1:Any}, defaultValue=${2:Any} )"
					},{
							"trigger": "onValidationException\tfn. (ColdBox:RestHandler)",
							"contents": "onValidationException( event=${1:Any}, rc=${2:Any}, prc=${3:Any}, eventArguments=${4:Any}, exception=${5:Any} )"
					},{
							"trigger": "onEntityNotFoundException\tfn. (ColdBox:RestHandler)",
							"contents": "onEntityNotFoundException( event=${1:Any}, rc=${2:Any}, prc=${3:Any}, eventArguments=${4:Any}, exception=${5:Any} )"
					},{
							"trigger": "onAuthenticationFailure\tfn. (ColdBox:RestHandler)",
							"contents": "onAuthenticationFailure( event=${1:Any}, rc=${2:Any}, prc=${3:Any}, abort=${4:Any}, exception=${5:Any} )"
					},{
							"trigger": "onAuthorizationFailure\tfn. (ColdBox:RestHandler)",
							"contents": "onAuthorizationFailure( event=${1:Any}, rc=${2:Any}, prc=${3:Any}, abort=${4:Any}, exception=${5:Any} )"
					},{
							"trigger": "onInvalidRoute\tfn. (ColdBox:RestHandler)",
							"contents": "onInvalidRoute( event=${1:Any}, rc=${2:Any}, prc=${3:Any} )"
					},{
							"trigger": "onMissingAction\tfn. (ColdBox:RestHandler)",
							"contents": "onMissingAction( event=${1:Any}, rc=${2:Any}, prc=${3:Any}, missingAction=${4:Any}, eventArguments=${5:Any} )"
					},{
							"trigger": "onAnyOtherException\tfn. (ColdBox:RestHandler)",
							"contents": "onAnyOtherException( event=${1:Any}, rc=${2:Any}, prc=${3:Any}, eventArguments=${4:Any}, exception=${5:Any} )"
					},{
							"trigger": "onExpectationFailed\tfn. (ColdBox:RestHandler)",
							"contents": "onExpectationFailed( event=${1:Any}, rc=${2:Any}, prc=${3:Any}, message=${4:Any} )"
					},{
							"trigger": "onInvalidHTTPMethod\tfn. (ColdBox:RestHandler)",
							"contents": "onInvalidHTTPMethod( event=${1:Any}, rc=${2:Any}, prc=${3:Any}, faultAction=${4:Any}, eventArguments=${5:Any} )"
					},{
							"trigger": "aroundHandler\tfn. (ColdBox:RestHandler)",
							"contents": "aroundHandler( event=${1:Any}, rc=${2:Any}, prc=${3:Any}, targetAction=${4:Any}, eventArguments=${5:Any} )"
					},{
							"trigger": "onError\tfn. (ColdBox:RestHandler)",
							"contents": "onError( event=${1:Any}, rc=${2:Any}, prc=${3:Any}, faultAction=${4:Any}, exception=${5:Any}, eventArguments=${6:Any} )"
					},{
							"trigger": "afterEach\tfn. (TestBox:BaseSpec)",
							"contents": "afterEach( body=${1:any}, data=${2:{}} )"
					},{
							"trigger": "xdescribe\tfn. (TestBox:BaseSpec)",
							"contents": "xdescribe( title=\"${1:}\", body=${2:any}, labels=${3:any}, asyncAll=${4:true,false} )"
					},{
							"trigger": "xgiven\tfn. (TestBox:BaseSpec)",
							"contents": "xgiven( given=\"${1:}\", body=${2:any}, labels=${3:any}, asyncAll=${4:true,false} )"
					},{
							"trigger": "xwhen\tfn. (TestBox:BaseSpec)",
							"contents": "xwhen( when=\"${1:}\", body=${2:any}, labels=${3:any}, asyncAll=${4:true,false} )"
					},{
							"trigger": "getProperty\tfn. (TestBox:BaseSpec)",
							"contents": "getProperty( target=${1:Any}, name=${2:Any}, scope=${3:Any}, defaultValue=${4:Any} )"
					},{
							"trigger": "getMockDataCFC\tfn. (TestBox:BaseSpec)",
							"contents": "getMockDataCFC( )"
					},{
							"trigger": "expectAll\tfn. (TestBox:BaseSpec)",
							"contents": "expectAll( actual=${1:any} )"
					},{
							"trigger": "getUtility\tfn. (TestBox:BaseSpec)",
							"contents": "getUtility( )"
					},{
							"trigger": "describe\tfn. (TestBox:BaseSpec)",
							"contents": "describe( title=\"${1:}\", body=${2:any}, labels=${3:any}, asyncAll=${4:true,false}, skip=${5:any}, focused=${6:true,false} )"
					},{
							"trigger": "fit\tfn. (TestBox:BaseSpec)",
							"contents": "fit( title=\"${1:}\", body=${2:any}, labels=${3:any}, skip=${4:any}, data=${5:{}} )"
					},{
							"trigger": "clearDebugBuffer\tfn. (TestBox:BaseSpec)",
							"contents": "clearDebugBuffer( )"
					},{
							"trigger": "test\tfn. (TestBox:BaseSpec)",
							"contents": "test( title=\"${1:}\", body=${2:any}, labels=${3:any}, skip=${4:any}, data=${5:{}}, focused=${6:true,false} )"
					},{
							"trigger": "runAfterEachClosures\tfn. (TestBox:BaseSpec)",
							"contents": "runAfterEachClosures( suite=${1:Any}, spec=${2:Any} )"
					},{
							"trigger": "fstory\tfn. (TestBox:BaseSpec)",
							"contents": "fstory( story=\"${1:}\", body=${2:any}, labels=${3:any}, asyncAll=${4:true,false}, skip=${5:any} )"
					},{
							"trigger": "createMock\tfn. (TestBox:BaseSpec)",
							"contents": "createMock( className=\"${1:}\", object=${2:any}, clearMethods=${3:true,false} )"
					},{
							"trigger": "xscenario\tfn. (TestBox:BaseSpec)",
							"contents": "xscenario( scenario=\"${1:}\", body=${2:any}, labels=${3:any}, asyncAll=${4:true,false} )"
					},{
							"trigger": "xthen\tfn. (TestBox:BaseSpec)",
							"contents": "xthen( then=\"${1:}\", body=${2:any}, labels=${3:any}, data=${4:{}} )"
					},{
							"trigger": "isExpectedException\tfn. (TestBox:BaseSpec)",
							"contents": "isExpectedException( exception=${1:Any}, specName=${2:Any}, runner=${3:Any} )"
					},{
							"trigger": "when\tfn. (TestBox:BaseSpec)",
							"contents": "when( when=\"${1:}\", body=${2:any}, labels=${3:any}, asyncAll=${4:true,false}, skip=${5:any} )"
					},{
							"trigger": "xstory\tfn. (TestBox:BaseSpec)",
							"contents": "xstory( story=\"${1:}\", body=${2:any}, labels=${3:any}, asyncAll=${4:true,false} )"
					},{
							"trigger": "makePublic\tfn. (TestBox:BaseSpec)",
							"contents": "makePublic( target=${1:any}, method=\"${2:}\", newName=\"${3:}\" )"
					},{
							"trigger": "fscenario\tfn. (TestBox:BaseSpec)",
							"contents": "fscenario( scenario=\"${1:}\", body=${2:any}, labels=${3:any}, asyncAll=${4:true,false}, skip=${5:any} )"
					},{
							"trigger": "runTestMethod\tfn. (TestBox:BaseSpec)",
							"contents": "runTestMethod( spec=${1:Any}, testResults=${2:Any}, suiteStats=${3:Any}, runner=${4:Any} )"
					},{
							"trigger": "addAssertions\tfn. (TestBox:BaseSpec)",
							"contents": "addAssertions( assertions=${1:any} )"
					},{
							"trigger": "prepareMock\tfn. (TestBox:BaseSpec)",
							"contents": "prepareMock( object=${1:any}, callLogging=${2:true,false} )"
					},{
							"trigger": "isBoxLang\tfn. (TestBox:BaseSpec)",
							"contents": "isBoxLang( )"
					},{
							"trigger": "println\tfn. (TestBox:BaseSpec)",
							"contents": "println( message=${1:Any} )"
					},{
							"trigger": "runRemote\tfn. (TestBox:BaseSpec)",
							"contents": "runRemote( testSpecs=\"${1:}\", testSuites=\"${2:}\", reporter=\"${3:}\", labels=\"${4:}\" )"
					},{
							"trigger": "isLinux\tfn. (TestBox:BaseSpec)",
							"contents": "isLinux( )"
					},{
							"trigger": "ftest\tfn. (TestBox:BaseSpec)",
							"contents": "ftest( title=\"${1:}\", body=${2:any}, labels=${3:any}, skip=${4:any}, data=${5:{}}, focused=${6:true,false} )"
					},{
							"trigger": "then\tfn. (TestBox:BaseSpec)",
							"contents": "then( then=\"${1:}\", body=${2:any}, labels=${3:any}, skip=${4:any}, data=${5:{}}, focused=${6:true,false} )"
					},{
							"trigger": "assert\tfn. (TestBox:BaseSpec)",
							"contents": "assert( expression=${1:Any}, message=${2:Any} )"
					},{
							"trigger": "fdescribe\tfn. (TestBox:BaseSpec)",
							"contents": "fdescribe( title=\"${1:}\", body=${2:any}, labels=${3:any}, asyncAll=${4:true,false}, skip=${5:any} )"
					},{
							"trigger": "xit\tfn. (TestBox:BaseSpec)",
							"contents": "xit( title=\"${1:}\", body=${2:any}, labels=${3:any}, data=${4:{}} )"
					},{
							"trigger": "runAroundEachClosures\tfn. (TestBox:BaseSpec)",
							"contents": "runAroundEachClosures( suite=${1:Any}, spec=${2:Any} )"
					},{
							"trigger": "createStub\tfn. (TestBox:BaseSpec)",
							"contents": "createStub( callLogging=${1:true,false}, extends=\"${2:}\", implements=\"${3:}\" )"
					},{
							"trigger": "fwhen\tfn. (TestBox:BaseSpec)",
							"contents": "fwhen( when=\"${1:}\", body=${2:any}, labels=${3:any}, asyncAll=${4:true,false}, skip=${5:any} )"
					},{
							"trigger": "given\tfn. (TestBox:BaseSpec)",
							"contents": "given( given=\"${1:}\", body=${2:any}, labels=${3:any}, asyncAll=${4:true,false}, skip=${5:any} )"
					},{
							"trigger": "console\tfn. (TestBox:BaseSpec)",
							"contents": "console( var=${1:Any}, top=${2:numeric}, showUDFs=${3:true,false}, label=\"${4:}\" )"
					},{
							"trigger": "expect\tfn. (TestBox:BaseSpec)",
							"contents": "expect( actual=${1:any} )"
					},{
							"trigger": "feature\tfn. (TestBox:BaseSpec)",
							"contents": "feature( feature=\"${1:}\", body=${2:any}, labels=${3:any}, asyncAll=${4:true,false}, skip=${5:any} )"
					},{
							"trigger": "getMockBox\tfn. (TestBox:BaseSpec)",
							"contents": "getMockBox( generationPath=\"${1:}\" )"
					},{
							"trigger": "it\tfn. (TestBox:BaseSpec)",
							"contents": "it( title=\"${1:}\", body=${2:any}, labels=${3:any}, skip=${4:any}, data=${5:{}}, focused=${6:true,false} )"
					},{
							"trigger": "isMac\tfn. (TestBox:BaseSpec)",
							"contents": "isMac( )"
					},{
							"trigger": "fthen\tfn. (TestBox:BaseSpec)",
							"contents": "fthen( then=\"${1:}\", body=${2:any}, labels=${3:any}, skip=${4:any}, data=${5:{}}, focused=${6:true,false} )"
					},{
							"trigger": "runSpec\tfn. (TestBox:BaseSpec)",
							"contents": "runSpec( spec=${1:Any}, suite=${2:Any}, testResults=${3:Any}, suiteStats=${4:Any}, runner=${5:Any} )"
					},{
							"trigger": "mockData\tfn. (TestBox:BaseSpec)",
							"contents": "mockData( )"
					},{
							"trigger": "createEmptyMock\tfn. (TestBox:BaseSpec)",
							"contents": "createEmptyMock( className=\"${1:}\", object=${2:any}, callLogging=${3:true,false} )"
					},{
							"trigger": "runBeforeEachClosures\tfn. (TestBox:BaseSpec)",
							"contents": "runBeforeEachClosures( suite=${1:Any}, spec=${2:Any} )"
					},{
							"trigger": "onMissingMethod\tfn. (TestBox:BaseSpec)",
							"contents": "onMissingMethod( missingMethodName=${1:Any}, missingMethodArguments=${2:Any} )"
					},{
							"trigger": "aroundStub\tfn. (TestBox:BaseSpec)",
							"contents": "aroundStub( spec=${1:Any} )"
					},{
							"trigger": "isLucee\tfn. (TestBox:BaseSpec)",
							"contents": "isLucee( )"
					},{
							"trigger": "closureStub\tfn. (TestBox:BaseSpec)",
							"contents": "closureStub( )"
					},{
							"trigger": "beforeEach\tfn. (TestBox:BaseSpec)",
							"contents": "beforeEach( body=${1:any}, data=${2:{}} )"
					},{
							"trigger": "story\tfn. (TestBox:BaseSpec)",
							"contents": "story( story=\"${1:}\", body=${2:any}, labels=${3:any}, asyncAll=${4:true,false}, skip=${5:any} )"
					},{
							"trigger": "debug\tfn. (TestBox:BaseSpec)",
							"contents": "debug( var=${1:any}, label=\"${2:}\", deepCopy=${3:true,false}, top=${4:numeric}, showUDFs=${5:true,false} )"
					},{
							"trigger": "ffeature\tfn. (TestBox:BaseSpec)",
							"contents": "ffeature( feature=\"${1:}\", body=${2:any}, labels=${3:any}, asyncAll=${4:true,false}, skip=${5:any} )"
					},{
							"trigger": "expectedException\tfn. (TestBox:BaseSpec)",
							"contents": "expectedException( type=${1:Any}, regex=${2:Any} )"
					},{
							"trigger": "getDebugBuffer\tfn. (TestBox:BaseSpec)",
							"contents": "getDebugBuffer( )"
					},{
							"trigger": "querySim\tfn. (TestBox:BaseSpec)",
							"contents": "querySim( queryData=${1:Any} )"
					},{
							"trigger": "hasExpectedException\tfn. (TestBox:BaseSpec)",
							"contents": "hasExpectedException( specName=${1:Any}, runner=${2:Any} )"
					},{
							"trigger": "isAdobe\tfn. (TestBox:BaseSpec)",
							"contents": "isAdobe( )"
					},{
							"trigger": "isWindows\tfn. (TestBox:BaseSpec)",
							"contents": "isWindows( )"
					},{
							"trigger": "print\tfn. (TestBox:BaseSpec)",
							"contents": "print( message=${1:Any} )"
					},{
							"trigger": "aroundEach\tfn. (TestBox:BaseSpec)",
							"contents": "aroundEach( body=${1:any}, data=${2:{}} )"
					},{
							"trigger": "skip\tfn. (TestBox:BaseSpec)",
							"contents": "skip( message=${1:Any}, detail=${2:Any} )"
					},{
							"trigger": "xfeature\tfn. (TestBox:BaseSpec)",
							"contents": "xfeature( feature=\"${1:}\", body=${2:any}, labels=${3:any}, asyncAll=${4:true,false} )"
					},{
							"trigger": "fail\tfn. (TestBox:BaseSpec)",
							"contents": "fail( message=${1:Any}, detail=${2:Any} )"
					},{
							"trigger": "fgiven\tfn. (TestBox:BaseSpec)",
							"contents": "fgiven( given=\"${1:}\", body=${2:any}, labels=${3:any}, asyncAll=${4:true,false}, skip=${5:any} )"
					},{
							"trigger": "generateAroundEachClosuresStack\tfn. (TestBox:BaseSpec)",
							"contents": "generateAroundEachClosuresStack( closures=${1:[]}, suite=${2:Any}, spec=${3:Any}, closureIndex=${4:Any} )"
					},{
							"trigger": "xtest\tfn. (TestBox:BaseSpec)",
							"contents": "xtest( title=\"${1:}\", body=${2:any}, labels=${3:any}, data=${4:{}}, focused=${5:true,false} )"
					},{
							"trigger": "getEnv\tfn. (TestBox:BaseSpec)",
							"contents": "getEnv( )"
					},{
							"trigger": "scenario\tfn. (TestBox:BaseSpec)",
							"contents": "scenario( scenario=\"${1:}\", body=${2:any}, labels=${3:any}, asyncAll=${4:true,false}, skip=${5:any} )"
					},{
							"trigger": "addMatchers\tfn. (TestBox:BaseSpec)",
							"contents": "addMatchers( matchers=${1:any} )"
					},{
							"trigger": "log.error\tfn. (ColdBox:log)",
							"contents": "log.error( message=${1:Any}, extraInfo=${2:Any} )"
						},{
							"trigger": "log.hasAppenders\tfn. (ColdBox:log)",
							"contents": "log.hasAppenders( )"
						},{
							"trigger": "log.removeAppender\tfn. (ColdBox:log)",
							"contents": "log.removeAppender( name=${1:Any} )"
						},{
							"trigger": "log.setLevelMin\tfn. (ColdBox:log)",
							"contents": "log.setLevelMin( levelMin=${1:Any} )"
						},{
							"trigger": "log.canDebug\tfn. (ColdBox:log)",
							"contents": "log.canDebug( )"
						},{
							"trigger": "log.info\tfn. (ColdBox:log)",
							"contents": "log.info( message=${1:Any}, extraInfo=${2:Any} )"
						},{
							"trigger": "log.canWarn\tfn. (ColdBox:log)",
							"contents": "log.canWarn( )"
						},{
							"trigger": "log.canFatal\tfn. (ColdBox:log)",
							"contents": "log.canFatal( )"
						},{
							"trigger": "log.getAppender\tfn. (ColdBox:log)",
							"contents": "log.getAppender( name=${1:Any} )"
						},{
							"trigger": "log.appenderExists\tfn. (ColdBox:log)",
							"contents": "log.appenderExists( name=${1:Any} )"
						},{
							"trigger": "log.removeAllAppenders\tfn. (ColdBox:log)",
							"contents": "log.removeAllAppenders( )"
						},{
							"trigger": "log.debug\tfn. (ColdBox:log)",
							"contents": "log.debug( message=${1:Any}, extraInfo=${2:Any} )"
						},{
							"trigger": "log.getAppenders\tfn. (ColdBox:log)",
							"contents": "log.getAppenders( )"
						},{
							"trigger": "log.warn\tfn. (ColdBox:log)",
							"contents": "log.warn( message=${1:Any}, extraInfo=${2:Any} )"
						},{
							"trigger": "log.addAppender\tfn. (ColdBox:log)",
							"contents": "log.addAppender( newAppender=${1:Any} )"
						},{
							"trigger": "log.fatal\tfn. (ColdBox:log)",
							"contents": "log.fatal( message=${1:Any}, extraInfo=${2:Any} )"
						},{
							"trigger": "log.setLevelMax\tfn. (ColdBox:log)",
							"contents": "log.setLevelMax( levelMax=${1:Any} )"
						},{
							"trigger": "log.canLog\tfn. (ColdBox:log)",
							"contents": "log.canLog( level=${1:Any} )"
						},{
							"trigger": "log.canError\tfn. (ColdBox:log)",
							"contents": "log.canError( )"
						},{
							"trigger": "log.canInfo\tfn. (ColdBox:log)",
							"contents": "log.canInfo( )"
						},{
							"trigger": "log.logMessage\tfn. (ColdBox:log)",
							"contents": "log.logMessage( message=${1:Any}, severity=${2:Any}, extraInfo=${3:Any} )"
						},{
							"trigger": "wirebox.autowire\tfn. (ColdBox:wirebox)",
							"contents": "wirebox.autowire( target=${1:Any}, mapping=${2:Any}, targetID=${3:Any}, annotationCheck=${4:true,false} )"
						},{
							"trigger": "wirebox.processDelegation\tfn. (ColdBox:wirebox)",
							"contents": "wirebox.processDelegation( target=${1:Any}, targetID=\"${2:}\", delegate=${3:Any}, DIData=${4:Any} )"
						},{
							"trigger": "wirebox.buildBinder\tfn. (ColdBox:wirebox)",
							"contents": "wirebox.buildBinder( binder=${1:Any}, properties=${2:Any} )"
						},{
							"trigger": "wirebox.configureEventManager\tfn. (ColdBox:wirebox)",
							"contents": "wirebox.configureEventManager( )"
						},{
							"trigger": "wirebox.hasRoot\tfn. (ColdBox:wirebox)",
							"contents": "wirebox.hasRoot( )"
						},{
							"trigger": "wirebox.registerScopes\tfn. (ColdBox:wirebox)",
							"contents": "wirebox.registerScopes( )"
						},{
							"trigger": "wirebox.buildInstance\tfn. (ColdBox:wirebox)",
							"contents": "wirebox.buildInstance( mapping=${1:Any}, initArguments=${2:{}} )"
						},{
							"trigger": "wirebox.doScopeRegistration\tfn. (ColdBox:wirebox)",
							"contents": "wirebox.doScopeRegistration( scopeInfo=${1:Any} )"
						},{
							"trigger": "wirebox.processInjection\tfn. (ColdBox:wirebox)",
							"contents": "wirebox.processInjection( targetObject=${1:Any}, DIData=${2:[]}, targetID=\"${3:}\", mapping=${4:Any} )"
						},{
							"trigger": "wirebox.processObservedProperties\tfn. (ColdBox:wirebox)",
							"contents": "wirebox.processObservedProperties( targetObject=${1:Any}, mapping=${2:Any} )"
						},{
							"trigger": "wirebox.getInstance\tfn. (ColdBox:wirebox)",
							"contents": "wirebox.getInstance( name=${1:Any}, initArguments=${2:{}}, dsl=${3:Any}, targetObject=${4:Any}, injector=${5:Any} )"
						},{
							"trigger": "wirebox.removeChildInjector\tfn. (ColdBox:wirebox)",
							"contents": "wirebox.removeChildInjector( name=${1:Any} )"
						},{
							"trigger": "wirebox.processAfterCompleteDI\tfn. (ColdBox:wirebox)",
							"contents": "wirebox.processAfterCompleteDI( targetObject=${1:Any}, DICompleteMethods=${2:Any} )"
						},{
							"trigger": "wirebox.locateScopedSelf\tfn. (ColdBox:wirebox)",
							"contents": "wirebox.locateScopedSelf( )"
						},{
							"trigger": "wirebox.getTransientCache\tfn. (ColdBox:wirebox)",
							"contents": "wirebox.getTransientCache( targetId=${1:Any} )"
						},{
							"trigger": "wirebox.configureCacheBox\tfn. (ColdBox:wirebox)",
							"contents": "wirebox.configureCacheBox( config=${1:{}} )"
						},{
							"trigger": "wirebox.processProviderMethods\tfn. (ColdBox:wirebox)",
							"contents": "wirebox.processProviderMethods( targetObject=${1:Any}, mapping=${2:Any} )"
						},{
							"trigger": "wirebox.clearSingletons\tfn. (ColdBox:wirebox)",
							"contents": "wirebox.clearSingletons( )"
						},{
							"trigger": "wirebox.shutdown\tfn. (ColdBox:wirebox)",
							"contents": "wirebox.shutdown( )"
						},{
							"trigger": "wirebox.isColdBoxLinked\tfn. (ColdBox:wirebox)",
							"contents": "wirebox.isColdBoxLinked( )"
						},{
							"trigger": "wirebox.getChildInjector\tfn. (ColdBox:wirebox)",
							"contents": "wirebox.getChildInjector( name=${1:Any} )"
						},{
							"trigger": "wirebox.getScope\tfn. (ColdBox:wirebox)",
							"contents": "wirebox.getScope( scope=${1:any} )"
						},{
							"trigger": "wirebox.getParent\tfn. (ColdBox:wirebox)",
							"contents": "wirebox.getParent( )"
						},{
							"trigger": "wirebox.injectTarget\tfn. (ColdBox:wirebox)",
							"contents": "wirebox.injectTarget( target=${1:Any}, propertyName=${2:Any}, propertyObject=${3:Any}, scope=${4:Any}, argName=${5:Any} )"
						},{
							"trigger": "wirebox.getInjectorReferenceNames\tfn. (ColdBox:wirebox)",
							"contents": "wirebox.getInjectorReferenceNames( )"
						},{
							"trigger": "wirebox.locateInstance\tfn. (ColdBox:wirebox)",
							"contents": "wirebox.locateInstance( name=${1:Any} )"
						},{
							"trigger": "wirebox.getObjectPopulator\tfn. (ColdBox:wirebox)",
							"contents": "wirebox.getObjectPopulator( )"
						},{
							"trigger": "wirebox.isCacheBoxLinked\tfn. (ColdBox:wirebox)",
							"contents": "wirebox.isCacheBoxLinked( )"
						},{
							"trigger": "wirebox.registerChildInjector\tfn. (ColdBox:wirebox)",
							"contents": "wirebox.registerChildInjector( name=${1:Any}, child=${2:Any} )"
						},{
							"trigger": "wirebox.getChildInjectorNames\tfn. (ColdBox:wirebox)",
							"contents": "wirebox.getChildInjectorNames( )"
						},{
							"trigger": "wirebox.registerNewInstance\tfn. (ColdBox:wirebox)",
							"contents": "wirebox.registerNewInstance( name=${1:Any}, instancePath=${2:Any} )"
						},{
							"trigger": "wirebox.registerInjectorReference\tfn. (ColdBox:wirebox)",
							"contents": "wirebox.registerInjectorReference( injector=${1:Any} )"
						},{
							"trigger": "wirebox.containsInstance\tfn. (ColdBox:wirebox)",
							"contents": "wirebox.containsInstance( name=${1:Any} )"
						},{
							"trigger": "wirebox.hasChildInjector\tfn. (ColdBox:wirebox)",
							"contents": "wirebox.hasChildInjector( name=${1:Any} )"
						},{
							"trigger": "wirebox.getScopeRegistration\tfn. (ColdBox:wirebox)",
							"contents": "wirebox.getScopeRegistration( )"
						},{
							"trigger": "wirebox.processLazyProperties\tfn. (ColdBox:wirebox)",
							"contents": "wirebox.processLazyProperties( targetObject=${1:Any}, mapping=${2:Any} )"
						},{
							"trigger": "wirebox.registerListener\tfn. (ColdBox:wirebox)",
							"contents": "wirebox.registerListener( listener=${1:{}} )"
						},{
							"trigger": "wirebox.registerDSL\tfn. (ColdBox:wirebox)",
							"contents": "wirebox.registerDSL( namespace=${1:Any}, path=${2:Any} )"
						},{
							"trigger": "wirebox.clearAppSingletons\tfn. (ColdBox:wirebox)",
							"contents": "wirebox.clearAppSingletons( )"
						},{
							"trigger": "wirebox.registerListeners\tfn. (ColdBox:wirebox)",
							"contents": "wirebox.registerListeners( )"
						},{
							"trigger": "wirebox.getInjectorReference\tfn. (ColdBox:wirebox)",
							"contents": "wirebox.getInjectorReference( name=${1:Any} )"
						},{
							"trigger": "wirebox.processMixins\tfn. (ColdBox:wirebox)",
							"contents": "wirebox.processMixins( targetObject=${1:Any}, mapping=${2:Any} )"
						},{
							"trigger": "wirebox.hasParent\tfn. (ColdBox:wirebox)",
							"contents": "wirebox.hasParent( )"
						},{
							"trigger": "wirebox.removeFromScope\tfn. (ColdBox:wirebox)",
							"contents": "wirebox.removeFromScope( )"
						},{
							"trigger": "wirebox.setParent\tfn. (ColdBox:wirebox)",
							"contents": "wirebox.setParent( injector=${1:Any} )"
						},{
							"trigger": "wirebox.configureLogBox\tfn. (ColdBox:wirebox)",
							"contents": "wirebox.configureLogBox( configPath=${1:Any} )"
						},{
							"trigger": "logbox.getRootLogger\tfn. (ColdBox:logbox)",
							"contents": "logbox.getRootLogger( )"
						},{
							"trigger": "logbox.getCurrentLoggers\tfn. (ColdBox:logbox)",
							"contents": "logbox.getCurrentLoggers( )"
						},{
							"trigger": "logbox.getCurrentAppenders\tfn. (ColdBox:logbox)",
							"contents": "logbox.getCurrentAppenders( )"
						},{
							"trigger": "logbox.locateCategoryParentLogger\tfn. (ColdBox:logbox)",
							"contents": "logbox.locateCategoryParentLogger( category=${1:Any} )"
						},{
							"trigger": "logbox.getLogger\tfn. (ColdBox:logbox)",
							"contents": "logbox.getLogger( category=${1:Any} )"
						},{
							"trigger": "logbox.registerAppender\tfn. (ColdBox:logbox)",
							"contents": "logbox.registerAppender( name=${1:Any}, class=${2:Any}, properties=${3:{}}, layout=${4:Any}, levelMin=${5:numeric}, levelMax=${6:numeric} )"
						},{
							"trigger": "logbox.getLoggerClass\tfn. (ColdBox:logbox)",
							"contents": "logbox.getLoggerClass( class=${1:Any} )"
						},{
							"trigger": "logbox.getAppendersMap\tfn. (ColdBox:logbox)",
							"contents": "logbox.getAppendersMap( appenders=${1:Any} )"
						},{
							"trigger": "logbox.shutdown\tfn. (ColdBox:logbox)",
							"contents": "logbox.shutdown( )"
						},{
							"trigger": "assert.notStartsWithCase\tfn. (TestBox:assert)",
							"contents": "assert.notStartsWithCase( target=\"${1:}\", needle=\"${2:}\", message=${3:Any} )"
						},{
							"trigger": "assert.isEqualWithCase\tfn. (TestBox:assert)",
							"contents": "assert.isEqualWithCase( expected=\"${1:}\", actual=\"${2:}\", message=${3:Any} )"
						},{
							"trigger": "assert.includesWithCase\tfn. (TestBox:assert)",
							"contents": "assert.includesWithCase( target=${1:any}, needle=${2:any}, message=${3:Any} )"
						},{
							"trigger": "assert.isEqual\tfn. (TestBox:assert)",
							"contents": "assert.isEqual( expected=${1:any}, actual=${2:any}, message=${3:Any} )"
						},{
							"trigger": "assert.notMatch\tfn. (TestBox:assert)",
							"contents": "assert.notMatch( actual=\"${1:}\", regex=\"${2:}\", message=${3:Any} )"
						},{
							"trigger": "assert.getIdentityHashCode\tfn. (TestBox:assert)",
							"contents": "assert.getIdentityHashCode( target=${1:any} )"
						},{
							"trigger": "assert.normalizeToStruct\tfn. (TestBox:assert)",
							"contents": "assert.normalizeToStruct( target=${1:any} )"
						},{
							"trigger": "assert.isNotEmpty\tfn. (TestBox:assert)",
							"contents": "assert.isNotEmpty( target=${1:any}, message=${2:Any} )"
						},{
							"trigger": "assert.getTargetLength\tfn. (TestBox:assert)",
							"contents": "assert.getTargetLength( target=${1:any} )"
						},{
							"trigger": "assert.endsWith\tfn. (TestBox:assert)",
							"contents": "assert.endsWith( target=\"${1:}\", needle=\"${2:}\", message=${3:Any} )"
						},{
							"trigger": "assert.equalize\tfn. (TestBox:assert)",
							"contents": "assert.equalize( expected=${1:any}, actual=${2:any} )"
						},{
							"trigger": "assert.notTypeOf\tfn. (TestBox:assert)",
							"contents": "assert.notTypeOf( type=\"${1:}\", actual=${2:any}, message=${3:Any} )"
						},{
							"trigger": "assert.isSameInstance\tfn. (TestBox:assert)",
							"contents": "assert.isSameInstance( expected=${1:any}, actual=${2:any}, message=${3:Any} )"
						},{
							"trigger": "assert.notNull\tfn. (TestBox:assert)",
							"contents": "assert.notNull( actual=${1:any}, message=${2:Any} )"
						},{
							"trigger": "assert.notKey\tfn. (TestBox:assert)",
							"contents": "assert.notKey( target=${1:any}, key=\"${2:}\", message=${3:Any}, caseSensitive=${4:true,false} )"
						},{
							"trigger": "assert.instanceOf\tfn. (TestBox:assert)",
							"contents": "assert.instanceOf( actual=${1:any}, typeName=\"${2:}\", message=${3:Any} )"
						},{
							"trigger": "assert.notThrows\tfn. (TestBox:assert)",
							"contents": "assert.notThrows( target=${1:any}, type=${2:Any}, regex=${3:Any}, message=${4:Any} )"
						},{
							"trigger": "assert.notEndsWith\tfn. (TestBox:assert)",
							"contents": "assert.notEndsWith( target=\"${1:}\", needle=\"${2:}\", message=${3:Any} )"
						},{
							"trigger": "assert.notIncludesWithCase\tfn. (TestBox:assert)",
							"contents": "assert.notIncludesWithCase( target=${1:any}, needle=${2:any}, message=${3:Any} )"
						},{
							"trigger": "assert.skip\tfn. (TestBox:assert)",
							"contents": "assert.skip( message=${1:Any}, detail=${2:Any} )"
						},{
							"trigger": "assert.fail\tfn. (TestBox:assert)",
							"contents": "assert.fail( message=${1:Any}, detail=${2:Any} )"
						},{
							"trigger": "assert.key\tfn. (TestBox:assert)",
							"contents": "assert.key( target=${1:any}, key=\"${2:}\", message=${3:Any}, caseSensitive=${4:true,false} )"
						},{
							"trigger": "assert.isNotEqual\tfn. (TestBox:assert)",
							"contents": "assert.isNotEqual( expected=${1:any}, actual=${2:any}, message=${3:Any} )"
						},{
							"trigger": "assert.isGTE\tfn. (TestBox:assert)",
							"contents": "assert.isGTE( actual=${1:any}, target=${2:any}, message=${3:Any} )"
						},{
							"trigger": "assert.startsWith\tfn. (TestBox:assert)",
							"contents": "assert.startsWith( target=\"${1:}\", needle=\"${2:}\", message=${3:Any} )"
						},{
							"trigger": "assert.between\tfn. (TestBox:assert)",
							"contents": "assert.between( actual=${1:any}, min=${2:any}, max=${3:any}, message=${4:Any} )"
						},{
							"trigger": "assert.lengthOf\tfn. (TestBox:assert)",
							"contents": "assert.lengthOf( target=${1:any}, length=\"${2:}\", message=${3:Any} )"
						},{
							"trigger": "assert.startsWithCase\tfn. (TestBox:assert)",
							"contents": "assert.startsWithCase( target=\"${1:}\", needle=\"${2:}\", message=${3:Any} )"
						},{
							"trigger": "assert.notInstanceOf\tfn. (TestBox:assert)",
							"contents": "assert.notInstanceOf( actual=${1:any}, typeName=\"${2:}\", message=${3:Any} )"
						},{
							"trigger": "assert.isNotSameInstance\tfn. (TestBox:assert)",
							"contents": "assert.isNotSameInstance( expected=${1:any}, actual=${2:any}, message=${3:Any} )"
						},{
							"trigger": "assert.match\tfn. (TestBox:assert)",
							"contents": "assert.match( actual=\"${1:}\", regex=\"${2:}\", message=${3:Any} )"
						},{
							"trigger": "assert.isGT\tfn. (TestBox:assert)",
							"contents": "assert.isGT( actual=${1:any}, target=${2:any}, message=${3:Any} )"
						},{
							"trigger": "assert.matchWithCase\tfn. (TestBox:assert)",
							"contents": "assert.matchWithCase( actual=\"${1:}\", regex=\"${2:}\", message=${3:Any} )"
						},{
							"trigger": "assert.deepKey\tfn. (TestBox:assert)",
							"contents": "assert.deepKey( target=${1:{}}, key=\"${2:}\", message=${3:Any} )"
						},{
							"trigger": "assert.closeTo\tfn. (TestBox:assert)",
							"contents": "assert.closeTo( expected=${1:any}, actual=${2:any}, delta=${3:any}, datePart=${4:Any}, message=${5:Any} )"
						},{
							"trigger": "assert.notEndsWithCase\tfn. (TestBox:assert)",
							"contents": "assert.notEndsWithCase( target=\"${1:}\", needle=\"${2:}\", message=${3:Any} )"
						},{
							"trigger": "assert.isJSON\tfn. (TestBox:assert)",
							"contents": "assert.isJSON( actual=${1:any}, message=${2:Any} )"
						},{
							"trigger": "assert.assert\tfn. (TestBox:assert)",
							"contents": "assert.assert( expression=${1:true,false}, message=${2:Any} )"
						},{
							"trigger": "assert.endsWithCase\tfn. (TestBox:assert)",
							"contents": "assert.endsWithCase( target=\"${1:}\", needle=\"${2:}\", message=${3:Any} )"
						},{
							"trigger": "assert.isFalse\tfn. (TestBox:assert)",
							"contents": "assert.isFalse( actual=${1:true,false}, message=${2:Any} )"
						},{
							"trigger": "assert.notStartsWith\tfn. (TestBox:assert)",
							"contents": "assert.notStartsWith( target=\"${1:}\", needle=\"${2:}\", message=${3:Any} )"
						},{
							"trigger": "assert.includes\tfn. (TestBox:assert)",
							"contents": "assert.includes( target=${1:any}, needle=${2:any}, message=${3:Any} )"
						},{
							"trigger": "assert.isTrue\tfn. (TestBox:assert)",
							"contents": "assert.isTrue( actual=${1:true,false}, message=${2:Any} )"
						},{
							"trigger": "assert.typeOf\tfn. (TestBox:assert)",
							"contents": "assert.typeOf( type=\"${1:}\", actual=${2:any}, message=${3:Any} )"
						},{
							"trigger": "assert.isEmpty\tfn. (TestBox:assert)",
							"contents": "assert.isEmpty( target=${1:any}, message=${2:Any} )"
						},{
							"trigger": "assert.throws\tfn. (TestBox:assert)",
							"contents": "assert.throws( target=${1:any}, type=${2:Any}, regex=${3:Any}, message=${4:Any} )"
						},{
							"trigger": "assert.notIncludes\tfn. (TestBox:assert)",
							"contents": "assert.notIncludes( target=${1:any}, needle=${2:any}, message=${3:Any} )"
						},{
							"trigger": "assert.notDeepKey\tfn. (TestBox:assert)",
							"contents": "assert.notDeepKey( target=${1:{}}, key=\"${2:}\", message=${3:Any} )"
						},{
							"trigger": "assert.getStringName\tfn. (TestBox:assert)",
							"contents": "assert.getStringName( obj=${1:Any} )"
						},{
							"trigger": "assert.notLengthOf\tfn. (TestBox:assert)",
							"contents": "assert.notLengthOf( target=${1:any}, length=\"${2:}\", message=${3:Any} )"
						},{
							"trigger": "assert.null\tfn. (TestBox:assert)",
							"contents": "assert.null( actual=${1:any}, message=${2:Any} )"
						},{
							"trigger": "assert.notMatchWithCase\tfn. (TestBox:assert)",
							"contents": "assert.notMatchWithCase( actual=\"${1:}\", regex=\"${2:}\", message=${3:Any} )"
						},{
							"trigger": "assert.isLTE\tfn. (TestBox:assert)",
							"contents": "assert.isLTE( actual=${1:any}, target=${2:any}, message=${3:Any} )"
						},{
							"trigger": "assert.isLT\tfn. (TestBox:assert)",
							"contents": "assert.isLT( actual=${1:any}, target=${2:any}, message=${3:Any} )"
						},{
							"trigger": "html.tag\tfn. (ColdBox:html)",
							"contents": "html.tag( tag=${1:Any}, content=${2:Any}, data=${3:{}}, excludes=\"${4:}\" )"
						},{
							"trigger": "html.img\tfn. (ColdBox:html)",
							"contents": "html.img( src=${1:Any}, alt=${2:Any}, class=${3:Any}, width=${4:Any}, height=${5:Any}, title=${6:Any}, rel=${7:Any}, name=${8:Any}, noBaseURL=${9:true,false}, data=${10:{}} )"
						},{
							"trigger": "html.anchor\tfn. (ColdBox:html)",
							"contents": "html.anchor( name=${1:Any}, text=${2:Any}, data=${3:{}} )"
						},{
							"trigger": "html.audio\tfn. (ColdBox:html)",
							"contents": "html.audio( src=${1:Any}, autoplay=${2:true,false}, controls=${3:true,false}, loop=${4:true,false}, preload=${5:true,false}, noBaseURL=${6:true,false}, name=${7:Any}, data=${8:Any} )"
						},{
							"trigger": "html.passwordField\tfn. (ColdBox:html)",
							"contents": "html.passwordField( name=${1:Any}, value=${2:Any}, disabled=${3:true,false}, readonly=${4:true,false}, wrapper=${5:Any}, wrapperAttrs=${6:{}}, groupWrapper=${7:Any}, groupWrapperAttrs=${8:{}}, label=${9:Any}, labelAttrs=${10:{}}, labelWrapper=${11:Any}, labelWrapperAttrs=${12:{}}, labelClass=${13:Any}, bind=${14:Any}, bindProperty=${15:Any}, data=${16:{}}, inputInsideLabel=${17:true,false} )"
						},{
							"trigger": "html.video\tfn. (ColdBox:html)",
							"contents": "html.video( src=${1:Any}, width=${2:Any}, height=${3:Any}, poster=${4:Any}, autoplay=${5:true,false}, controls=${6:true,false}, loop=${7:true,false}, preload=${8:true,false}, noBaseURL=${9:true,false}, name=${10:Any}, data=${11:Any} )"
						},{
							"trigger": "html.elixirPath\tfn. (ColdBox:html)",
							"contents": "html.elixirPath( fileName=${1:Any}, useModuleRoot=${2:true,false}, version=${3:numeric}, manifestRoot=${4:Any} )"
						},{
							"trigger": "html.startForm\tfn. (ColdBox:html)",
							"contents": "html.startForm( action=\"${1:}\", name=\"${2:}\", method=\"${3:}\", multipart=${4:true,false}, ssl=${5:true,false}, noBaseURL=${6:true,false}, data=${7:{}} )"
						},{
							"trigger": "html.objectsToTable\tfn. (ColdBox:html)",
							"contents": "html.objectsToTable( data=${1:Any}, includes=\"${2:}\", excludes=\"${3:}\", buffer=${4:Any} )"
						},{
							"trigger": "html.normalizeID\tfn. (ColdBox:html)",
							"contents": "html.normalizeID( args=${1:Any} )"
						},{
							"trigger": "html.addStyleContent\tfn. (ColdBox:html)",
							"contents": "html.addStyleContent( content=${1:Any}, sendToHeader=${2:true,false} )"
						},{
							"trigger": "html.checkbox\tfn. (ColdBox:html)",
							"contents": "html.checkbox( name=${1:Any}, value=${2:Any}, disabled=${3:true,false}, checked=${4:true,false}, wrapper=${5:Any}, wrapperAttrs=${6:{}}, groupWrapper=${7:Any}, groupWrapperAttrs=${8:{}}, label=${9:Any}, labelAttrs=${10:{}}, labelWrapper=${11:Any}, labelWrapperAttrs=${12:{}}, labelClass=${13:Any}, bind=${14:Any}, bindProperty=${15:Any}, data=${16:{}}, inputInsideLabel=${17:true,false} )"
						},{
							"trigger": "html.queryToTable\tfn. (ColdBox:html)",
							"contents": "html.queryToTable( data=${1:Any}, includes=\"${2:}\", excludes=\"${3:}\", buffer=${4:Any} )"
						},{
							"trigger": "html.toHtmlList\tfn. (ColdBox:html)",
							"contents": "html.toHtmlList( tag=${1:Any}, values=${2:Any}, column=${3:Any}, data=${4:{}} )"
						},{
							"trigger": "html.fileField\tfn. (ColdBox:html)",
							"contents": "html.fileField( name=${1:Any}, value=${2:Any}, disabled=${3:true,false}, readonly=${4:true,false}, wrapper=${5:Any}, wrapperAttrs=${6:{}}, groupWrapper=${7:Any}, groupWrapperAttrs=${8:{}}, label=${9:Any}, labelAttrs=${10:{}}, labelWrapper=${11:Any}, labelWrapperAttrs=${12:{}}, labelClass=${13:Any}, bind=${14:Any}, bindProperty=${15:Any}, data=${16:{}}, inputInsideLabel=${17:true,false} )"
						},{
							"trigger": "html.options\tfn. (ColdBox:html)",
							"contents": "html.options( values=${1:Any}, column=${2:Any}, nameColumn=${3:Any}, selectedIndex=${4:Any}, selectedValue=${5:Any} )"
						},{
							"trigger": "html.elixir\tfn. (ColdBox:html)",
							"contents": "html.elixir( fileName=${1:Any}, buildDirectory=${2:Any}, sendToHeader=${3:true,false}, async=${4:true,false}, defer=${5:true,false}, version=${6:numeric}, manifestRoot=${7:Any} )"
						},{
							"trigger": "html.link\tfn. (ColdBox:html)",
							"contents": "html.link( href=${1:Any}, rel=${2:Any}, type=${3:Any}, title=${4:Any}, media=${5:Any}, noBaseURL=${6:true,false}, charset=${7:Any}, sendToHeader=${8:true,false}, data=${9:{}} )"
						},{
							"trigger": "html.bindValue\tfn. (ColdBox:html)",
							"contents": "html.bindValue( args=${1:Any} )"
						},{
							"trigger": "html.ul\tfn. (ColdBox:html)",
							"contents": "html.ul( values=${1:Any}, column=\"${2:}\" )"
						},{
							"trigger": "html.getColumnArray\tfn. (ColdBox:html)",
							"contents": "html.getColumnArray( qry=${1:Any}, columnName=${2:Any} )"
						},{
							"trigger": "html.nbs\tfn. (ColdBox:html)",
							"contents": "html.nbs( count=${1:numeric} )"
						},{
							"trigger": "html.onMissingMethod\tfn. (ColdBox:html)",
							"contents": "html.onMissingMethod( missingMethodName=${1:Any}, missingMethodArguments=${2:Any} )"
						},{
							"trigger": "html.prepareBaseLink\tfn. (ColdBox:html)",
							"contents": "html.prepareBaseLink( noBaseURL=${1:true,false}, src=${2:Any} )"
						},{
							"trigger": "html.imageButton\tfn. (ColdBox:html)",
							"contents": "html.imageButton( src=${1:Any}, name=${2:Any}, disabled=${3:true,false}, wrapper=${4:Any}, wrapperAttrs=${5:{}}, groupWrapper=${6:Any}, groupWrapperAttrs=${7:{}}, label=${8:Any}, labelAttrs=${9:{}}, labelWrapper=${10:Any}, labelWrapperAttrs=${11:{}}, labelClass=${12:Any}, bind=${13:Any}, bindProperty=${14:Any}, data=${15:{}}, inputInsideLabel=${16:true,false} )"
						},{
							"trigger": "html.br\tfn. (ColdBox:html)",
							"contents": "html.br( count=${1:numeric} )"
						},{
							"trigger": "html.docType\tfn. (ColdBox:html)",
							"contents": "html.docType( type=${1:Any} )"
						},{
							"trigger": "html.entityFields\tfn. (ColdBox:html)",
							"contents": "html.entityFields( entity=${1:Any}, groupWrapper=${2:Any}, groupWrapperAttrs=${3:{}}, fieldwrapper=${4:Any}, fieldWrapperAttrs=${5:{}}, labelAttrs=${6:{}}, labelwrapper=${7:Any}, labelWrapperAttrs=${8:{}}, labelClass=${9:Any}, textareas=${10:Any}, booleanSelect=${11:true,false}, showRelations=${12:true,false}, manytoone=${13:{}}, manytomany=${14:{}}, inputInsideLabel=${15:true,false} )"
						},{
							"trigger": "html.makePretty\tfn. (ColdBox:html)",
							"contents": "html.makePretty( text=${1:Any} )"
						},{
							"trigger": "html.endFieldSet\tfn. (ColdBox:html)",
							"contents": "html.endFieldSet( )"
						},{
							"trigger": "html.emailField\tfn. (ColdBox:html)",
							"contents": "html.emailField( name=${1:Any}, value=${2:Any}, disabled=${3:true,false}, readonly=${4:true,false}, wrapper=${5:Any}, wrapperAttrs=${6:{}}, groupWrapper=${7:Any}, groupWrapperAttrs=${8:{}}, label=${9:Any}, labelAttrs=${10:{}}, labelWrapper=${11:Any}, labelWrapperAttrs=${12:{}}, labelClass=${13:Any}, bind=${14:Any}, bindProperty=${15:Any}, data=${16:{}}, inputInsideLabel=${17:true,false} )"
						},{
							"trigger": "html.autoDiscoveryLink\tfn. (ColdBox:html)",
							"contents": "html.autoDiscoveryLink( type=${1:Any}, href=${2:Any}, rel=${3:Any}, title=${4:Any}, data=${5:{}} )"
						},{
							"trigger": "html.urlField\tfn. (ColdBox:html)",
							"contents": "html.urlField( name=${1:Any}, value=${2:Any}, disabled=${3:true,false}, readonly=${4:true,false}, wrapper=${5:Any}, wrapperAttrs=${6:{}}, groupWrapper=${7:Any}, groupWrapperAttrs=${8:{}}, label=${9:Any}, labelAttrs=${10:{}}, labelWrapper=${11:Any}, labelWrapperAttrs=${12:{}}, labelClass=${13:Any}, bind=${14:Any}, bindProperty=${15:Any}, data=${16:{}}, inputInsideLabel=${17:true,false} )"
						},{
							"trigger": "html.$htmlHead\tfn. (ColdBox:html)",
							"contents": "html.$htmlHead( content=${1:Any} )"
						},{
							"trigger": "html.textField\tfn. (ColdBox:html)",
							"contents": "html.textField( name=${1:Any}, value=${2:Any}, disabled=${3:true,false}, readonly=${4:true,false}, wrapper=${5:Any}, wrapperAttrs=${6:{}}, groupWrapper=${7:Any}, groupWrapperAttrs=${8:{}}, label=${9:Any}, labelAttrs=${10:{}}, labelWrapper=${11:Any}, labelWrapperAttrs=${12:{}}, labelClass=${13:Any}, bind=${14:Any}, bindProperty=${15:Any}, data=${16:{}}, inputInsideLabel=${17:true,false} )"
						},{
							"trigger": "html.radioButton\tfn. (ColdBox:html)",
							"contents": "html.radioButton( name=${1:Any}, value=${2:Any}, disabled=${3:true,false}, checked=${4:true,false}, wrapper=${5:Any}, wrapperAttrs=${6:{}}, groupWrapper=${7:Any}, groupWrapperAttrs=${8:{}}, label=${9:Any}, labelAttrs=${10:{}}, labelWrapper=${11:Any}, labelWrapperAttrs=${12:{}}, labelClass=${13:Any}, bind=${14:Any}, bindProperty=${15:Any}, data=${16:{}}, inputInsideLabel=${17:true,false} )"
						},{
							"trigger": "html.addAsset\tfn. (ColdBox:html)",
							"contents": "html.addAsset( asset=${1:Any}, sendToHeader=${2:true,false}, async=${3:true,false}, defer=${4:true,false} )"
						},{
							"trigger": "html.hiddenField\tfn. (ColdBox:html)",
							"contents": "html.hiddenField( name=${1:Any}, value=${2:Any}, disabled=${3:true,false}, readonly=${4:true,false}, wrapper=${5:Any}, wrapperAttrs=${6:{}}, groupWrapper=${7:Any}, groupWrapperAttrs=${8:{}}, label=${9:Any}, labelAttrs=${10:{}}, labelWrapper=${11:Any}, labelWrapperAttrs=${12:{}}, labelClass=${13:Any}, bind=${14:Any}, bindProperty=${15:Any}, data=${16:{}}, inputInsideLabel=${17:true,false} )"
						},{
							"trigger": "html.discoverElixirManifest\tfn. (ColdBox:html)",
							"contents": "html.discoverElixirManifest( currentModule=\"${1:}\", useModuleRoot=${2:true,false}, version=${3:numeric}, manifestRoot=${4:Any} )"
						},{
							"trigger": "html.ol\tfn. (ColdBox:html)",
							"contents": "html.ol( values=${1:Any}, column=\"${2:}\" )"
						},{
							"trigger": "html.table\tfn. (ColdBox:html)",
							"contents": "html.table( data=${1:Any}, includes=${2:Any}, excludes=${3:Any}, name=${4:Any} )"
						},{
							"trigger": "html.resetButton\tfn. (ColdBox:html)",
							"contents": "html.resetButton( name=${1:Any}, value=${2:Any}, disabled=${3:true,false}, wrapper=${4:Any}, wrapperAttrs=${5:{}}, groupWrapper=${6:Any}, groupWrapperAttrs=${7:{}}, label=${8:Any}, labelAttrs=${9:{}}, labelWrapper=${10:Any}, labelWrapperAttrs=${11:{}}, labelClass=${12:Any}, bind=${13:Any}, bindProperty=${14:Any}, data=${15:{}}, inputInsideLabel=${16:true,false} )"
						},{
							"trigger": "html.startFieldSet\tfn. (ColdBox:html)",
							"contents": "html.startFieldSet( legend=${1:Any}, data=${2:{}} )"
						},{
							"trigger": "html.canvas\tfn. (ColdBox:html)",
							"contents": "html.canvas( id=${1:Any}, width=${2:Any}, height=${3:Any}, data=${4:Any} )"
						},{
							"trigger": "html.inputField\tfn. (ColdBox:html)",
							"contents": "html.inputField( type=${1:Any}, name=${2:Any}, value=${3:Any}, disabled=${4:true,false}, checked=${5:true,false}, readonly=${6:true,false}, wrapper=${7:Any}, wrapperAttrs=${8:{}}, groupWrapper=${9:Any}, groupWrapperAttrs=${10:{}}, label=${11:Any}, labelAttrs=${12:{}}, labelWrapper=${13:Any}, labelWrapperAttrs=${14:{}}, labelClass=${15:Any}, bind=${16:Any}, bindProperty=${17:Any}, data=${18:{}}, inputInsideLabel=${19:true,false} )"
						},{
							"trigger": "html.textArea\tfn. (ColdBox:html)",
							"contents": "html.textArea( name=${1:Any}, cols=${2:numeric}, rows=${3:numeric}, value=${4:Any}, disabled=${5:true,false}, readonly=${6:true,false}, wrapper=${7:Any}, wrapperAttrs=${8:{}}, groupWrapper=${9:Any}, groupWrapperAttrs=${10:{}}, label=${11:Any}, labelAttrs=${12:{}}, labelWrapper=${13:Any}, labelWrapperAttrs=${14:{}}, labelClass=${15:Any}, bind=${16:Any}, bindProperty=${17:Any}, data=${18:{}}, inputInsideLabel=${19:true,false} )"
						},{
							"trigger": "html.button\tfn. (ColdBox:html)",
							"contents": "html.button( name=${1:Any}, value=${2:Any}, disabled=${3:true,false}, type=${4:Any}, wrapper=${5:Any}, wrapperAttrs=${6:{}}, groupWrapper=${7:Any}, groupWrapperAttrs=${8:{}}, label=${9:Any}, labelAttrs=${10:{}}, labelWrapper=${11:Any}, labelWrapperAttrs=${12:{}}, labelClass=${13:Any}, bind=${14:Any}, bindProperty=${15:Any}, data=${16:{}}, inputInsideLabel=${17:true,false} )"
						},{
							"trigger": "html.select\tfn. (ColdBox:html)",
							"contents": "html.select( name=${1:Any}, options=${2:Any}, column=${3:Any}, nameColumn=${4:Any}, selectedIndex=${5:Any}, selectedValue=${6:Any}, bind=${7:Any}, bindProperty=${8:Any}, disabled=${9:true,false}, multiple=${10:true,false}, wrapper=${11:Any}, wrapperAttrs=${12:{}}, groupWrapper=${13:Any}, groupWrapperAttrs=${14:{}}, label=${15:Any}, labelAttrs=${16:{}}, labelwrapper=${17:Any}, labelWrapperAttrs=${18:{}}, data=${19:{}}, labelClass=${20:Any}, inputInsideLabel=${21:true,false} )"
						},{
							"trigger": "html.wrapTag\tfn. (ColdBox:html)",
							"contents": "html.wrapTag( buffer=${1:Any}, tag=${2:Any}, end=${3:true,false}, attrs=${4:{}} )"
						},{
							"trigger": "html.arrayToTable\tfn. (ColdBox:html)",
							"contents": "html.arrayToTable( data=${1:Any}, includes=\"${2:}\", excludes=\"${3:}\", buffer=${4:Any} )"
						},{
							"trigger": "html.href\tfn. (ColdBox:html)",
							"contents": "html.href( href=${1:Any}, text=${2:Any}, queryString=${3:Any}, title=${4:Any}, noBaseURL=${5:true,false}, data=${6:{}} )"
						},{
							"trigger": "html.label\tfn. (ColdBox:html)",
							"contents": "html.label( field=${1:Any}, content=${2:Any}, labelAttrs=${3:{}}, wrapper=${4:Any}, wrapperAttrs=${5:{}}, data=${6:{}}, class=${7:Any}, labelMode=${8:numeric} )"
						},{
							"trigger": "html.meta\tfn. (ColdBox:html)",
							"contents": "html.meta( name=${1:Any}, content=${2:Any}, type=${3:Any}, sendToHeader=${4:true,false}, property=${5:Any} )"
						},{
							"trigger": "html.endForm\tfn. (ColdBox:html)",
							"contents": "html.endForm( )"
						},{
							"trigger": "html.heading\tfn. (ColdBox:html)",
							"contents": "html.heading( content=${1:Any}, size=${2:numeric} )"
						},{
							"trigger": "html.submitButton\tfn. (ColdBox:html)",
							"contents": "html.submitButton( name=${1:Any}, value=${2:Any}, disabled=${3:true,false}, wrapper=${4:Any}, wrapperAttrs=${5:{}}, groupWrapper=${6:Any}, groupWrapperAttrs=${7:{}}, label=${8:Any}, labelAttrs=${9:{}}, labelWrapper=${10:Any}, labelWrapperAttrs=${11:{}}, labelClass=${12:Any}, bind=${13:Any}, bindProperty=${14:Any}, data=${15:{}}, inputInsideLabel=${16:true,false} )"
						},{
							"trigger": "html.passIncludeExclude\tfn. (ColdBox:html)",
							"contents": "html.passIncludeExclude( value=${1:Any}, includes=${2:Any}, excludes=${3:Any} )"
						},{
							"trigger": "html.flattenAttributes\tfn. (ColdBox:html)",
							"contents": "html.flattenAttributes( target=${1:{}}, excludes=${2:Any}, buffer=${3:Any} )"
						},{
							"trigger": "html.addJSContent\tfn. (ColdBox:html)",
							"contents": "html.addJSContent( content=${1:Any}, sendToHeader=${2:true,false} )"
						},{
							"trigger": "event.paramValue\tfn. (ColdBox:event)",
							"contents": "event.paramValue( name=${1:Any}, value=${2:Any}, private=${3:true,false} )"
						},{
							"trigger": "event.getSESBasePath\tfn. (ColdBox:event)",
							"contents": "event.getSESBasePath( )"
						},{
							"trigger": "event.getHTTPBasicCredentials\tfn. (ColdBox:event)",
							"contents": "event.getHTTPBasicCredentials( )"
						},{
							"trigger": "event.getFileMimeType\tfn. (ColdBox:event)",
							"contents": "event.getFileMimeType( extension=\"${1:}\" )"
						},{
							"trigger": "event.getSize\tfn. (ColdBox:event)",
							"contents": "event.getSize( private=${1:true,false} )"
						},{
							"trigger": "event.setView\tfn. (ColdBox:event)",
							"contents": "event.setView( view=${1:Any}, args=${2:{}}, layout=${3:Any}, module=${4:Any}, noLayout=${5:true,false}, cache=${6:true,false}, cacheTimeout=${7:Any}, cacheLastAccessTimeout=${8:Any}, cacheSuffix=${9:Any}, cacheProvider=${10:Any}, name=${11:Any} )"
						},{
							"trigger": "event.getPrivateTrimValue\tfn. (ColdBox:event)",
							"contents": "event.getPrivateTrimValue( name=${1:Any}, defaultValue=${2:Any} )"
						},{
							"trigger": "event.isViewCacheable\tfn. (ColdBox:event)",
							"contents": "event.isViewCacheable( )"
						},{
							"trigger": "event.setSESEnabled\tfn. (ColdBox:event)",
							"contents": "event.setSESEnabled( flag=${1:true,false} )"
						},{
							"trigger": "event.renderWithFormats\tfn. (ColdBox:event)",
							"contents": "event.renderWithFormats( )"
						},{
							"trigger": "event.paramPrivateValue\tfn. (ColdBox:event)",
							"contents": "event.paramPrivateValue( name=${1:Any}, value=${2:Any} )"
						},{
							"trigger": "event.noExecution\tfn. (ColdBox:event)",
							"contents": "event.noExecution( )"
						},{
							"trigger": "event.setIsInvalidHTTPMethod\tfn. (ColdBox:event)",
							"contents": "event.setIsInvalidHTTPMethod( target=${1:true,false} )"
						},{
							"trigger": "event.setRequestTimeout\tfn. (ColdBox:event)",
							"contents": "event.setRequestTimeout( seconds=${1:numeric} )"
						},{
							"trigger": "event.valueExists\tfn. (ColdBox:event)",
							"contents": "event.valueExists( name=${1:Any}, private=${2:true,false} )"
						},{
							"trigger": "event.urlMatchesExact\tfn. (ColdBox:event)",
							"contents": "event.urlMatchesExact( path=\"${1:}\" )"
						},{
							"trigger": "event.getCurrentHandler\tfn. (ColdBox:event)",
							"contents": "event.getCurrentHandler( )"
						},{
							"trigger": "event.getRenderData\tfn. (ColdBox:event)",
							"contents": "event.getRenderData( )"
						},{
							"trigger": "event.getModuleEntryPoint\tfn. (ColdBox:event)",
							"contents": "event.getModuleEntryPoint( module=${1:Any} )"
						},{
							"trigger": "event.sendFile\tfn. (ColdBox:event)",
							"contents": "event.sendFile( file=${1:Any}, name=${2:Any}, mimeType=${3:Any}, disposition=${4:Any}, abortAtEnd=${5:true,false}, extension=${6:Any}, deleteFile=${7:true,false} )"
						},{
							"trigger": "event.getPrivateSize\tfn. (ColdBox:event)",
							"contents": "event.getPrivateSize( )"
						},{
							"trigger": "event.getHTMLBaseURL\tfn. (ColdBox:event)",
							"contents": "event.getHTMLBaseURL( )"
						},{
							"trigger": "event.buildLink\tfn. (ColdBox:event)",
							"contents": "event.buildLink( to=${1:Any}, queryString=${2:Any}, translate=${3:true,false}, ssl=${4:true,false}, baseURL=${5:Any} )"
						},{
							"trigger": "event.getHTTPMethod\tfn. (ColdBox:event)",
							"contents": "event.getHTTPMethod( )"
						},{
							"trigger": "event.getCurrentView\tfn. (ColdBox:event)",
							"contents": "event.getCurrentView( )"
						},{
							"trigger": "event.isEventCacheable\tfn. (ColdBox:event)",
							"contents": "event.isEventCacheable( )"
						},{
							"trigger": "event.getHTTPContent\tfn. (ColdBox:event)",
							"contents": "event.getHTTPContent( json=${1:true,false}, xml=${2:true,false} )"
						},{
							"trigger": "event.getHTTPHeader\tfn. (ColdBox:event)",
							"contents": "event.getHTTPHeader( header=${1:Any}, defaultValue=${2:Any} )"
						},{
							"trigger": "event.removePrivateValue\tfn. (ColdBox:event)",
							"contents": "event.removePrivateValue( name=${1:Any}, private=${2:true,false} )"
						},{
							"trigger": "event.getOnly\tfn. (ColdBox:event)",
							"contents": "event.getOnly( keys=${1:Any}, private=${2:true,false} )"
						},{
							"trigger": "event.getCurrentEvent\tfn. (ColdBox:event)",
							"contents": "event.getCurrentEvent( )"
						},{
							"trigger": "event.getCurrentRoutedModule\tfn. (ColdBox:event)",
							"contents": "event.getCurrentRoutedModule( )"
						},{
							"trigger": "event.getResponse\tfn. (ColdBox:event)",
							"contents": "event.getResponse( )"
						},{
							"trigger": "event.isProxyRequest\tfn. (ColdBox:event)",
							"contents": "event.isProxyRequest( )"
						},{
							"trigger": "event.setValue\tfn. (ColdBox:event)",
							"contents": "event.setValue( name=${1:Any}, value=${2:Any}, private=${3:true,false} )"
						},{
							"trigger": "event.getPrivateValue\tfn. (ColdBox:event)",
							"contents": "event.getPrivateValue( name=${1:Any}, defaultValue=${2:Any} )"
						},{
							"trigger": "event.getSelf\tfn. (ColdBox:event)",
							"contents": "event.getSelf( )"
						},{
							"trigger": "event.getCurrentRouteName\tfn. (ColdBox:event)",
							"contents": "event.getCurrentRouteName( )"
						},{
							"trigger": "event.getCurrentAction\tfn. (ColdBox:event)",
							"contents": "event.getCurrentAction( )"
						},{
							"trigger": "event.isSES\tfn. (ColdBox:event)",
							"contents": "event.isSES( )"
						},{
							"trigger": "event.getCurrentViewModule\tfn. (ColdBox:event)",
							"contents": "event.getCurrentViewModule( )"
						},{
							"trigger": "event.setMemento\tfn. (ColdBox:event)",
							"contents": "event.setMemento( memento=${1:{}} )"
						},{
							"trigger": "event.getCurrentRouteMeta\tfn. (ColdBox:event)",
							"contents": "event.getCurrentRouteMeta( )"
						},{
							"trigger": "event.routeIs\tfn. (ColdBox:event)",
							"contents": "event.routeIs( name=${1:Any} )"
						},{
							"trigger": "event.getFullUrl\tfn. (ColdBox:event)",
							"contents": "event.getFullUrl( )"
						},{
							"trigger": "event.getCurrentRoutedNamespace\tfn. (ColdBox:event)",
							"contents": "event.getCurrentRoutedNamespace( )"
						},{
							"trigger": "event.setLayout\tfn. (ColdBox:event)",
							"contents": "event.setLayout( name=${1:Any}, module=${2:Any} )"
						},{
							"trigger": "event.clearCollection\tfn. (ColdBox:event)",
							"contents": "event.clearCollection( private=${1:true,false} )"
						},{
							"trigger": "event.privateCollectionAppend\tfn. (ColdBox:event)",
							"contents": "event.privateCollectionAppend( collection=${1:{}}, overwrite=${2:true,false} )"
						},{
							"trigger": "event.getTrimValue\tfn. (ColdBox:event)",
							"contents": "event.getTrimValue( name=${1:Any}, defaultValue=${2:Any}, private=${3:true,false} )"
						},{
							"trigger": "event.getCurrentLayoutModule\tfn. (ColdBox:event)",
							"contents": "event.getCurrentLayoutModule( )"
						},{
							"trigger": "event.setSESBaseURL\tfn. (ColdBox:event)",
							"contents": "event.setSESBaseURL( sesBaseURL=\"${1:}\" )"
						},{
							"trigger": "event.getViewCacheableEntry\tfn. (ColdBox:event)",
							"contents": "event.getViewCacheableEntry( )"
						},{
							"trigger": "event.clearPrivateCollection\tfn. (ColdBox:event)",
							"contents": "event.clearPrivateCollection( )"
						},{
							"trigger": "event.isSSL\tfn. (ColdBox:event)",
							"contents": "event.isSSL( )"
						},{
							"trigger": "event.getCollection\tfn. (ColdBox:event)",
							"contents": "event.getCollection( deepCopy=${1:true,false}, private=${2:true,false} )"
						},{
							"trigger": "event.getPrivateOnly\tfn. (ColdBox:event)",
							"contents": "event.getPrivateOnly( keys=${1:Any} )"
						},{
							"trigger": "event.urlMatches\tfn. (ColdBox:event)",
							"contents": "event.urlMatches( path=\"${1:}\", exact=${2:true,false} )"
						},{
							"trigger": "event.removeValue\tfn. (ColdBox:event)",
							"contents": "event.removeValue( name=${1:Any}, private=${2:true,false} )"
						},{
							"trigger": "event.getPathSegments\tfn. (ColdBox:event)",
							"contents": "event.getPathSegments( )"
						},{
							"trigger": "event.setPrivateValue\tfn. (ColdBox:event)",
							"contents": "event.setPrivateValue( name=${1:Any}, value=${2:Any} )"
						},{
							"trigger": "event.getFullPath\tfn. (ColdBox:event)",
							"contents": "event.getFullPath( )"
						},{
							"trigger": "event.setProxyRequest\tfn. (ColdBox:event)",
							"contents": "event.setProxyRequest( )"
						},{
							"trigger": "event.getHTMLBasePath\tfn. (ColdBox:event)",
							"contents": "event.getHTMLBasePath( )"
						},{
							"trigger": "event.getPrivateExcept\tfn. (ColdBox:event)",
							"contents": "event.getPrivateExcept( keys=${1:Any} )"
						},{
							"trigger": "event.getExcept\tfn. (ColdBox:event)",
							"contents": "event.getExcept( keys=${1:Any}, private=${2:true,false} )"
						},{
							"trigger": "event.setDefaultView\tfn. (ColdBox:event)",
							"contents": "event.setDefaultView( defaultView=${1:Any} )"
						},{
							"trigger": "event.getEventCacheableEntry\tfn. (ColdBox:event)",
							"contents": "event.getEventCacheableEntry( )"
						},{
							"trigger": "event.getCurrentLayout\tfn. (ColdBox:event)",
							"contents": "event.getCurrentLayout( )"
						},{
							"trigger": "event.setRoutedStruct\tfn. (ColdBox:event)",
							"contents": "event.setRoutedStruct( routedStruct=${1:{}} )"
						},{
							"trigger": "event.getValue\tfn. (ColdBox:event)",
							"contents": "event.getValue( name=${1:Any}, defaultValue=${2:Any}, private=${3:true,false} )"
						},{
							"trigger": "event.getCurrentRoutedURL\tfn. (ColdBox:event)",
							"contents": "event.getCurrentRoutedURL( )"
						},{
							"trigger": "event.discoverLayout\tfn. (ColdBox:event)",
							"contents": "event.discoverLayout( view=\"${1:}\" )"
						},{
							"trigger": "event.collectionAppend\tfn. (ColdBox:event)",
							"contents": "event.collectionAppend( collection=${1:{}}, overwrite=${2:true,false}, private=${3:true,false} )"
						},{
							"trigger": "event.getCurrentViewArgs\tfn. (ColdBox:event)",
							"contents": "event.getCurrentViewArgs( )"
						},{
							"trigger": "event.noLayout\tfn. (ColdBox:event)",
							"contents": "event.noLayout( )"
						},{
							"trigger": "event.getCurrentRouteRecord\tfn. (ColdBox:event)",
							"contents": "event.getCurrentRouteRecord( )"
						},{
							"trigger": "event.overrideEvent\tfn. (ColdBox:event)",
							"contents": "event.overrideEvent( event=${1:Any} )"
						},{
							"trigger": "event.getPrivateCollection\tfn. (ColdBox:event)",
							"contents": "event.getPrivateCollection( deepCopy=${1:true,false} )"
						},{
							"trigger": "event.removeEventCacheableEntry\tfn. (ColdBox:event)",
							"contents": "event.removeEventCacheableEntry( )"
						},{
							"trigger": "event.getUrl\tfn. (ColdBox:event)",
							"contents": "event.getUrl( withQuery=${1:true,false} )"
						},{
							"trigger": "event.setViewCacheableEntry\tfn. (ColdBox:event)",
							"contents": "event.setViewCacheableEntry( cacheEntry=${1:{}} )"
						},{
							"trigger": "event.getModuleRoot\tfn. (ColdBox:event)",
							"contents": "event.getModuleRoot( module=${1:Any} )"
						},{
							"trigger": "event.noRender\tfn. (ColdBox:event)",
							"contents": "event.noRender( remove=${1:true,false} )"
						},{
							"trigger": "event.isInvalidHTTPMethod\tfn. (ColdBox:event)",
							"contents": "event.isInvalidHTTPMethod( )"
						},{
							"trigger": "event.route\tfn. (ColdBox:event)",
							"contents": "event.route( name=${1:Any}, params=${2:{}}, ssl=${3:true,false} )"
						},{
							"trigger": "event.renderData\tfn. (ColdBox:event)",
							"contents": "event.renderData( type=${1:Any}, data=${2:Any}, contentType=${3:Any}, encoding=${4:Any}, statusCode=${5:numeric}, statusText=${6:Any}, location=${7:Any}, jsonCallback=${8:Any}, jsonAsText=${9:true,false}, xmlColumnList=${10:Any}, xmlUseCDATA=${11:true,false}, xmlListDelimiter=${12:Any}, xmlRootName=${13:Any}, pdfArgs=${14:{}}, formats=${15:Any}, formatsView=${16:Any}, formatsRedirect=${17:Any}, isBinary=${18:true,false} )"
						},{
							"trigger": "event.getCurrentModule\tfn. (ColdBox:event)",
							"contents": "event.getCurrentModule( )"
						},{
							"trigger": "event.getMemento\tfn. (ColdBox:event)",
							"contents": "event.getMemento( )"
						},{
							"trigger": "event.setDefaultLayout\tfn. (ColdBox:event)",
							"contents": "event.setDefaultLayout( defaultLayout=${1:Any} )"
						},{
							"trigger": "event.setEventCacheableEntry\tfn. (ColdBox:event)",
							"contents": "event.setEventCacheableEntry( cacheEntry=${1:{}} )"
						},{
							"trigger": "event.isAjax\tfn. (ColdBox:event)",
							"contents": "event.isAjax( )"
						},{
							"trigger": "event.isNoRender\tfn. (ColdBox:event)",
							"contents": "event.isNoRender( )"
						},{
							"trigger": "event.getPathSegment\tfn. (ColdBox:event)",
							"contents": "event.getPathSegment( index=${1:numeric}, defaultValue=${2:Any} )"
						},{
							"trigger": "event.getCurrentRoute\tfn. (ColdBox:event)",
							"contents": "event.getCurrentRoute( )"
						},{
							"trigger": "event.getPath\tfn. (ColdBox:event)",
							"contents": "event.getPath( withQuery=${1:true,false} )"
						},{
							"trigger": "event.privateValueExists\tfn. (ColdBox:event)",
							"contents": "event.privateValueExists( name=${1:Any} )"
						},{
							"trigger": "event.setHTTPHeader\tfn. (ColdBox:event)",
							"contents": "event.setHTTPHeader( statusCode=${1:Any}, statusText=${2:Any}, name=${3:Any}, value=${4:Any} )"
						},{
							"trigger": "binder.match\tfn. (ColdBox:binder)",
							"contents": "binder.match( )"
						},{
							"trigger": "binder.inCacheBox\tfn. (ColdBox:binder)",
							"contents": "binder.inCacheBox( key=${1:Any}, timeout=${2:Any}, lastAccessTimeout=${3:Any}, provider=${4:Any} )"
						},{
							"trigger": "binder.process\tfn. (ColdBox:binder)",
							"contents": "binder.process( )"
						},{
							"trigger": "binder.into\tfn. (ColdBox:binder)",
							"contents": "binder.into( scope=${1:Any} )"
						},{
							"trigger": "binder.toValue\tfn. (ColdBox:binder)",
							"contents": "binder.toValue( value=${1:Any} )"
						},{
							"trigger": "binder.virtualInheritance\tfn. (ColdBox:binder)",
							"contents": "binder.virtualInheritance( mapping=${1:Any} )"
						},{
							"trigger": "binder.delegates\tfn. (ColdBox:binder)",
							"contents": "binder.delegates( expression=${1:Any} )"
						},{
							"trigger": "binder.propertyExists\tfn. (ColdBox:binder)",
							"contents": "binder.propertyExists( name=${1:Any} )"
						},{
							"trigger": "binder.mapPath\tfn. (ColdBox:binder)",
							"contents": "binder.mapPath( path=${1:Any}, namespace=${2:Any}, prepend=${3:true,false}, force=${4:true,false} )"
						},{
							"trigger": "binder.forceMap\tfn. (ColdBox:binder)",
							"contents": "binder.forceMap( alias=${1:Any} )"
						},{
							"trigger": "binder.notThreadSafe\tfn. (ColdBox:binder)",
							"contents": "binder.notThreadSafe( )"
						},{
							"trigger": "binder.onDIComplete\tfn. (ColdBox:binder)",
							"contents": "binder.onDIComplete( methods=${1:Any} )"
						},{
							"trigger": "binder.initArg\tfn. (ColdBox:binder)",
							"contents": "binder.initArg( name=${1:Any}, ref=${2:Any}, dsl=${3:Any}, value=${4:Any}, javaCast=${5:Any}, required=${6:Any}, type=${7:Any} )"
						},{
							"trigger": "binder.setter\tfn. (ColdBox:binder)",
							"contents": "binder.setter( name=${1:Any}, ref=${2:Any}, dsl=${3:Any}, value=${4:Any}, javaCast=${5:Any}, argName=${6:Any} )"
						},{
							"trigger": "binder.extraAttributes\tfn. (ColdBox:binder)",
							"contents": "binder.extraAttributes( data=${1:{}} )"
						},{
							"trigger": "binder.mapScope\tfn. (ColdBox:binder)",
							"contents": "binder.mapScope( annotation=${1:Any}, path=${2:Any} )"
						},{
							"trigger": "binder.constructor\tfn. (ColdBox:binder)",
							"contents": "binder.constructor( constructor=${1:Any} )"
						},{
							"trigger": "binder.getMemento\tfn. (ColdBox:binder)",
							"contents": "binder.getMemento( )"
						},{
							"trigger": "binder.asEagerInit\tfn. (ColdBox:binder)",
							"contents": "binder.asEagerInit( )"
						},{
							"trigger": "binder.threadSafe\tfn. (ColdBox:binder)",
							"contents": "binder.threadSafe( )"
						},{
							"trigger": "binder.map\tfn. (ColdBox:binder)",
							"contents": "binder.map( alias=${1:Any}, force=${2:true,false} )"
						},{
							"trigger": "binder.noAutowire\tfn. (ColdBox:binder)",
							"contents": "binder.noAutowire( )"
						},{
							"trigger": "binder.mixins\tfn. (ColdBox:binder)",
							"contents": "binder.mixins( mixins=${1:Any} )"
						},{
							"trigger": "binder.loadDataDSL\tfn. (ColdBox:binder)",
							"contents": "binder.loadDataDSL( rawDSL=${1:{}} )"
						},{
							"trigger": "binder.mappingExists\tfn. (ColdBox:binder)",
							"contents": "binder.mappingExists( name=${1:Any} )"
						},{
							"trigger": "binder.to\tfn. (ColdBox:binder)",
							"contents": "binder.to( path=${1:Any} )"
						},{
							"trigger": "binder.parent\tfn. (ColdBox:binder)",
							"contents": "binder.parent( alias=${1:Any} )"
						},{
							"trigger": "binder.toProvider\tfn. (ColdBox:binder)",
							"contents": "binder.toProvider( provider=${1:Any} )"
						},{
							"trigger": "binder.initWith\tfn. (ColdBox:binder)",
							"contents": "binder.initWith( )"
						},{
							"trigger": "binder.with\tfn. (ColdBox:binder)",
							"contents": "binder.with( alias=${1:Any} )"
						},{
							"trigger": "binder.setProperty\tfn. (ColdBox:binder)",
							"contents": "binder.setProperty( name=${1:Any}, value=${2:Any} )"
						},{
							"trigger": "binder.stopRecursions\tfn. (ColdBox:binder)",
							"contents": "binder.stopRecursions( classes=${1:Any} )"
						},{
							"trigger": "binder.toRSS\tfn. (ColdBox:binder)",
							"contents": "binder.toRSS( path=${1:Any} )"
						},{
							"trigger": "binder.toFactoryMethod\tfn. (ColdBox:binder)",
							"contents": "binder.toFactoryMethod( factory=${1:Any}, method=${2:Any} )"
						},{
							"trigger": "binder.toDSL\tfn. (ColdBox:binder)",
							"contents": "binder.toDSL( dsl=${1:Any} )"
						},{
							"trigger": "binder.toWebservice\tfn. (ColdBox:binder)",
							"contents": "binder.toWebservice( path=${1:Any} )"
						},{
							"trigger": "binder.methodArg\tfn. (ColdBox:binder)",
							"contents": "binder.methodArg( name=${1:Any}, ref=${2:Any}, dsl=${3:Any}, value=${4:Any}, javaCast=${5:Any}, required=${6:Any}, type=${7:Any} )"
						},{
							"trigger": "binder.toJava\tfn. (ColdBox:binder)",
							"contents": "binder.toJava( path=${1:Any} )"
						},{
							"trigger": "binder.processEagerInits\tfn. (ColdBox:binder)",
							"contents": "binder.processEagerInits( )"
						},{
							"trigger": "binder.hasAspects\tfn. (ColdBox:binder)",
							"contents": "binder.hasAspects( )"
						},{
							"trigger": "binder.unMap\tfn. (ColdBox:binder)",
							"contents": "binder.unMap( name=${1:Any} )"
						},{
							"trigger": "binder.property\tfn. (ColdBox:binder)",
							"contents": "binder.property( name=${1:Any}, ref=${2:Any}, dsl=${3:Any}, value=${4:Any}, javaCast=${5:Any}, scope=${6:Any}, required=${7:Any}, type=${8:Any}, delegate=${9:true,false}, delegatePrefix=${10:Any}, delegateSuffix=${11:Any}, delegateExcludes=${12:Any}, delegateIncludes=${13:Any} )"
						},{
							"trigger": "binder.bindAspect\tfn. (ColdBox:binder)",
							"contents": "binder.bindAspect( classes=${1:Any}, methods=${2:Any}, aspects=${3:Any} )"
						},{
							"trigger": "binder.asSingleton\tfn. (ColdBox:binder)",
							"contents": "binder.asSingleton( )"
						},{
							"trigger": "binder.reset\tfn. (ColdBox:binder)",
							"contents": "binder.reset( )"
						},{
							"trigger": "binder.withInfluence\tfn. (ColdBox:binder)",
							"contents": "binder.withInfluence( influenceClosure=${1:Any} )"
						},{
							"trigger": "binder.getStopRecursions\tfn. (ColdBox:binder)",
							"contents": "binder.getStopRecursions( )"
						},{
							"trigger": "binder.getProperty\tfn. (ColdBox:binder)",
							"contents": "binder.getProperty( name=${1:Any}, defaultValue=${2:Any} )"
						},{
							"trigger": "binder.noInit\tfn. (ColdBox:binder)",
							"contents": "binder.noInit( )"
						},{
							"trigger": "binder.mapDirectory\tfn. (ColdBox:binder)",
							"contents": "binder.mapDirectory( packagePath=${1:Any}, include=${2:Any}, exclude=${3:Any}, influence=${4:Any}, filter=${5:Any}, namespace=${6:Any}, prepend=${7:true,false}, process=${8:true,false} )"
						},{
							"trigger": "binder.getCacheBoxConfig\tfn. (ColdBox:binder)",
							"contents": "binder.getCacheBoxConfig( )"
						},{
							"trigger": "binder.setMapping\tfn. (ColdBox:binder)",
							"contents": "binder.setMapping( name=${1:Any}, mapping=${2:Any} )"
						},{
							"trigger": "binder.parentInjector\tfn. (ColdBox:binder)",
							"contents": "binder.parentInjector( injector=${1:Any} )"
						},{
							"trigger": "binder.getMapping\tfn. (ColdBox:binder)",
							"contents": "binder.getMapping( name=${1:Any} )"
						},{
							"trigger": "binder.removeScanLocations\tfn. (ColdBox:binder)",
							"contents": "binder.removeScanLocations( locations=${1:Any} )"
						},{
							"trigger": "binder.providerMethod\tfn. (ColdBox:binder)",
							"contents": "binder.providerMethod( method=${1:Any}, mapping=${2:Any} )"
						},{
							"trigger": "binder.mapDSL\tfn. (ColdBox:binder)",
							"contents": "binder.mapDSL( namespace=${1:Any}, path=${2:Any} )"
						},{
							"trigger": "binder.listener\tfn. (ColdBox:binder)",
							"contents": "binder.listener( class=${1:Any}, properties=${2:{}}, name=${3:Any}, register=${4:true,false} )"
						},{
							"trigger": "binder.getParentInjector\tfn. (ColdBox:binder)",
							"contents": "binder.getParentInjector( )"
						},{
							"trigger": "binder.processMappings\tfn. (ColdBox:binder)",
							"contents": "binder.processMappings( )"
						},{
							"trigger": "binder.mapAspect\tfn. (ColdBox:binder)",
							"contents": "binder.mapAspect( aspect=${1:Any}, autoBinding=${2:true,false} )"
						},{
							"trigger": "cachebox.addDefaultCache\tfn. (ColdBox:cachebox)",
							"contents": "cachebox.addDefaultCache( name=${1:Any} )"
						},{
							"trigger": "cachebox.removeCache\tfn. (ColdBox:cachebox)",
							"contents": "cachebox.removeCache( name=${1:Any} )"
						},{
							"trigger": "cachebox.getCache\tfn. (ColdBox:cachebox)",
							"contents": "cachebox.getCache( name=${1:Any} )"
						},{
							"trigger": "cachebox.shutdownCache\tfn. (ColdBox:cachebox)",
							"contents": "cachebox.shutdownCache( name=${1:Any} )"
						},{
							"trigger": "cachebox.clearAll\tfn. (ColdBox:cachebox)",
							"contents": "cachebox.clearAll( )"
						},{
							"trigger": "cachebox.getCacheNames\tfn. (ColdBox:cachebox)",
							"contents": "cachebox.getCacheNames( )"
						},{
							"trigger": "cachebox.getScopeRegistration\tfn. (ColdBox:cachebox)",
							"contents": "cachebox.getScopeRegistration( )"
						},{
							"trigger": "cachebox.registerListeners\tfn. (ColdBox:cachebox)",
							"contents": "cachebox.registerListeners( )"
						},{
							"trigger": "cachebox.getDefaultCache\tfn. (ColdBox:cachebox)",
							"contents": "cachebox.getDefaultCache( )"
						},{
							"trigger": "cachebox.registerCache\tfn. (ColdBox:cachebox)",
							"contents": "cachebox.registerCache( cache=${1:Any} )"
						},{
							"trigger": "cachebox.removeFromScope\tfn. (ColdBox:cachebox)",
							"contents": "cachebox.removeFromScope( )"
						},{
							"trigger": "cachebox.reapAll\tfn. (ColdBox:cachebox)",
							"contents": "cachebox.reapAll( )"
						},{
							"trigger": "cachebox.isColdBoxLinked\tfn. (ColdBox:cachebox)",
							"contents": "cachebox.isColdBoxLinked( )"
						},{
							"trigger": "cachebox.addCache\tfn. (ColdBox:cachebox)",
							"contents": "cachebox.addCache( cache=${1:Any} )"
						},{
							"trigger": "cachebox.expireAll\tfn. (ColdBox:cachebox)",
							"contents": "cachebox.expireAll( )"
						},{
							"trigger": "cachebox.cacheExists\tfn. (ColdBox:cachebox)",
							"contents": "cachebox.cacheExists( name=${1:Any} )"
						},{
							"trigger": "cachebox.shutdown\tfn. (ColdBox:cachebox)",
							"contents": "cachebox.shutdown( )"
						},{
							"trigger": "cachebox.removeAll\tfn. (ColdBox:cachebox)",
							"contents": "cachebox.removeAll( )"
						},{
							"trigger": "cachebox.replaceCache\tfn. (ColdBox:cachebox)",
							"contents": "cachebox.replaceCache( cache=${1:Any}, decoratedCache=${2:Any} )"
						},{
							"trigger": "cachebox.doScopeRegistration\tfn. (ColdBox:cachebox)",
							"contents": "cachebox.doScopeRegistration( )"
						},{
							"trigger": "cachebox.createCache\tfn. (ColdBox:cachebox)",
							"contents": "cachebox.createCache( name=${1:Any}, provider=${2:Any}, properties=${3:{}} )"
						},{
							"trigger": "controller.getColdBoxSetting\tfn. (ColdBox:controller)",
							"contents": "controller.getColdBoxSetting( name=${1:Any}, defaultValue=${2:Any} )"
						},{
							"trigger": "controller.runEvent\tfn. (ColdBox:controller)",
							"contents": "controller.runEvent( event=${1:Any}, prePostExempt=${2:true,false}, private=${3:true,false}, defaultEvent=${4:true,false}, eventArguments=${5:{}}, cache=${6:true,false}, cacheTimeout=${7:Any}, cacheLastAccessTimeout=${8:Any}, cacheSuffix=${9:Any}, cacheProvider=${10:Any} )"
						},{
							"trigger": "controller.locateFilePath\tfn. (ColdBox:controller)",
							"contents": "controller.locateFilePath( pathToCheck=${1:Any} )"
						},{
							"trigger": "controller.getInterceptorService\tfn. (ColdBox:controller)",
							"contents": "controller.getInterceptorService( )"
						},{
							"trigger": "controller.persistVariables\tfn. (ColdBox:controller)",
							"contents": "controller.persistVariables( persist=${1:Any}, persistStruct=${2:{}} )"
						},{
							"trigger": "controller.invoker\tfn. (ColdBox:controller)",
							"contents": "controller.invoker( target=${1:any}, method=${2:Any}, argCollection=${3:{}}, private=${4:true,false} )"
						},{
							"trigger": "controller.updateSSL\tfn. (ColdBox:controller)",
							"contents": "controller.updateSSL( inURL=${1:Any}, ssl=${2:Any} )"
						},{
							"trigger": "controller._runEvent\tfn. (ColdBox:controller)",
							"contents": "controller._runEvent( event=${1:Any}, prePostExempt=${2:true,false}, private=${3:true,false}, defaultEvent=${4:true,false}, eventArguments=${5:{}} )"
						},{
							"trigger": "controller.getRoutingService\tfn. (ColdBox:controller)",
							"contents": "controller.getRoutingService( )"
						},{
							"trigger": "controller.getRequestService\tfn. (ColdBox:controller)",
							"contents": "controller.getRequestService( )"
						},{
							"trigger": "controller.setSetting\tfn. (ColdBox:controller)",
							"contents": "controller.setSetting( name=${1:Any}, value=${2:Any} )"
						},{
							"trigger": "controller.sendRelocation\tfn. (ColdBox:controller)",
							"contents": "controller.sendRelocation( URL=${1:Any}, addToken=${2:true,false}, statusCode=${3:Any} )"
						},{
							"trigger": "controller.getLoaderService\tfn. (ColdBox:controller)",
							"contents": "controller.getLoaderService( )"
						},{
							"trigger": "controller.getRenderer\tfn. (ColdBox:controller)",
							"contents": "controller.getRenderer( )"
						},{
							"trigger": "controller.inDebugMode\tfn. (ColdBox:controller)",
							"contents": "controller.inDebugMode( )"
						},{
							"trigger": "controller.getDataMarshaller\tfn. (ColdBox:controller)",
							"contents": "controller.getDataMarshaller( )"
						},{
							"trigger": "controller.getModuleConfig\tfn. (ColdBox:controller)",
							"contents": "controller.getModuleConfig( module=${1:Any} )"
						},{
							"trigger": "controller.getSetting\tfn. (ColdBox:controller)",
							"contents": "controller.getSetting( name=${1:Any}, defaultValue=${2:Any} )"
						},{
							"trigger": "controller.locateDirectoryPath\tfn. (ColdBox:controller)",
							"contents": "controller.locateDirectoryPath( pathToCheck=${1:Any} )"
						},{
							"trigger": "controller.loadColdBoxSettings\tfn. (ColdBox:controller)",
							"contents": "controller.loadColdBoxSettings( )"
						},{
							"trigger": "controller.getSchedulerService\tfn. (ColdBox:controller)",
							"contents": "controller.getSchedulerService( )"
						},{
							"trigger": "controller.getMemento\tfn. (ColdBox:controller)",
							"contents": "controller.getMemento( )"
						},{
							"trigger": "controller.getCache\tfn. (ColdBox:controller)",
							"contents": "controller.getCache( cacheName=${1:Any} )"
						},{
							"trigger": "controller.getModuleService\tfn. (ColdBox:controller)",
							"contents": "controller.getModuleService( )"
						},{
							"trigger": "controller.getModuleSettings\tfn. (ColdBox:controller)",
							"contents": "controller.getModuleSettings( module=${1:Any}, setting=${2:Any}, defaultValue=${3:Any} )"
						},{
							"trigger": "controller.isTesting\tfn. (ColdBox:controller)",
							"contents": "controller.isTesting( )"
						},{
							"trigger": "controller.getUserSessionIdentifier\tfn. (ColdBox:controller)",
							"contents": "controller.getUserSessionIdentifier( )"
						},{
							"trigger": "controller.isProduction\tfn. (ColdBox:controller)",
							"contents": "controller.isProduction( )"
						},{
							"trigger": "controller.validateAction\tfn. (ColdBox:controller)",
							"contents": "controller.validateAction( action=${1:Any}, inclusion=${2:Any}, exclusion=${3:Any} )"
						},{
							"trigger": "controller.relocate\tfn. (ColdBox:controller)",
							"contents": "controller.relocate( event=${1:Any}, queryString=${2:Any}, addToken=${3:true,false}, persist=${4:Any}, persistStruct=${5:{}}, baseURL=${6:Any}, postProcessExempt=${7:true,false}, URL=${8:Any}, URI=${9:Any}, statusCode=${10:numeric} )"
						},{
							"trigger": "controller.getHandlerService\tfn. (ColdBox:controller)",
							"contents": "controller.getHandlerService( )"
						},{
							"trigger": "controller.settingExists\tfn. (ColdBox:controller)",
							"contents": "controller.settingExists( name=${1:Any} )"
						},{
							"trigger": "controller.isDevelopment\tfn. (ColdBox:controller)",
							"contents": "controller.isDevelopment( )"
						},{
							"trigger": "controller.runRoute\tfn. (ColdBox:controller)",
							"contents": "controller.runRoute( name=${1:Any}, params=${2:{}}, cache=${3:true,false}, cacheTimeout=${4:Any}, cacheLastAccessTimeout=${5:Any}, cacheSuffix=${6:Any}, cacheProvider=${7:Any}, prePostExempt=${8:true,false} )"
						},{
							"trigger": "flash.getUtil\tfn. (ColdBox:flash)",
							"contents": "flash.getUtil( )"
						},{
							"trigger": "flash.getFlash\tfn. (ColdBox:flash)",
							"contents": "flash.getFlash( )"
						},{
							"trigger": "flash.saveFlash\tfn. (ColdBox:flash)",
							"contents": "flash.saveFlash( )"
						},{
							"trigger": "flash.getScope\tfn. (ColdBox:flash)",
							"contents": "flash.getScope( )"
						},{
							"trigger": "flash.get\tfn. (ColdBox:flash)",
							"contents": "flash.get( name=${1:Any}, defaultValue=${2:Any} )"
						},{
							"trigger": "flash.putAll\tfn. (ColdBox:flash)",
							"contents": "flash.putAll( map=${1:{}}, saveNow=${2:true,false}, keep=${3:true,false}, inflateToRC=${4:true,false}, inflateToPRC=${5:true,false}, autoPurge=${6:true,false} )"
						},{
							"trigger": "flash.getProperty\tfn. (ColdBox:flash)",
							"contents": "flash.getProperty( property=${1:Any} )"
						},{
							"trigger": "flash.clear\tfn. (ColdBox:flash)",
							"contents": "flash.clear( )"
						},{
							"trigger": "flash.size\tfn. (ColdBox:flash)",
							"contents": "flash.size( )"
						},{
							"trigger": "flash.remove\tfn. (ColdBox:flash)",
							"contents": "flash.remove( name=${1:Any}, saveNow=${2:true,false} )"
						},{
							"trigger": "flash.exists\tfn. (ColdBox:flash)",
							"contents": "flash.exists( name=${1:Any} )"
						},{
							"trigger": "flash.getKeys\tfn. (ColdBox:flash)",
							"contents": "flash.getKeys( )"
						},{
							"trigger": "flash.removeFlash\tfn. (ColdBox:flash)",
							"contents": "flash.removeFlash( )"
						},{
							"trigger": "flash.getAll\tfn. (ColdBox:flash)",
							"contents": "flash.getAll( )"
						},{
							"trigger": "flash.statusMarks\tfn. (ColdBox:flash)",
							"contents": "flash.statusMarks( keys=\"${1:}\", keep=${2:true,false} )"
						},{
							"trigger": "flash.discard\tfn. (ColdBox:flash)",
							"contents": "flash.discard( keys=\"${1:}\" )"
						},{
							"trigger": "flash.isEmpty\tfn. (ColdBox:flash)",
							"contents": "flash.isEmpty( )"
						},{
							"trigger": "flash.inflateFlash\tfn. (ColdBox:flash)",
							"contents": "flash.inflateFlash( )"
						},{
							"trigger": "flash.propertyExists\tfn. (ColdBox:flash)",
							"contents": "flash.propertyExists( property=${1:Any} )"
						},{
							"trigger": "flash.flashExists\tfn. (ColdBox:flash)",
							"contents": "flash.flashExists( )"
						},{
							"trigger": "flash.keep\tfn. (ColdBox:flash)",
							"contents": "flash.keep( keys=\"${1:}\" )"
						},{
							"trigger": "flash.setProperty\tfn. (ColdBox:flash)",
							"contents": "flash.setProperty( property=${1:Any}, value=${2:Any} )"
						},{
							"trigger": "flash.clearFlash\tfn. (ColdBox:flash)",
							"contents": "flash.clearFlash( )"
						},{
							"trigger": "flash.put\tfn. (ColdBox:flash)",
							"contents": "flash.put( name=\"${1:}\", value=${2:Any}, saveNow=${3:true,false}, keep=${4:true,false}, inflateToRC=${5:true,false}, inflateToPRC=${6:true,false}, autoPurge=${7:true,false} )"
						},{
							"trigger": "flash.persistRC\tfn. (ColdBox:flash)",
							"contents": "flash.persistRC( include=${1:Any}, exclude=${2:Any}, saveNow=${3:true,false} )"
						}]}
							"contents": "event.valueExists( name=${1:any}, private=${2:true,false} )"
						},{
							"trigger": "html.$htmlHead\tfn. (ColdBox:html)",
							"contents": "html.$htmlHead( content=${1:any} )"
						},{
							"trigger": "html.addAsset\tfn. (ColdBox:html)",
							"contents": "html.addAsset( asset=${1:any}, sendToHeader=${2:true,false}, async=${3:true,false}, defer=${4:true,false} )"
						},{
							"trigger": "html.addJSContent\tfn. (ColdBox:html)",
							"contents": "html.addJSContent( content=${1:any}, sendToHeader=${2:true,false} )"
						},{
							"trigger": "html.addStyleContent\tfn. (ColdBox:html)",
							"contents": "html.addStyleContent( content=${1:any}, sendToHeader=${2:true,false} )"
						},{
							"trigger": "html.anchor\tfn. (ColdBox:html)",
							"contents": "html.anchor( name=${1:any}, text=${2:any}, data=${3:{}} )"
						},{
							"trigger": "html.arrayToTable\tfn. (ColdBox:html)",
							"contents": "html.arrayToTable( data=${1:any}, includes=\"${2:}\", excludes=\"${3:}\", buffer=${4:any} )"
						},{
							"trigger": "html.audio\tfn. (ColdBox:html)",
							"contents": "html.audio( src=${1:any}, autoplay=${2:true,false}, controls=${3:true,false}, loop=${4:true,false}, preload=${5:true,false}, noBaseURL=${6:true,false}, name=${7:any}, data=${8:any} )"
						},{
							"trigger": "html.autoDiscoveryLink\tfn. (ColdBox:html)",
							"contents": "html.autoDiscoveryLink( type=${1:any}, href=${2:any}, rel=${3:any}, title=${4:any}, data=${5:{}} )"
						},{
							"trigger": "html.bindValue\tfn. (ColdBox:html)",
							"contents": "html.bindValue( args=${1:any} )"
						},{
							"trigger": "html.br\tfn. (ColdBox:html)",
							"contents": "html.br( count=${1:numeric} )"
						},{
							"trigger": "html.button\tfn. (ColdBox:html)",
							"contents": "html.button( name=${1:any}, value=${2:any}, disabled=${3:true,false}, type=${4:any}, wrapper=${5:any}, wrapperAttrs=${6:{}}, groupWrapper=${7:any}, groupWrapperAttrs=${8:{}}, label=${9:any}, labelAttrs=${10:{}}, labelWrapper=${11:any}, labelWrapperAttrs=${12:{}}, labelClass=${13:any}, bind=${14:any}, bindProperty=${15:any}, data=${16:{}}, inputInsideLabel=${17:true,false} )"
						},{
							"trigger": "html.canvas\tfn. (ColdBox:html)",
							"contents": "html.canvas( id=${1:any}, width=${2:any}, height=${3:any}, data=${4:any} )"
						},{
							"trigger": "html.checkbox\tfn. (ColdBox:html)",
							"contents": "html.checkbox( name=${1:any}, value=${2:any}, disabled=${3:true,false}, checked=${4:true,false}, wrapper=${5:any}, wrapperAttrs=${6:{}}, groupWrapper=${7:any}, groupWrapperAttrs=${8:{}}, label=${9:any}, labelAttrs=${10:{}}, labelWrapper=${11:any}, labelWrapperAttrs=${12:{}}, labelClass=${13:any}, bind=${14:any}, bindProperty=${15:any}, data=${16:{}}, inputInsideLabel=${17:true,false} )"
						},{
							"trigger": "html.discoverElixirManifest\tfn. (ColdBox:html)",
							"contents": "html.discoverElixirManifest( currentModule=\"${1:}\", useModuleRoot=${2:true,false}, version=${3:numeric}, manifestRoot=${4:any} )"
						},{
							"trigger": "html.docType\tfn. (ColdBox:html)",
							"contents": "html.docType( type=${1:any} )"
						},{
							"trigger": "html.elixir\tfn. (ColdBox:html)",
							"contents": "html.elixir( fileName=${1:any}, buildDirectory=${2:any}, sendToHeader=${3:true,false}, async=${4:true,false}, defer=${5:true,false}, version=${6:numeric}, manifestRoot=${7:any} )"
						},{
							"trigger": "html.elixirPath\tfn. (ColdBox:html)",
							"contents": "html.elixirPath( fileName=${1:any}, useModuleRoot=${2:true,false}, version=${3:numeric}, manifestRoot=${4:any} )"
						},{
							"trigger": "html.emailField\tfn. (ColdBox:html)",
							"contents": "html.emailField( name=${1:any}, value=${2:any}, disabled=${3:true,false}, readonly=${4:true,false}, wrapper=${5:any}, wrapperAttrs=${6:{}}, groupWrapper=${7:any}, groupWrapperAttrs=${8:{}}, label=${9:any}, labelAttrs=${10:{}}, labelWrapper=${11:any}, labelWrapperAttrs=${12:{}}, labelClass=${13:any}, bind=${14:any}, bindProperty=${15:any}, data=${16:{}}, inputInsideLabel=${17:true,false} )"
						},{
							"trigger": "html.endFieldSet\tfn. (ColdBox:html)",
							"contents": "html.endFieldSet( )"
						},{
							"trigger": "html.endForm\tfn. (ColdBox:html)",
							"contents": "html.endForm( )"
						},{
							"trigger": "html.entityFields\tfn. (ColdBox:html)",
							"contents": "html.entityFields( entity=${1:any}, groupWrapper=${2:any}, groupWrapperAttrs=${3:{}}, fieldwrapper=${4:any}, fieldWrapperAttrs=${5:{}}, labelAttrs=${6:{}}, labelwrapper=${7:any}, labelWrapperAttrs=${8:{}}, labelClass=${9:any}, textareas=${10:any}, booleanSelect=${11:true,false}, showRelations=${12:true,false}, manytoone=${13:{}}, manytomany=${14:{}}, inputInsideLabel=${15:true,false} )"
						},{
							"trigger": "html.fileField\tfn. (ColdBox:html)",
							"contents": "html.fileField( name=${1:any}, value=${2:any}, disabled=${3:true,false}, readonly=${4:true,false}, wrapper=${5:any}, wrapperAttrs=${6:{}}, groupWrapper=${7:any}, groupWrapperAttrs=${8:{}}, label=${9:any}, labelAttrs=${10:{}}, labelWrapper=${11:any}, labelWrapperAttrs=${12:{}}, labelClass=${13:any}, bind=${14:any}, bindProperty=${15:any}, data=${16:{}}, inputInsideLabel=${17:true,false} )"
						},{
							"trigger": "html.flattenAttributes\tfn. (ColdBox:html)",
							"contents": "html.flattenAttributes( target=${1:{}}, excludes=${2:any}, buffer=${3:any} )"
						},{
							"trigger": "html.getColumnArray\tfn. (ColdBox:html)",
							"contents": "html.getColumnArray( qry=${1:any}, columnName=${2:any} )"
						},{
							"trigger": "html.getController\tfn. (ColdBox:html)",
							"contents": "html.getController( )"
						},{
							"trigger": "html.getRequestService\tfn. (ColdBox:html)",
							"contents": "html.getRequestService( )"
						},{
							"trigger": "html.getSettings\tfn. (ColdBox:html)",
							"contents": "html.getSettings( )"
						},{
							"trigger": "html.heading\tfn. (ColdBox:html)",
							"contents": "html.heading( content=${1:any}, size=${2:numeric} )"
						},{
							"trigger": "html.hiddenField\tfn. (ColdBox:html)",
							"contents": "html.hiddenField( name=${1:any}, value=${2:any}, disabled=${3:true,false}, readonly=${4:true,false}, wrapper=${5:any}, wrapperAttrs=${6:{}}, groupWrapper=${7:any}, groupWrapperAttrs=${8:{}}, label=${9:any}, labelAttrs=${10:{}}, labelWrapper=${11:any}, labelWrapperAttrs=${12:{}}, labelClass=${13:any}, bind=${14:any}, bindProperty=${15:any}, data=${16:{}}, inputInsideLabel=${17:true,false} )"
						},{
							"trigger": "html.href\tfn. (ColdBox:html)",
							"contents": "html.href( href=${1:any}, text=${2:any}, queryString=${3:any}, title=${4:any}, noBaseURL=${5:true,false}, data=${6:{}} )"
						},{
							"trigger": "html.imageButton\tfn. (ColdBox:html)",
							"contents": "html.imageButton( src=${1:any}, name=${2:any}, disabled=${3:true,false}, wrapper=${4:any}, wrapperAttrs=${5:{}}, groupWrapper=${6:any}, groupWrapperAttrs=${7:{}}, label=${8:any}, labelAttrs=${9:{}}, labelWrapper=${10:any}, labelWrapperAttrs=${11:{}}, labelClass=${12:any}, bind=${13:any}, bindProperty=${14:any}, data=${15:{}}, inputInsideLabel=${16:true,false} )"
						},{
							"trigger": "html.img\tfn. (ColdBox:html)",
							"contents": "html.img( src=${1:any}, alt=${2:any}, class=${3:any}, width=${4:any}, height=${5:any}, title=${6:any}, rel=${7:any}, name=${8:any}, noBaseURL=${9:true,false}, data=${10:{}} )"
						},{
							"trigger": "html.inputField\tfn. (ColdBox:html)",
							"contents": "html.inputField( type=${1:any}, name=${2:any}, value=${3:any}, disabled=${4:true,false}, checked=${5:true,false}, readonly=${6:true,false}, wrapper=${7:any}, wrapperAttrs=${8:{}}, groupWrapper=${9:any}, groupWrapperAttrs=${10:{}}, label=${11:any}, labelAttrs=${12:{}}, labelWrapper=${13:any}, labelWrapperAttrs=${14:{}}, labelClass=${15:any}, bind=${16:any}, bindProperty=${17:any}, data=${18:{}}, inputInsideLabel=${19:true,false} )"
						},{
							"trigger": "html.label\tfn. (ColdBox:html)",
							"contents": "html.label( field=${1:any}, content=${2:any}, labelAttrs=${3:{}}, wrapper=${4:any}, wrapperAttrs=${5:{}}, data=${6:{}}, class=${7:any}, labelMode=${8:numeric} )"
						},{
							"trigger": "html.link\tfn. (ColdBox:html)",
							"contents": "html.link( href=${1:any}, rel=${2:any}, type=${3:any}, title=${4:any}, media=${5:any}, noBaseURL=${6:true,false}, charset=${7:any}, sendToHeader=${8:true,false}, data=${9:{}} )"
						},{
							"trigger": "html.makePretty\tfn. (ColdBox:html)",
							"contents": "html.makePretty( text=${1:any} )"
						},{
							"trigger": "html.meta\tfn. (ColdBox:html)",
							"contents": "html.meta( name=${1:any}, content=${2:any}, type=${3:any}, sendToHeader=${4:true,false}, property=${5:any} )"
						},{
							"trigger": "html.nbs\tfn. (ColdBox:html)",
							"contents": "html.nbs( count=${1:numeric} )"
						},{
							"trigger": "html.normalizeID\tfn. (ColdBox:html)",
							"contents": "html.normalizeID( args=${1:any} )"
						},{
							"trigger": "html.objectsToTable\tfn. (ColdBox:html)",
							"contents": "html.objectsToTable( data=${1:any}, includes=\"${2:}\", excludes=\"${3:}\", buffer=${4:any} )"
						},{
							"trigger": "html.ol\tfn. (ColdBox:html)",
							"contents": "html.ol( values=${1:any}, column=\"${2:}\" )"
						},{
							"trigger": "html.onMissingMethod\tfn. (ColdBox:html)",
							"contents": "html.onMissingMethod( missingMethodName=${1:any}, missingMethodArguments=${2:any} )"
						},{
							"trigger": "html.options\tfn. (ColdBox:html)",
							"contents": "html.options( values=${1:any}, column=${2:any}, nameColumn=${3:any}, selectedIndex=${4:any}, selectedValue=${5:any} )"
						},{
							"trigger": "html.passIncludeExclude\tfn. (ColdBox:html)",
							"contents": "html.passIncludeExclude( value=${1:any}, includes=${2:any}, excludes=${3:any} )"
						},{
							"trigger": "html.passwordField\tfn. (ColdBox:html)",
							"contents": "html.passwordField( name=${1:any}, value=${2:any}, disabled=${3:true,false}, readonly=${4:true,false}, wrapper=${5:any}, wrapperAttrs=${6:{}}, groupWrapper=${7:any}, groupWrapperAttrs=${8:{}}, label=${9:any}, labelAttrs=${10:{}}, labelWrapper=${11:any}, labelWrapperAttrs=${12:{}}, labelClass=${13:any}, bind=${14:any}, bindProperty=${15:any}, data=${16:{}}, inputInsideLabel=${17:true,false} )"
						},{
							"trigger": "html.prepareBaseLink\tfn. (ColdBox:html)",
							"contents": "html.prepareBaseLink( noBaseURL=${1:true,false}, src=${2:any} )"
						},{
							"trigger": "html.queryToTable\tfn. (ColdBox:html)",
							"contents": "html.queryToTable( data=${1:any}, includes=\"${2:}\", excludes=\"${3:}\", buffer=${4:any} )"
						},{
							"trigger": "html.radioButton\tfn. (ColdBox:html)",
							"contents": "html.radioButton( name=${1:any}, value=${2:any}, disabled=${3:true,false}, checked=${4:true,false}, wrapper=${5:any}, wrapperAttrs=${6:{}}, groupWrapper=${7:any}, groupWrapperAttrs=${8:{}}, label=${9:any}, labelAttrs=${10:{}}, labelWrapper=${11:any}, labelWrapperAttrs=${12:{}}, labelClass=${13:any}, bind=${14:any}, bindProperty=${15:any}, data=${16:{}}, inputInsideLabel=${17:true,false} )"
						},{
							"trigger": "html.resetButton\tfn. (ColdBox:html)",
							"contents": "html.resetButton( name=${1:any}, value=${2:any}, disabled=${3:true,false}, wrapper=${4:any}, wrapperAttrs=${5:{}}, groupWrapper=${6:any}, groupWrapperAttrs=${7:{}}, label=${8:any}, labelAttrs=${9:{}}, labelWrapper=${10:any}, labelWrapperAttrs=${11:{}}, labelClass=${12:any}, bind=${13:any}, bindProperty=${14:any}, data=${15:{}}, inputInsideLabel=${16:true,false} )"
						},{
							"trigger": "html.select\tfn. (ColdBox:html)",
							"contents": "html.select( name=${1:any}, options=${2:any}, column=${3:any}, nameColumn=${4:any}, selectedIndex=${5:any}, selectedValue=${6:any}, bind=${7:any}, bindProperty=${8:any}, disabled=${9:true,false}, multiple=${10:true,false}, wrapper=${11:any}, wrapperAttrs=${12:{}}, groupWrapper=${13:any}, groupWrapperAttrs=${14:{}}, label=${15:any}, labelAttrs=${16:{}}, labelwrapper=${17:any}, labelWrapperAttrs=${18:{}}, data=${19:{}}, labelClass=${20:any}, inputInsideLabel=${21:true,false} )"
						},{
							"trigger": "html.setController\tfn. (ColdBox:html)",
							"contents": "html.setController( controller=${1:any} )"
						},{
							"trigger": "html.setRequestService\tfn. (ColdBox:html)",
							"contents": "html.setRequestService( requestService=${1:any} )"
						},{
							"trigger": "html.setSettings\tfn. (ColdBox:html)",
							"contents": "html.setSettings( settings=${1:any} )"
						},{
							"trigger": "html.startFieldSet\tfn. (ColdBox:html)",
							"contents": "html.startFieldSet( legend=${1:any}, data=${2:{}} )"
						},{
							"trigger": "html.startForm\tfn. (ColdBox:html)",
							"contents": "html.startForm( action=\"${1:}\", name=\"${2:}\", method=\"${3:}\", multipart=${4:true,false}, ssl=${5:true,false}, noBaseURL=${6:true,false}, data=${7:{}} )"
						},{
							"trigger": "html.submitButton\tfn. (ColdBox:html)",
							"contents": "html.submitButton( name=${1:any}, value=${2:any}, disabled=${3:true,false}, wrapper=${4:any}, wrapperAttrs=${5:{}}, groupWrapper=${6:any}, groupWrapperAttrs=${7:{}}, label=${8:any}, labelAttrs=${9:{}}, labelWrapper=${10:any}, labelWrapperAttrs=${11:{}}, labelClass=${12:any}, bind=${13:any}, bindProperty=${14:any}, data=${15:{}}, inputInsideLabel=${16:true,false} )"
						},{
							"trigger": "html.table\tfn. (ColdBox:html)",
							"contents": "html.table( data=${1:any}, includes=${2:any}, excludes=${3:any}, name=${4:any} )"
						},{
							"trigger": "html.tag\tfn. (ColdBox:html)",
							"contents": "html.tag( tag=${1:any}, content=${2:any}, data=${3:{}}, excludes=\"${4:}\" )"
						},{
							"trigger": "html.textArea\tfn. (ColdBox:html)",
							"contents": "html.textArea( name=${1:any}, cols=${2:numeric}, rows=${3:numeric}, value=${4:any}, disabled=${5:true,false}, readonly=${6:true,false}, wrapper=${7:any}, wrapperAttrs=${8:{}}, groupWrapper=${9:any}, groupWrapperAttrs=${10:{}}, label=${11:any}, labelAttrs=${12:{}}, labelWrapper=${13:any}, labelWrapperAttrs=${14:{}}, labelClass=${15:any}, bind=${16:any}, bindProperty=${17:any}, data=${18:{}}, inputInsideLabel=${19:true,false} )"
						},{
							"trigger": "html.textField\tfn. (ColdBox:html)",
							"contents": "html.textField( name=${1:any}, value=${2:any}, disabled=${3:true,false}, readonly=${4:true,false}, wrapper=${5:any}, wrapperAttrs=${6:{}}, groupWrapper=${7:any}, groupWrapperAttrs=${8:{}}, label=${9:any}, labelAttrs=${10:{}}, labelWrapper=${11:any}, labelWrapperAttrs=${12:{}}, labelClass=${13:any}, bind=${14:any}, bindProperty=${15:any}, data=${16:{}}, inputInsideLabel=${17:true,false} )"
						},{
							"trigger": "html.toHtmlList\tfn. (ColdBox:html)",
							"contents": "html.toHtmlList( tag=${1:any}, values=${2:any}, column=${3:any}, data=${4:{}} )"
						},{
							"trigger": "html.ul\tfn. (ColdBox:html)",
							"contents": "html.ul( values=${1:any}, column=\"${2:}\" )"
						},{
							"trigger": "html.urlField\tfn. (ColdBox:html)",
							"contents": "html.urlField( name=${1:any}, value=${2:any}, disabled=${3:true,false}, readonly=${4:true,false}, wrapper=${5:any}, wrapperAttrs=${6:{}}, groupWrapper=${7:any}, groupWrapperAttrs=${8:{}}, label=${9:any}, labelAttrs=${10:{}}, labelWrapper=${11:any}, labelWrapperAttrs=${12:{}}, labelClass=${13:any}, bind=${14:any}, bindProperty=${15:any}, data=${16:{}}, inputInsideLabel=${17:true,false} )"
						},{
							"trigger": "html.video\tfn. (ColdBox:html)",
							"contents": "html.video( src=${1:any}, width=${2:any}, height=${3:any}, poster=${4:any}, autoplay=${5:true,false}, controls=${6:true,false}, loop=${7:true,false}, preload=${8:true,false}, noBaseURL=${9:true,false}, name=${10:any}, data=${11:any} )"
						},{
							"trigger": "html.wrapTag\tfn. (ColdBox:html)",
							"contents": "html.wrapTag( buffer=${1:any}, tag=${2:any}, end=${3:true,false}, attrs=${4:{}} )"
						},{
							"trigger": "controller._runEvent\tfn. (ColdBox:controller)",
							"contents": "controller._runEvent( event=${1:any}, prePostExempt=${2:true,false}, private=${3:true,false}, defaultEvent=${4:true,false}, eventArguments=${5:{}} )"
						},{
							"trigger": "controller.getAppHash\tfn. (ColdBox:controller)",
							"contents": "controller.getAppHash( )"
						},{
							"trigger": "controller.getAppKey\tfn. (ColdBox:controller)",
							"contents": "controller.getAppKey( )"
						},{
							"trigger": "controller.getAppName\tfn. (ColdBox:controller)",
							"contents": "controller.getAppName( )"
						},{
							"trigger": "controller.getAppRootPath\tfn. (ColdBox:controller)",
							"contents": "controller.getAppRootPath( )"
						},{
							"trigger": "controller.getAsyncManager\tfn. (ColdBox:controller)",
							"contents": "controller.getAsyncManager( )"
						},{
							"trigger": "controller.getCFMLEngine\tfn. (ColdBox:controller)",
							"contents": "controller.getCFMLEngine( )"
						},{
							"trigger": "controller.getCache\tfn. (ColdBox:controller)",
							"contents": "controller.getCache( cacheName=${1:any} )"
						},{
							"trigger": "controller.getCachebox\tfn. (ColdBox:controller)",
							"contents": "controller.getCachebox( )"
						},{
							"trigger": "controller.getColdBoxSetting\tfn. (ColdBox:controller)",
							"contents": "controller.getColdBoxSetting( name=${1:any}, defaultValue=${2:any} )"
						},{
							"trigger": "controller.getColdboxInitiated\tfn. (ColdBox:controller)",
							"contents": "controller.getColdboxInitiated( )"
						},{
							"trigger": "controller.getColdboxSettings\tfn. (ColdBox:controller)",
							"contents": "controller.getColdboxSettings( )"
						},{
							"trigger": "controller.getConfigSettings\tfn. (ColdBox:controller)",
							"contents": "controller.getConfigSettings( )"
						},{
							"trigger": "controller.getDataMarshaller\tfn. (ColdBox:controller)",
							"contents": "controller.getDataMarshaller( )"
						},{
							"trigger": "controller.getHandlerService\tfn. (ColdBox:controller)",
							"contents": "controller.getHandlerService( )"
						},{
							"trigger": "controller.getInterceptorService\tfn. (ColdBox:controller)",
							"contents": "controller.getInterceptorService( )"
						},{
							"trigger": "controller.getLoaderService\tfn. (ColdBox:controller)",
							"contents": "controller.getLoaderService( )"
						},{
							"trigger": "controller.getLog\tfn. (ColdBox:controller)",
							"contents": "controller.getLog( )"
						},{
							"trigger": "controller.getLogbox\tfn. (ColdBox:controller)",
							"contents": "controller.getLogbox( )"
						},{
							"trigger": "controller.getMemento\tfn. (ColdBox:controller)",
							"contents": "controller.getMemento( )"
						},{
							"trigger": "controller.getModuleConfig\tfn. (ColdBox:controller)",
							"contents": "controller.getModuleConfig( module=${1:any} )"
						},{
							"trigger": "controller.getModuleService\tfn. (ColdBox:controller)",
							"contents": "controller.getModuleService( )"
						},{
							"trigger": "controller.getModuleSettings\tfn. (ColdBox:controller)",
							"contents": "controller.getModuleSettings( module=${1:any}, setting=${2:any}, defaultValue=${3:any} )"
						},{
							"trigger": "controller.getRenderer\tfn. (ColdBox:controller)",
							"contents": "controller.getRenderer( )"
						},{
							"trigger": "controller.getRequestService\tfn. (ColdBox:controller)",
							"contents": "controller.getRequestService( )"
						},{
							"trigger": "controller.getRoutingService\tfn. (ColdBox:controller)",
							"contents": "controller.getRoutingService( )"
						},{
							"trigger": "controller.getSchedulerService\tfn. (ColdBox:controller)",
							"contents": "controller.getSchedulerService( )"
						},{
							"trigger": "controller.getServices\tfn. (ColdBox:controller)",
							"contents": "controller.getServices( )"
						},{
							"trigger": "controller.getSetting\tfn. (ColdBox:controller)",
							"contents": "controller.getSetting( name=${1:any}, defaultValue=${2:any} )"
						},{
							"trigger": "controller.getUserSessionIdentifier\tfn. (ColdBox:controller)",
							"contents": "controller.getUserSessionIdentifier( )"
						},{
							"trigger": "controller.getUtil\tfn. (ColdBox:controller)",
							"contents": "controller.getUtil( )"
						},{
							"trigger": "controller.getWirebox\tfn. (ColdBox:controller)",
							"contents": "controller.getWirebox( )"
						},{
							"trigger": "controller.inDebugMode\tfn. (ColdBox:controller)",
							"contents": "controller.inDebugMode( )"
						},{
							"trigger": "controller.invoker\tfn. (ColdBox:controller)",
							"contents": "controller.invoker( target=${1:any}, method=${2:any}, argCollection=${3:{}}, private=${4:true,false} )"
						},{
							"trigger": "controller.isDevelopment\tfn. (ColdBox:controller)",
							"contents": "controller.isDevelopment( )"
						},{
							"trigger": "controller.isProduction\tfn. (ColdBox:controller)",
							"contents": "controller.isProduction( )"
						},{
							"trigger": "controller.isTesting\tfn. (ColdBox:controller)",
							"contents": "controller.isTesting( )"
						},{
							"trigger": "controller.loadColdBoxSettings\tfn. (ColdBox:controller)",
							"contents": "controller.loadColdBoxSettings( )"
						},{
							"trigger": "controller.locateDirectoryPath\tfn. (ColdBox:controller)",
							"contents": "controller.locateDirectoryPath( pathToCheck=${1:any} )"
						},{
							"trigger": "controller.locateFilePath\tfn. (ColdBox:controller)",
							"contents": "controller.locateFilePath( pathToCheck=${1:any} )"
						},{
							"trigger": "controller.persistVariables\tfn. (ColdBox:controller)",
							"contents": "controller.persistVariables( persist=${1:any}, persistStruct=${2:{}} )"
						},{
							"trigger": "controller.relocate\tfn. (ColdBox:controller)",
							"contents": "controller.relocate( event=${1:any}, queryString=${2:any}, addToken=${3:true,false}, persist=${4:any}, persistStruct=${5:{}}, baseURL=${6:any}, postProcessExempt=${7:true,false}, URL=${8:any}, URI=${9:any}, statusCode=${10:numeric} )"
						},{
							"trigger": "controller.runEvent\tfn. (ColdBox:controller)",
							"contents": "controller.runEvent( event=${1:any}, prePostExempt=${2:true,false}, private=${3:true,false}, defaultEvent=${4:true,false}, eventArguments=${5:{}}, cache=${6:true,false}, cacheTimeout=${7:any}, cacheLastAccessTimeout=${8:any}, cacheSuffix=${9:any}, cacheProvider=${10:any} )"
						},{
							"trigger": "controller.runRoute\tfn. (ColdBox:controller)",
							"contents": "controller.runRoute( name=${1:any}, params=${2:{}}, cache=${3:true,false}, cacheTimeout=${4:any}, cacheLastAccessTimeout=${5:any}, cacheSuffix=${6:any}, cacheProvider=${7:any}, prePostExempt=${8:true,false} )"
						},{
							"trigger": "controller.sendRelocation\tfn. (ColdBox:controller)",
							"contents": "controller.sendRelocation( URL=${1:any}, addToken=${2:true,false}, statusCode=${3:any} )"
						},{
							"trigger": "controller.setAppHash\tfn. (ColdBox:controller)",
							"contents": "controller.setAppHash( appHash=${1:any} )"
						},{
							"trigger": "controller.setAppKey\tfn. (ColdBox:controller)",
							"contents": "controller.setAppKey( appKey=${1:any} )"
						},{
							"trigger": "controller.setAppName\tfn. (ColdBox:controller)",
							"contents": "controller.setAppName( appName=${1:any} )"
						},{
							"trigger": "controller.setAppRootPath\tfn. (ColdBox:controller)",
							"contents": "controller.setAppRootPath( appRootPath=${1:any} )"
						},{
							"trigger": "controller.setAsyncManager\tfn. (ColdBox:controller)",
							"contents": "controller.setAsyncManager( asyncManager=${1:any} )"
						},{
							"trigger": "controller.setCFMLEngine\tfn. (ColdBox:controller)",
							"contents": "controller.setCFMLEngine( CFMLEngine=${1:any} )"
						},{
							"trigger": "controller.setCachebox\tfn. (ColdBox:controller)",
							"contents": "controller.setCachebox( cachebox=${1:any} )"
						},{
							"trigger": "controller.setColdboxInitiated\tfn. (ColdBox:controller)",
							"contents": "controller.setColdboxInitiated( coldboxInitiated=${1:true,false} )"
						},{
							"trigger": "controller.setColdboxSettings\tfn. (ColdBox:controller)",
							"contents": "controller.setColdboxSettings( coldboxSettings=${1:{}} )"
						},{
							"trigger": "controller.setConfigSettings\tfn. (ColdBox:controller)",
							"contents": "controller.setConfigSettings( configSettings=${1:{}} )"
						},{
							"trigger": "controller.setLog\tfn. (ColdBox:controller)",
							"contents": "controller.setLog( log=${1:any} )"
						},{
							"trigger": "controller.setLogbox\tfn. (ColdBox:controller)",
							"contents": "controller.setLogbox( logbox=${1:any} )"
						},{
							"trigger": "controller.setRenderer\tfn. (ColdBox:controller)",
							"contents": "controller.setRenderer( renderer=${1:any} )"
						},{
							"trigger": "controller.setServices\tfn. (ColdBox:controller)",
							"contents": "controller.setServices( services=${1:any} )"
						},{
							"trigger": "controller.setSetting\tfn. (ColdBox:controller)",
							"contents": "controller.setSetting( name=${1:any}, value=${2:any} )"
						},{
							"trigger": "controller.setUtil\tfn. (ColdBox:controller)",
							"contents": "controller.setUtil( util=${1:any} )"
						},{
							"trigger": "controller.setWirebox\tfn. (ColdBox:controller)",
							"contents": "controller.setWirebox( wirebox=${1:any} )"
						},{
							"trigger": "controller.settingExists\tfn. (ColdBox:controller)",
							"contents": "controller.settingExists( name=${1:any} )"
						},{
							"trigger": "controller.updateSSL\tfn. (ColdBox:controller)",
							"contents": "controller.updateSSL( inURL=${1:any}, ssl=${2:any} )"
						},{
							"trigger": "controller.validateAction\tfn. (ColdBox:controller)",
							"contents": "controller.validateAction( action=${1:any}, inclusion=${2:any}, exclusion=${3:any} )"
						}]}