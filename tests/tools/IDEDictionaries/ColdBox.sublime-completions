{
    "scope": "meta.name.interpolated.hash - string, source.cfscript - source.sql - text.html.cfm - string - meta - comment, source.cfscript.embedded.cfml - string, source.sql, text",
    "completions":
    [
	// Functions for: coldbox.system.Interceptor 
	{ "trigger": "appendToBuffer\tfn. (ColdBox Interceptor)", "contents": "appendToBuffer( str=${1:any} )" },
	{ "trigger": "clearBuffer\tfn. (ColdBox Interceptor)", "contents": "clearBuffer()" },
	{ "trigger": "getBufferObject\tfn. (ColdBox Interceptor)", "contents": "getBufferObject()" },
	{ "trigger": "getBufferString\tfn. (ColdBox Interceptor)", "contents": "getBufferString()" },
	{ "trigger": "getInterceptorService\tfn. (ColdBox Interceptor)", "contents": "getInterceptorService()" },
	{ "trigger": "getProperties\tfn. (ColdBox Interceptor)", "contents": "getProperties()" },
	{ "trigger": "getProperty\tfn. (ColdBox Interceptor)", "contents": "getProperty( property=${1:any} )" },
	{ "trigger": "propertyExists\tfn. (ColdBox Interceptor)", "contents": "propertyExists( property=${1:any} )" },
	{ "trigger": "setProperties\tfn. (ColdBox Interceptor)", "contents": "setProperties( properties=${1:{}} )" },
	{ "trigger": "setProperty\tfn. (ColdBox Interceptor)", "contents": "setProperty( property=${1:any}, value=${2:any} )" },
	{ "trigger": "unregister\tfn. (ColdBox Interceptor)", "contents": "unregister( state=${1:any} )" },
	// END Functions for: coldbox.system.Interceptor 

	// Functions for: coldbox.system.EventHandler 
	{ "trigger": "_actionExists\tfn. (ColdBox EventHandler)", "contents": "_actionExists( action=${1:any} )" },
	{ "trigger": "_privateInvoker\tfn. (ColdBox EventHandler)", "contents": "_privateInvoker( method=${1:any}, argCollection=${2:any} )" },
	// END Functions for: coldbox.system.EventHandler 

	// Functions for: testbox.system.BaseSpec 
	{ "trigger": "addAssertions\tfn. (ColdBox BaseSpec)", "contents": "addAssertions( assertions=${1:any} )" },
	{ "trigger": "addMatchers\tfn. (ColdBox BaseSpec)", "contents": "addMatchers( matchers=${1:any} )" },
	{ "trigger": "afterEach\tfn. (ColdBox BaseSpec)", "contents": "afterEach( body=${1:any} )" },
	{ "trigger": "assert\tfn. (ColdBox BaseSpec)", "contents": "assert( expression=${1:any}, message=${2:any} )" },
	{ "trigger": "beforeEach\tfn. (ColdBox BaseSpec)", "contents": "beforeEach( body=${1:any} )" },
	{ "trigger": "clearDebugBuffer\tfn. (ColdBox BaseSpec)", "contents": "clearDebugBuffer()" },
	{ "trigger": "closureStub\tfn. (ColdBox BaseSpec)", "contents": "closureStub()" },
	{ "trigger": "console\tfn. (ColdBox BaseSpec)", "contents": "console( var=${1:any}, top=${2:any} )" },
	{ "trigger": "createEmptyMock\tfn. (ColdBox BaseSpec)", "contents": "createEmptyMock( className=\"${1:}\", object=${2:any}, callLogging=${3:true,false} )" },
	{ "trigger": "createMock\tfn. (ColdBox BaseSpec)", "contents": "createMock( className=\"${1:}\", object=${2:any}, clearMethods=${3:true,false} )" },
	{ "trigger": "createStub\tfn. (ColdBox BaseSpec)", "contents": "createStub( callLogging=${1:true,false}, extends=\"${2:}\", implements=\"${3:}\" )" },
	{ "trigger": "debug\tfn. (ColdBox BaseSpec)", "contents": "debug( var=${1:any}, deepCopy=${2:true,false} )" },
	{ "trigger": "describe\tfn. (ColdBox BaseSpec)", "contents": "describe( title=\"${1:}\", body=${2:any}, labels=${3:any}, asyncAll=${4:true,false}, skip=${5:any} )" },
	{ "trigger": "expect\tfn. (ColdBox BaseSpec)", "contents": "expect( actual=${1:any} )" },
	{ "trigger": "expectedException\tfn. (ColdBox BaseSpec)", "contents": "expectedException( type=${1:any}, regex=${2:any} )" },
	{ "trigger": "fail\tfn. (ColdBox BaseSpec)", "contents": "fail( message=${1:any} )" },
	{ "trigger": "getDebugBuffer\tfn. (ColdBox BaseSpec)", "contents": "getDebugBuffer()" },
	{ "trigger": "getMockBox\tfn. (ColdBox BaseSpec)", "contents": "getMockBox( generationPath=\"${1:}\" )" },
	{ "trigger": "getProperty\tfn. (ColdBox BaseSpec)", "contents": "getProperty( target=${1:any}, name=${2:any}, scope=${3:any}, defaultValue=${4:any} )" },
	{ "trigger": "hasExpectedException\tfn. (ColdBox BaseSpec)", "contents": "hasExpectedException( specName=${1:any}, runner=${2:any} )" },
	{ "trigger": "isExpectedException\tfn. (ColdBox BaseSpec)", "contents": "isExpectedException( exception=${1:any}, specName=${2:any}, runner=${3:any} )" },
	{ "trigger": "it\tfn. (ColdBox BaseSpec)", "contents": "it( title=\"${1:}\", body=${2:any}, labels=${3:any}, skip=${4:any} )" },
	{ "trigger": "makePublic\tfn. (ColdBox BaseSpec)", "contents": "makePublic( target=${1:any}, method=\"${2:}\", newName=\"${3:}\" )" },
	{ "trigger": "prepareMock\tfn. (ColdBox BaseSpec)", "contents": "prepareMock( object=${1:any}, callLogging=${2:true,false} )" },
	{ "trigger": "print\tfn. (ColdBox BaseSpec)", "contents": "print( message=${1:any} )" },
	{ "trigger": "println\tfn. (ColdBox BaseSpec)", "contents": "println( message=${1:any} )" },
	{ "trigger": "querySim\tfn. (ColdBox BaseSpec)", "contents": "querySim( queryData=${1:any} )" },
	{ "trigger": "runAfterEachClosures\tfn. (ColdBox BaseSpec)", "contents": "runAfterEachClosures( suite=${1:any}, spec=${2:any} )" },
	{ "trigger": "runBeforeEachClosures\tfn. (ColdBox BaseSpec)", "contents": "runBeforeEachClosures( suite=${1:any}, spec=${2:any} )" },
	{ "trigger": "runRemote\tfn. (ColdBox BaseSpec)", "contents": "runRemote( testSpecs=\"${1:}\", testSuites=\"${2:}\", reporter=\"${3:}\", labels=\"${4:}\" )" },
	{ "trigger": "runSpec\tfn. (ColdBox BaseSpec)", "contents": "runSpec( spec=${1:any}, suite=${2:any}, testResults=${3:any}, suiteStats=${4:any}, runner=${5:any} )" },
	{ "trigger": "runTestMethod\tfn. (ColdBox BaseSpec)", "contents": "runTestMethod( spec=${1:any}, testResults=${2:any}, suiteStats=${3:any}, runner=${4:any} )" },
	{ "trigger": "xdescribe\tfn. (ColdBox BaseSpec)", "contents": "xdescribe( title=\"${1:}\", body=${2:any}, labels=${3:any}, asyncAll=${4:true,false} )" },
	{ "trigger": "xit\tfn. (ColdBox BaseSpec)", "contents": "xit( title=\"${1:}\", body=${2:any}, labels=${3:any} )" },
	// END Functions for: testbox.system.BaseSpec 

	// Functions for: coldbox.system.FrameworkSupertype 
	{ "trigger": "$htmlhead\tfn. (ColdBox FrameworkSuperType)", "contents": "$htmlhead( content=\"${1:}\" )" },
	{ "trigger": "addAsset\tfn. (ColdBox FrameworkSuperType)", "contents": "addAsset( asset=${1:any} )" },
	{ "trigger": "announceInterception\tfn. (ColdBox FrameworkSuperType)", "contents": "announceInterception( state=${1:any}, interceptData=${2:any}, async=${3:true,false}, asyncAll=${4:true,false}, asyncAllJoin=${5:true,false}, asyncPriority=\"${6:}\", asyncJoinTimeout=${7:numeric} )" },
	{ "trigger": "getColdboxOCM\tfn. (ColdBox FrameworkSuperType)", "contents": "getColdboxOCM( cacheName=${1:any} )" },
	{ "trigger": "getController\tfn. (ColdBox FrameworkSuperType)", "contents": "getController()" },
	{ "trigger": "getDatasource\tfn. (ColdBox FrameworkSuperType)", "contents": "getDatasource( alias=${1:any} )" },
	{ "trigger": "getInstance\tfn. (ColdBox FrameworkSuperType)", "contents": "getInstance( name=${1:any}, dsl=${2:any}, initArguments=${3:any} )" },
	{ "trigger": "getInterceptor\tfn. (ColdBox FrameworkSuperType)", "contents": "getInterceptor( interceptorName=${1:any}, deepSearch=${2:any} )" },
	{ "trigger": "getMemento\tfn. (ColdBox FrameworkSuperType)", "contents": "getMemento()" },
	{ "trigger": "getModel\tfn. (ColdBox FrameworkSuperType)", "contents": "getModel( name=${1:any}, dsl=${2:any}, initArguments=${3:any} )" },
	{ "trigger": "getModuleSettings\tfn. (ColdBox FrameworkSuperType)", "contents": "getModuleSettings( module=${1:any} )" },
	{ "trigger": "getMyPlugin\tfn. (ColdBox FrameworkSuperType)", "contents": "getMyPlugin( plugin=${1:any}, newInstance=${2:any}, module=${3:any}, init=${4:any} )" },
	{ "trigger": "getPlugin\tfn. (ColdBox FrameworkSuperType)", "contents": "getPlugin( plugin=${1:any}, customPlugin=${2:any}, newInstance=${3:any}, module=${4:any}, init=${5:any} )" },
	{ "trigger": "getSetting\tfn. (ColdBox FrameworkSuperType)", "contents": "getSetting( name=${1:any}, FWSetting=${2:true,false}, defaultValue=${3:any} )" },
	{ "trigger": "getSettingStructure\tfn. (ColdBox FrameworkSuperType)", "contents": "getSettingStructure( FWSetting=${1:true,false}, DeepCopyFlag=${2:true,false} )" },
	{ "trigger": "includeUDF\tfn. (ColdBox FrameworkSuperType)", "contents": "includeUDF( udflibrary=${1:any} )" },
	{ "trigger": "loadGlobalUDFLibraries\tfn. (ColdBox FrameworkSuperType)", "contents": "loadGlobalUDFLibraries()" },
	{ "trigger": "locateDirectoryPath\tfn. (ColdBox FrameworkSuperType)", "contents": "locateDirectoryPath( pathToCheck=${1:any} )" },
	{ "trigger": "locateFilePath\tfn. (ColdBox FrameworkSuperType)", "contents": "locateFilePath( pathToCheck=${1:any} )" },
	{ "trigger": "persistVariables\tfn. (ColdBox FrameworkSuperType)", "contents": "persistVariables( persist=\"${1:}\", persistStruct=${2:{}} )" },
	{ "trigger": "populateModel\tfn. (ColdBox FrameworkSuperType)", "contents": "populateModel( model=${1:any}, scope=${2:any}, trustedSetter=${3:true,false}, include=${4:any}, exclude=${5:any}, ignoreEmpty=${6:true,false}, nullEmptyInclude=\"${7:}\", nullEmptyExclude=\"${8:}\", composeRelationships=${9:true,false} )" },
	{ "trigger": "renderExternalView\tfn. (ColdBox FrameworkSuperType)", "contents": "renderExternalView( view=${1:any}, cache=${2:any}, cacheTimeout=${3:any}, cacheLastAccessTimeout=${4:any}, cacheSuffix=${5:any}, args=${6:{}} )" },
	{ "trigger": "renderLayout\tfn. (ColdBox FrameworkSuperType)", "contents": "renderLayout( layout=${1:any}, view=${2:any}, module=${3:any}, args=${4:{}} )" },
	{ "trigger": "renderView\tfn. (ColdBox FrameworkSuperType)", "contents": "renderView( view=${1:any}, cache=${2:any}, cacheTimeout=${3:any}, cacheLastAccessTimeout=${4:any}, cacheSuffix=${5:any}, module=${6:any}, args=${7:{}}, collection=${8:any}, collectionAs=${9:any} )" },
	{ "trigger": "runEvent\tfn. (ColdBox FrameworkSuperType)", "contents": "runEvent( event=${1:any}, prepostExempt=${2:any}, private=${3:any}, default=${4:any}, eventArguments=${5:any} )" },
	{ "trigger": "setNextEvent\tfn. (ColdBox FrameworkSuperType)", "contents": "setNextEvent( event=\"${1:}\", queryString=\"${2:}\", addToken=${3:true,false}, persist=\"${4:}\", persistStruct=${5:{}}, ssl=${6:true,false}, baseURL=\"${7:}\", postProcessExempt=${8:true,false}, URL=\"${9:}\", URI=\"${10:}\", statusCode=${11:numeric} )" },
	{ "trigger": "setSetting\tfn. (ColdBox FrameworkSuperType)", "contents": "setSetting( name=${1:any}, value=${2:any} )" },
	{ "trigger": "settingExists\tfn. (ColdBox FrameworkSuperType)", "contents": "settingExists( name=${1:any}, FWSetting=${2:true,false} )" },
	// END Functions for: coldbox.system.FrameworkSupertype 

	// Functions for Scope: logbox 
	{ "trigger": "logbox.getAppendersMap\tfn. (ColdBox logbox)", "contents": "getAppendersMap( appenders=${1:any} )" },
	{ "trigger": "logbox.getConfig\tfn. (ColdBox logbox)", "contents": "getConfig()" },
	{ "trigger": "logbox.getCurrentAppenders\tfn. (ColdBox logbox)", "contents": "getCurrentAppenders()" },
	{ "trigger": "logbox.getCurrentLoggers\tfn. (ColdBox logbox)", "contents": "getCurrentLoggers()" },
	{ "trigger": "logbox.getLogger\tfn. (ColdBox logbox)", "contents": "getLogger( category=${1:any} )" },
	{ "trigger": "logbox.getRootLogger\tfn. (ColdBox logbox)", "contents": "getRootLogger()" },
	{ "trigger": "logbox.getUtil\tfn. (ColdBox logbox)", "contents": "getUtil()" },
	{ "trigger": "logbox.getVersion\tfn. (ColdBox logbox)", "contents": "getVersion()" },
	{ "trigger": "logbox.locateCategoryParentLogger\tfn. (ColdBox logbox)", "contents": "locateCategoryParentLogger( category=${1:any} )" },
	{ "trigger": "logbox.registerAppender\tfn. (ColdBox logbox)", "contents": "registerAppender( name=${1:any}, class=${2:any}, properties=${3:any}, layout=${4:any}, levelMin=${5:any}, levelMax=${6:any} )" },
	// END Functions for Scope: logbox 

	// Functions for Scope: flash 
	{ "trigger": "flash.clear\tfn. (ColdBox flash)", "contents": "clear()" },
	{ "trigger": "flash.clearFlash\tfn. (ColdBox flash)", "contents": "clearFlash()" },
	{ "trigger": "flash.discard\tfn. (ColdBox flash)", "contents": "discard( keys=\"${1:}\" )" },
	{ "trigger": "flash.exists\tfn. (ColdBox flash)", "contents": "exists( name=\"${1:}\" )" },
	{ "trigger": "flash.flashExists\tfn. (ColdBox flash)", "contents": "flashExists()" },
	{ "trigger": "flash.get\tfn. (ColdBox flash)", "contents": "get( name=\"${1:}\", default=${2:any} )" },
	{ "trigger": "flash.getController\tfn. (ColdBox flash)", "contents": "getController()" },
	{ "trigger": "flash.getDefaults\tfn. (ColdBox flash)", "contents": "getDefaults()" },
	{ "trigger": "flash.getFlash\tfn. (ColdBox flash)", "contents": "getFlash()" },
	{ "trigger": "flash.getKeys\tfn. (ColdBox flash)", "contents": "getKeys()" },
	{ "trigger": "flash.getProperties\tfn. (ColdBox flash)", "contents": "getProperties()" },
	{ "trigger": "flash.getProperty\tfn. (ColdBox flash)", "contents": "getProperty( property=${1:any} )" },
	{ "trigger": "flash.getScope\tfn. (ColdBox flash)", "contents": "getScope()" },
	{ "trigger": "flash.getUtil\tfn. (ColdBox flash)", "contents": "getUtil()" },
	{ "trigger": "flash.inflateFlash\tfn. (ColdBox flash)", "contents": "inflateFlash()" },
	{ "trigger": "flash.isEmpty\tfn. (ColdBox flash)", "contents": "isEmpty()" },
	{ "trigger": "flash.keep\tfn. (ColdBox flash)", "contents": "keep( keys=\"${1:}\" )" },
	{ "trigger": "flash.persistRC\tfn. (ColdBox flash)", "contents": "persistRC( include=\"${1:}\", exclude=\"${2:}\", saveNow=${3:true,false} )" },
	{ "trigger": "flash.propertyExists\tfn. (ColdBox flash)", "contents": "propertyExists( property=${1:any} )" },
	{ "trigger": "flash.put\tfn. (ColdBox flash)", "contents": "put( name=\"${1:}\", value=${2:any}, saveNow=${3:true,false}, keep=${4:true,false}, inflateToRC=${5:true,false}, inflateToPRC=${6:true,false}, autoPurge=${7:true,false} )" },
	{ "trigger": "flash.putAll\tfn. (ColdBox flash)", "contents": "putAll( map=${1:{}}, saveNow=${2:true,false}, keep=${3:true,false}, inflateToRC=${4:true,false}, inflateToPRC=${5:true,false}, autoPurge=${6:true,false} )" },
	{ "trigger": "flash.remove\tfn. (ColdBox flash)", "contents": "remove( name=\"${1:}\", saveNow=${2:true,false} )" },
	{ "trigger": "flash.removeFlash\tfn. (ColdBox flash)", "contents": "removeFlash()" },
	{ "trigger": "flash.saveFlash\tfn. (ColdBox flash)", "contents": "saveFlash()" },
	{ "trigger": "flash.setProperties\tfn. (ColdBox flash)", "contents": "setProperties( properties=${1:any} )" },
	{ "trigger": "flash.setProperty\tfn. (ColdBox flash)", "contents": "setProperty( property=${1:any}, value=${2:any} )" },
	{ "trigger": "flash.size\tfn. (ColdBox flash)", "contents": "size()" },
	{ "trigger": "flash.statusMarks\tfn. (ColdBox flash)", "contents": "statusMarks( keys=\"${1:}\", keep=${2:true,false} )" },
	// END Functions for Scope: flash 

	// Functions for Scope: binder 
	{ "trigger": "binder.asEagerInit\tfn. (ColdBox binder)", "contents": "asEagerInit()" },
	{ "trigger": "binder.asSingleton\tfn. (ColdBox binder)", "contents": "asSingleton()" },
	{ "trigger": "binder.bindAspect\tfn. (ColdBox binder)", "contents": "bindAspect( classes=${1:coldbox.system.aop.Matcher}, methods=${2:coldbox.system.aop.Matcher}, aspects=${3:any} )" },
	{ "trigger": "binder.cacheBox\tfn. (ColdBox binder)", "contents": "cacheBox( configFile=${1:any}, cacheFactory=${2:any}, enabled=${3:any}, classNamespace=${4:any} )" },
	{ "trigger": "binder.constructor\tfn. (ColdBox binder)", "contents": "constructor( constructor=${1:any} )" },
	{ "trigger": "binder.extraAttributes\tfn. (ColdBox binder)", "contents": "extraAttributes( data=${1:{}} )" },
	{ "trigger": "binder.getAppMapping\tfn. (ColdBox binder)", "contents": "getAppMapping()" },
	{ "trigger": "binder.getAspectBindings\tfn. (ColdBox binder)", "contents": "getAspectBindings()" },
	{ "trigger": "binder.getCacheBoxConfig\tfn. (ColdBox binder)", "contents": "getCacheBoxConfig()" },
	{ "trigger": "binder.getColdBox\tfn. (ColdBox binder)", "contents": "getColdBox()" },
	{ "trigger": "binder.getCurrentMapping\tfn. (ColdBox binder)", "contents": "getCurrentMapping()" },
	{ "trigger": "binder.getCustomDSL\tfn. (ColdBox binder)", "contents": "getCustomDSL()" },
	{ "trigger": "binder.getCustomScopes\tfn. (ColdBox binder)", "contents": "getCustomScopes()" },
	{ "trigger": "binder.getDefaults\tfn. (ColdBox binder)", "contents": "getDefaults()" },
	{ "trigger": "binder.getInjector\tfn. (ColdBox binder)", "contents": "getInjector()" },
	{ "trigger": "binder.getListeners\tfn. (ColdBox binder)", "contents": "getListeners()" },
	{ "trigger": "binder.getLogBoxConfig\tfn. (ColdBox binder)", "contents": "getLogBoxConfig()" },
	{ "trigger": "binder.getMapping\tfn. (ColdBox binder)", "contents": "getMapping( name=${1:any} )" },
	{ "trigger": "binder.getMappings\tfn. (ColdBox binder)", "contents": "getMappings()" },
	{ "trigger": "binder.getMemento\tfn. (ColdBox binder)", "contents": "getMemento()" },
	{ "trigger": "binder.getParentInjector\tfn. (ColdBox binder)", "contents": "getParentInjector()" },
	{ "trigger": "binder.getProperties\tfn. (ColdBox binder)", "contents": "getProperties()" },
	{ "trigger": "binder.getProperty\tfn. (ColdBox binder)", "contents": "getProperty( name=${1:any}, default=${2:any} )" },
	{ "trigger": "binder.getScanLocations\tfn. (ColdBox binder)", "contents": "getScanLocations()" },
	{ "trigger": "binder.getScopeRegistration\tfn. (ColdBox binder)", "contents": "getScopeRegistration()" },
	{ "trigger": "binder.getStopRecursions\tfn. (ColdBox binder)", "contents": "getStopRecursions()" },
	{ "trigger": "binder.inCacheBox\tfn. (ColdBox binder)", "contents": "inCacheBox( key=${1:any}, timeout=${2:any}, lastAccessTimeout=${3:any}, provider=${4:any} )" },
	{ "trigger": "binder.initArg\tfn. (ColdBox binder)", "contents": "initArg( name=${1:any}, ref=${2:any}, dsl=${3:any}, value=${4:any}, javaCast=${5:any}, required=${6:any} )" },
	{ "trigger": "binder.initWith\tfn. (ColdBox binder)", "contents": "initWith()" },
	{ "trigger": "binder.into\tfn. (ColdBox binder)", "contents": "into( scope=${1:any} )" },
	{ "trigger": "binder.listener\tfn. (ColdBox binder)", "contents": "listener( class=${1:any}, properties=${2:any}, name=${3:any} )" },
	{ "trigger": "binder.loadDataDSL\tfn. (ColdBox binder)", "contents": "loadDataDSL( rawDSL=${1:any} )" },
	{ "trigger": "binder.logBoxConfig\tfn. (ColdBox binder)", "contents": "logBoxConfig( config=${1:any} )" },
	{ "trigger": "binder.map\tfn. (ColdBox binder)", "contents": "map( alias=${1:any}, force=${2:any} )" },
	{ "trigger": "binder.mapAspect\tfn. (ColdBox binder)", "contents": "mapAspect( aspect=${1:any}, autoBinding=${2:true,false} )" },
	{ "trigger": "binder.mapDirectory\tfn. (ColdBox binder)", "contents": "mapDirectory( packagePath=${1:any}, include=${2:any}, exclude=${3:any}, influence=${4:any}, filter=${5:any}, namespace=${6:any}, prepend=${7:any} )" },
	{ "trigger": "binder.mapDSL\tfn. (ColdBox binder)", "contents": "mapDSL( namespace=${1:any}, path=${2:any} )" },
	{ "trigger": "binder.mapPath\tfn. (ColdBox binder)", "contents": "mapPath( path=${1:any}, namespace=${2:any}, prepend=${3:any}, force=${4:any} )" },
	{ "trigger": "binder.mappingExists\tfn. (ColdBox binder)", "contents": "mappingExists( name=${1:any} )" },
	{ "trigger": "binder.mapScope\tfn. (ColdBox binder)", "contents": "mapScope( annotation=${1:any}, path=${2:any} )" },
	{ "trigger": "binder.match\tfn. (ColdBox binder)", "contents": "match()" },
	{ "trigger": "binder.methodArg\tfn. (ColdBox binder)", "contents": "methodArg( name=${1:any}, ref=${2:any}, dsl=${3:any}, value=${4:any}, javaCast=${5:any} )" },
	{ "trigger": "binder.mixins\tfn. (ColdBox binder)", "contents": "mixins( mixins=${1:any} )" },
	{ "trigger": "binder.noAutowire\tfn. (ColdBox binder)", "contents": "noAutowire()" },
	{ "trigger": "binder.noInit\tfn. (ColdBox binder)", "contents": "noInit()" },
	{ "trigger": "binder.notThreadSafe\tfn. (ColdBox binder)", "contents": "notThreadSafe()" },
	{ "trigger": "binder.onDIComplete\tfn. (ColdBox binder)", "contents": "onDIComplete( methods=${1:any} )" },
	{ "trigger": "binder.parent\tfn. (ColdBox binder)", "contents": "parent( alias=${1:any} )" },
	{ "trigger": "binder.parentInjector\tfn. (ColdBox binder)", "contents": "parentInjector( injector=${1:any} )" },
	{ "trigger": "binder.processMappings\tfn. (ColdBox binder)", "contents": "processMappings()" },
	{ "trigger": "binder.property\tfn. (ColdBox binder)", "contents": "property( name=${1:any}, ref=${2:any}, dsl=${3:any}, value=${4:any}, javaCast=${5:any}, scope=${6:any}, required=${7:any} )" },
	{ "trigger": "binder.propertyExists\tfn. (ColdBox binder)", "contents": "propertyExists( name=${1:any} )" },
	{ "trigger": "binder.providerMethod\tfn. (ColdBox binder)", "contents": "providerMethod( method=${1:any}, mapping=${2:any} )" },
	{ "trigger": "binder.removeScanLocations\tfn. (ColdBox binder)", "contents": "removeScanLocations( locations=${1:any} )" },
	{ "trigger": "binder.reset\tfn. (ColdBox binder)", "contents": "reset()" },
	{ "trigger": "binder.scanLocations\tfn. (ColdBox binder)", "contents": "scanLocations( locations=${1:any} )" },
	{ "trigger": "binder.scopeRegistration\tfn. (ColdBox binder)", "contents": "scopeRegistration( enabled=${1:any}, scope=${2:any}, key=${3:any} )" },
	{ "trigger": "binder.setMapping\tfn. (ColdBox binder)", "contents": "setMapping( name=${1:any}, mapping=${2:any} )" },
	{ "trigger": "binder.setProperties\tfn. (ColdBox binder)", "contents": "setProperties( properties=${1:any} )" },
	{ "trigger": "binder.setProperty\tfn. (ColdBox binder)", "contents": "setProperty( name=${1:any}, value=${2:any} )" },
	{ "trigger": "binder.setter\tfn. (ColdBox binder)", "contents": "setter( name=${1:any}, ref=${2:any}, dsl=${3:any}, value=${4:any}, javaCast=${5:any}, argName=${6:any} )" },
	{ "trigger": "binder.stopRecursions\tfn. (ColdBox binder)", "contents": "stopRecursions( classes=${1:any} )" },
	{ "trigger": "binder.threadSafe\tfn. (ColdBox binder)", "contents": "threadSafe()" },
	{ "trigger": "binder.to\tfn. (ColdBox binder)", "contents": "to( path=${1:any} )" },
	{ "trigger": "binder.toDSL\tfn. (ColdBox binder)", "contents": "toDSL( dsl=${1:any} )" },
	{ "trigger": "binder.toFactoryMethod\tfn. (ColdBox binder)", "contents": "toFactoryMethod( factory=${1:any}, method=${2:any} )" },
	{ "trigger": "binder.toJava\tfn. (ColdBox binder)", "contents": "toJava( path=${1:any} )" },
	{ "trigger": "binder.toProvider\tfn. (ColdBox binder)", "contents": "toProvider( provider=${1:any} )" },
	{ "trigger": "binder.toRSS\tfn. (ColdBox binder)", "contents": "toRSS( path=${1:any} )" },
	{ "trigger": "binder.toValue\tfn. (ColdBox binder)", "contents": "toValue( value=${1:any} )" },
	{ "trigger": "binder.toWebservice\tfn. (ColdBox binder)", "contents": "toWebservice( path=${1:any} )" },
	{ "trigger": "binder.unMap\tfn. (ColdBox binder)", "contents": "unMap( name=${1:any} )" },
	{ "trigger": "binder.virtualInheritance\tfn. (ColdBox binder)", "contents": "virtualInheritance( mapping=${1:any} )" },
	{ "trigger": "binder.with\tfn. (ColdBox binder)", "contents": "with( alias=${1:any} )" },
	// END Functions for Scope: binder 

	// Functions for Scope: html 
	{ "trigger": "html.addAsset\tfn. (ColdBox html)", "contents": "addAsset( asset=${1:any}, sendToHeader=${2:true,false}, async=${3:true,false}, defer=${4:true,false} )" },
	{ "trigger": "html.addJSContent\tfn. (ColdBox html)", "contents": "addJSContent( content=${1:any}, addToHeader=${2:true,false} )" },
	{ "trigger": "html.addStyleContent\tfn. (ColdBox html)", "contents": "addStyleContent( content=${1:any}, addToHeader=${2:true,false} )" },
	{ "trigger": "html.anchor\tfn. (ColdBox html)", "contents": "anchor( name=${1:any}, text=${2:any}, data=${3:{}} )" },
	{ "trigger": "html.arrayToTable\tfn. (ColdBox html)", "contents": "arrayToTable( data=${1:any}, includes=\"${2:}\", excludes=\"${3:}\", buffer=${4:any} )" },
	{ "trigger": "html.audio\tfn. (ColdBox html)", "contents": "audio( src=${1:any}, autoplay=${2:true,false}, controls=${3:true,false}, loop=${4:true,false}, preLoad=${5:true,false}, noBaseURL=${6:true,false}, name=\"${7:}\", data=${8:{}} )" },
	{ "trigger": "html.autoDiscoveryLink\tfn. (ColdBox html)", "contents": "autoDiscoveryLink( type=\"${1:}\", href=${2:any}, rel=${3:any}, title=${4:any}, data=${5:{}} )" },
	{ "trigger": "html.bindValue\tfn. (ColdBox html)", "contents": "bindValue( args=${1:any} )" },
	{ "trigger": "html.br\tfn. (ColdBox html)", "contents": "br( count=${1:numeric} )" },
	{ "trigger": "html.button\tfn. (ColdBox html)", "contents": "button( name=\"${1:}\", value=\"${2:}\", disabled=${3:true,false}, type=\"${4:}\", wrapper=\"${5:}\", groupWrapper=\"${6:}\", label=\"${7:}\", labelwrapper=\"${8:}\", data=${9:{}}, labelClass=\"${10:}\" )" },
	{ "trigger": "html.canvas\tfn. (ColdBox html)", "contents": "canvas( id=\"${1:}\", width=\"${2:}\", height=\"${3:}\", data=${4:{}} )" },
	{ "trigger": "html.checkBox\tfn. (ColdBox html)", "contents": "checkBox( name=\"${1:}\", value=\"${2:}\", disabled=${3:true,false}, checked=${4:true,false}, wrapper=\"${5:}\", groupWrapper=\"${6:}\", label=\"${7:}\", labelwrapper=\"${8:}\", labelClass=\"${9:}\", bind=${10:any}, bindProperty=${11:any} )" },
	{ "trigger": "html.docType\tfn. (ColdBox html)", "contents": "docType( type=\"${1:}\" )" },
	{ "trigger": "html.emailField\tfn. (ColdBox html)", "contents": "emailField( name=\"${1:}\", value=\"${2:}\", disabled=${3:true,false}, readonly=${4:true,false}, wrapper=\"${5:}\", groupWrapper=\"${6:}\", label=\"${7:}\", labelwrapper=\"${8:}\", labelClass=\"${9:}\", bind=${10:any}, bindProperty=${11:any} )" },
	{ "trigger": "html.endFieldset\tfn. (ColdBox html)", "contents": "endFieldset()" },
	{ "trigger": "html.endForm\tfn. (ColdBox html)", "contents": "endForm()" },
	{ "trigger": "html.entityFields\tfn. (ColdBox html)", "contents": "entityFields( entity=${1:any}, groupWrapper=\"${2:}\", fieldwrapper=${3:any}, labelwrapper=${4:any}, labelClass=\"${5:}\", textareas=${6:any}, booleanSelect=${7:true,false}, showRelations=${8:true,false}, manytoone=${9:{}}, manytomany=${10:{}} )" },
	{ "trigger": "html.fileField\tfn. (ColdBox html)", "contents": "fileField( name=\"${1:}\", value=\"${2:}\", disabled=${3:true,false}, readonly=${4:true,false}, wrapper=\"${5:}\", groupWrapper=\"${6:}\", label=\"${7:}\", labelwrapper=\"${8:}\", labelClass=\"${9:}\" )" },
	{ "trigger": "html.flattenAttributes\tfn. (ColdBox html)", "contents": "flattenAttributes( target=${1:{}}, excludes=${2:any}, buffer=${3:any} )" },
	{ "trigger": "html.getColumnArray\tfn. (ColdBox html)", "contents": "getColumnArray( qry=${1:query}, columnName=\"${2:}\" )" },
	{ "trigger": "html.heading\tfn. (ColdBox html)", "contents": "heading( title=\"${1:}\", size=${2:numeric} )" },
	{ "trigger": "html.hiddenField\tfn. (ColdBox html)", "contents": "hiddenField( name=\"${1:}\", value=\"${2:}\", wrapper=\"${3:}\", groupWrapper=\"${4:}\", label=\"${5:}\", labelwrapper=\"${6:}\", labelClass=\"${7:}\", bind=${8:any}, bindProperty=${9:any} )" },
	{ "trigger": "html.href\tfn. (ColdBox html)", "contents": "href( href=${1:any}, text=${2:any}, queryString=${3:any}, title=${4:any}, target=${5:any}, ssl=${6:true,false}, noBaseURL=${7:true,false}, data=${8:{}} )" },
	{ "trigger": "html.imageButton\tfn. (ColdBox html)", "contents": "imageButton( src=\"${1:}\", name=\"${2:}\", disabled=${3:true,false}, wrapper=\"${4:}\", groupWrapper=\"${5:}\", label=\"${6:}\", labelwrapper=\"${7:}\", labelClass=\"${8:}\" )" },
	{ "trigger": "html.img\tfn. (ColdBox html)", "contents": "img( src=${1:any}, alt=\"${2:}\", class=\"${3:}\", width=\"${4:}\", height=\"${5:}\", title=\"${6:}\", rel=\"${7:}\", name=\"${8:}\", noBaseURL=${9:true,false}, data=${10:{}} )" },
	{ "trigger": "html.inputField\tfn. (ColdBox html)", "contents": "inputField( type=\"${1:}\", name=\"${2:}\", value=\"${3:}\", disabled=${4:true,false}, checked=${5:true,false}, readonly=${6:true,false}, wrapper=\"${7:}\", groupWrapper=\"${8:}\", label=\"${9:}\", labelwrapper=\"${10:}\", labelClass=\"${11:}\", bind=${12:any}, bindProperty=${13:any}, data=${14:{}} )" },
	{ "trigger": "html.label\tfn. (ColdBox html)", "contents": "label( field=\"${1:}\", content=\"${2:}\", wrapper=\"${3:}\", data=${4:{}}, class=\"${5:}\" )" },
	{ "trigger": "html.link\tfn. (ColdBox html)", "contents": "link( href=${1:any}, rel=${2:any}, type=${3:any}, title=${4:any}, media=${5:any}, noBaseURL=${6:true,false}, charset=${7:any}, sendToHeader=${8:true,false}, data=${9:{}} )" },
	{ "trigger": "html.makePretty\tfn. (ColdBox html)", "contents": "makePretty( text=${1:any} )" },
	{ "trigger": "html.meta\tfn. (ColdBox html)", "contents": "meta( name=${1:any}, content=${2:any}, type=\"${3:}\", sendToHeader=${4:true,false} )" },
	{ "trigger": "html.nbs\tfn. (ColdBox html)", "contents": "nbs( count=${1:numeric} )" },
	{ "trigger": "html.normalizeID\tfn. (ColdBox html)", "contents": "normalizeID( args=${1:any} )" },
	{ "trigger": "html.ol\tfn. (ColdBox html)", "contents": "ol( values=${1:any}, column=\"${2:}\" )" },
	{ "trigger": "html.onMissingMethod\tfn. (ColdBox html)", "contents": "onMissingMethod( missingMethodName=${1:any}, missingMethodArguments=${2:any} )" },
	{ "trigger": "html.options\tfn. (ColdBox html)", "contents": "options( values=${1:any}, column=${2:any}, nameColumn=${3:any}, selectedIndex=${4:any}, selectedValue=${5:any} )" },
	{ "trigger": "html.passIncludeExclude\tfn. (ColdBox html)", "contents": "passIncludeExclude( value=\"${1:}\", includes=\"${2:}\", excludes=\"${3:}\" )" },
	{ "trigger": "html.passwordField\tfn. (ColdBox html)", "contents": "passwordField( name=\"${1:}\", value=\"${2:}\", disabled=${3:true,false}, readonly=${4:true,false}, wrapper=\"${5:}\", groupWrapper=\"${6:}\", label=\"${7:}\", labelwrapper=\"${8:}\", labelClass=\"${9:}\", bind=${10:any}, bindProperty=${11:any} )" },
	{ "trigger": "html.prepareBaseLink\tfn. (ColdBox html)", "contents": "prepareBaseLink( noBaseURL=${1:any}, src=${2:any} )" },
	{ "trigger": "html.queryToTable\tfn. (ColdBox html)", "contents": "queryToTable( data=${1:any}, includes=\"${2:}\", excludes=\"${3:}\", buffer=${4:any} )" },
	{ "trigger": "html.radioButton\tfn. (ColdBox html)", "contents": "radioButton( name=\"${1:}\", value=\"${2:}\", disabled=${3:true,false}, checked=${4:true,false}, wrapper=\"${5:}\", groupWrapper=\"${6:}\", label=\"${7:}\", labelwrapper=\"${8:}\", labelClass=\"${9:}\", bind=${10:any}, bindProperty=${11:any} )" },
	{ "trigger": "html.resetButton\tfn. (ColdBox html)", "contents": "resetButton( name=\"${1:}\", value=\"${2:}\", disabled=${3:true,false}, wrapper=\"${4:}\", groupWrapper=\"${5:}\", label=\"${6:}\", labelwrapper=\"${7:}\", labelClass=\"${8:}\" )" },
	{ "trigger": "html.select\tfn. (ColdBox html)", "contents": "select( name=\"${1:}\", options=${2:any}, column=\"${3:}\", nameColumn=\"${4:}\", selectedIndex=${5:numeric}, selectedValue=\"${6:}\", bind=${7:any}, bindProperty=${8:any}, disabled=${9:true,false}, multiple=${10:true,false}, wrapper=\"${11:}\", groupWrapper=\"${12:}\", label=\"${13:}\", labelwrapper=\"${14:}\", data=${15:{}}, labelClass=\"${16:}\" )" },
	{ "trigger": "html.slugify\tfn. (ColdBox html)", "contents": "slugify( str=\"${1:}\", maxLength=${2:numeric}, allow=\"${3:}\" )" },
	{ "trigger": "html.startFieldset\tfn. (ColdBox html)", "contents": "startFieldset( legend=\"${1:}\", data=${2:{}} )" },
	{ "trigger": "html.startForm\tfn. (ColdBox html)", "contents": "startForm( action=\"${1:}\", name=\"${2:}\", method=\"${3:}\", multipart=${4:true,false}, ssl=${5:true,false}, noBaseURL=${6:true,false}, data=${7:{}} )" },
	{ "trigger": "html.submitButton\tfn. (ColdBox html)", "contents": "submitButton( name=\"${1:}\", value=\"${2:}\", disabled=${3:true,false}, wrapper=\"${4:}\", groupWrapper=\"${5:}\", label=\"${6:}\", labelwrapper=\"${7:}\", labelClass=\"${8:}\" )" },
	{ "trigger": "html.table\tfn. (ColdBox html)", "contents": "table( data=${1:any}, includes=\"${2:}\", excludes=\"${3:}\", name=\"${4:}\" )" },
	{ "trigger": "html.tag\tfn. (ColdBox html)", "contents": "tag( tag=\"${1:}\", content=\"${2:}\", data=${3:{}} )" },
	{ "trigger": "html.textArea\tfn. (ColdBox html)", "contents": "textArea( name=\"${1:}\", cols=${2:numeric}, rows=${3:numeric}, value=\"${4:}\", disabled=${5:true,false}, readonly=${6:true,false}, wrapper=\"${7:}\", groupWrapper=\"${8:}\", label=\"${9:}\", labelwrapper=\"${10:}\", labelClass=\"${11:}\", bind=${12:any}, bindProperty=${13:any}, data=${14:{}} )" },
	{ "trigger": "html.textField\tfn. (ColdBox html)", "contents": "textField( name=\"${1:}\", value=\"${2:}\", disabled=${3:true,false}, readonly=${4:true,false}, wrapper=\"${5:}\", groupWrapper=\"${6:}\", label=\"${7:}\", labelwrapper=\"${8:}\", labelClass=\"${9:}\", bind=${10:any}, bindProperty=${11:any} )" },
	{ "trigger": "html.toHTMLList\tfn. (ColdBox html)", "contents": "toHTMLList( tag=\"${1:}\", values=${2:any}, column=\"${3:}\", data=${4:{}} )" },
	{ "trigger": "html.ul\tfn. (ColdBox html)", "contents": "ul( values=${1:any}, column=\"${2:}\" )" },
	{ "trigger": "html.urlfield\tfn. (ColdBox html)", "contents": "urlfield( name=\"${1:}\", value=\"${2:}\", disabled=${3:true,false}, readonly=${4:true,false}, wrapper=\"${5:}\", groupWrapper=\"${6:}\", label=\"${7:}\", labelwrapper=\"${8:}\", labelClass=\"${9:}\", bind=${10:any}, bindProperty=${11:any} )" },
	{ "trigger": "html.video\tfn. (ColdBox html)", "contents": "video( src=${1:any}, width=\"${2:}\", height=\"${3:}\", poster=\"${4:}\", autoplay=${5:true,false}, controls=${6:true,false}, loop=${7:true,false}, preload=${8:true,false}, noBaseURL=${9:true,false}, name=\"${10:}\", data=${11:{}} )" },
	{ "trigger": "html.wrapTag\tfn. (ColdBox html)", "contents": "wrapTag( buffer=${1:any}, tag=${2:any}, end=${3:any} )" },
	// END Functions for Scope: html 

	// Functions for Scope: event 
	{ "trigger": "event.$dump\tfn. (ColdBox event)", "contents": "$dump( var=${1:any}, isAbort=${2:true,false} )" },
	{ "trigger": "event.buildLink\tfn. (ColdBox event)", "contents": "buildLink( linkto=\"${1:}\", translate=${2:true,false}, ssl=${3:true,false}, baseURL=\"${4:}\", queryString=\"${5:}\" )" },
	{ "trigger": "event.clearCollection\tfn. (ColdBox event)", "contents": "clearCollection( private=${1:true,false} )" },
	{ "trigger": "event.collectionAppend\tfn. (ColdBox event)", "contents": "collectionAppend( collection=${1:any}, overwrite=${2:true,false}, private=${3:true,false} )" },
	{ "trigger": "event.getCollection\tfn. (ColdBox event)", "contents": "getCollection( deepCopyFlag=${1:true,false}, private=${2:true,false} )" },
	{ "trigger": "event.getCurrentAction\tfn. (ColdBox event)", "contents": "getCurrentAction()" },
	{ "trigger": "event.getCurrentEvent\tfn. (ColdBox event)", "contents": "getCurrentEvent()" },
	{ "trigger": "event.getCurrentHandler\tfn. (ColdBox event)", "contents": "getCurrentHandler()" },
	{ "trigger": "event.getCurrentLayout\tfn. (ColdBox event)", "contents": "getCurrentLayout()" },
	{ "trigger": "event.getCurrentLayoutModule\tfn. (ColdBox event)", "contents": "getCurrentLayoutModule()" },
	{ "trigger": "event.getCurrentModule\tfn. (ColdBox event)", "contents": "getCurrentModule()" },
	{ "trigger": "event.getCurrentRoute\tfn. (ColdBox event)", "contents": "getCurrentRoute()" },
	{ "trigger": "event.getCurrentRoutedNamespace\tfn. (ColdBox event)", "contents": "getCurrentRoutedNamespace()" },
	{ "trigger": "event.getCurrentRoutedURL\tfn. (ColdBox event)", "contents": "getCurrentRoutedURL()" },
	{ "trigger": "event.getCurrentView\tfn. (ColdBox event)", "contents": "getCurrentView()" },
	{ "trigger": "event.getCurrentViewArgs\tfn. (ColdBox event)", "contents": "getCurrentViewArgs()" },
	{ "trigger": "event.getCurrentViewModule\tfn. (ColdBox event)", "contents": "getCurrentViewModule()" },
	{ "trigger": "event.getDebugPanelFlag\tfn. (ColdBox event)", "contents": "getDebugPanelFlag()" },
	{ "trigger": "event.getDefaultLayout\tfn. (ColdBox event)", "contents": "getDefaultLayout()" },
	{ "trigger": "event.getDefaultView\tfn. (ColdBox event)", "contents": "getDefaultView()" },
	{ "trigger": "event.getEventCacheableEntry\tfn. (ColdBox event)", "contents": "getEventCacheableEntry()" },
	{ "trigger": "event.getEventName\tfn. (ColdBox event)", "contents": "getEventName()" },
	{ "trigger": "event.getFolderLayouts\tfn. (ColdBox event)", "contents": "getFolderLayouts()" },
	{ "trigger": "event.getHTTPBasicCredentials\tfn. (ColdBox event)", "contents": "getHTTPBasicCredentials()" },
	{ "trigger": "event.getHTTPContent\tfn. (ColdBox event)", "contents": "getHTTPContent()" },
	{ "trigger": "event.getHTTPHeader\tfn. (ColdBox event)", "contents": "getHTTPHeader( header=\"${1:}\", default=${2:any} )" },
	{ "trigger": "event.getHTTPMethod\tfn. (ColdBox event)", "contents": "getHTTPMethod()" },
	{ "trigger": "event.getMemento\tfn. (ColdBox event)", "contents": "getMemento()" },
	{ "trigger": "event.getModuleRoot\tfn. (ColdBox event)", "contents": "getModuleRoot( module=${1:any} )" },
	{ "trigger": "event.getRegisteredLayouts\tfn. (ColdBox event)", "contents": "getRegisteredLayouts()" },
	{ "trigger": "event.getRenderData\tfn. (ColdBox event)", "contents": "getRenderData()" },
	{ "trigger": "event.getRoutedStruct\tfn. (ColdBox event)", "contents": "getRoutedStruct()" },
	{ "trigger": "event.getSelf\tfn. (ColdBox event)", "contents": "getSelf()" },
	{ "trigger": "event.getSESBaseURL\tfn. (ColdBox event)", "contents": "getSESBaseURL()" },
	{ "trigger": "event.getSize\tfn. (ColdBox event)", "contents": "getSize( private=${1:true,false} )" },
	{ "trigger": "event.getTrimValue\tfn. (ColdBox event)", "contents": "getTrimValue( name=${1:any}, defaultValue=${2:any}, private=${3:true,false} )" },
	{ "trigger": "event.getValue\tfn. (ColdBox event)", "contents": "getValue( name=${1:any}, defaultValue=${2:any}, private=${3:any} )" },
	{ "trigger": "event.getViewCacheableEntry\tfn. (ColdBox event)", "contents": "getViewCacheableEntry()" },
	{ "trigger": "event.getViewLayouts\tfn. (ColdBox event)", "contents": "getViewLayouts()" },
	{ "trigger": "event.isAjax\tfn. (ColdBox event)", "contents": "isAjax()" },
	{ "trigger": "event.isEventCacheable\tfn. (ColdBox event)", "contents": "isEventCacheable()" },
	{ "trigger": "event.isNoExecution\tfn. (ColdBox event)", "contents": "isNoExecution()" },
	{ "trigger": "event.isNoRender\tfn. (ColdBox event)", "contents": "isNoRender()" },
	{ "trigger": "event.isProxyRequest\tfn. (ColdBox event)", "contents": "isProxyRequest()" },
	{ "trigger": "event.isSES\tfn. (ColdBox event)", "contents": "isSES()" },
	{ "trigger": "event.isSSL\tfn. (ColdBox event)", "contents": "isSSL()" },
	{ "trigger": "event.isViewCacheable\tfn. (ColdBox event)", "contents": "isViewCacheable()" },
	{ "trigger": "event.noExecution\tfn. (ColdBox event)", "contents": "noExecution()" },
	{ "trigger": "event.noLayout\tfn. (ColdBox event)", "contents": "noLayout()" },
	{ "trigger": "event.noRender\tfn. (ColdBox event)", "contents": "noRender( remove=${1:true,false} )" },
	{ "trigger": "event.overrideEvent\tfn. (ColdBox event)", "contents": "overrideEvent( event=${1:any} )" },
	{ "trigger": "event.paramValue\tfn. (ColdBox event)", "contents": "paramValue( name=${1:any}, value=${2:any}, private=${3:true,false} )" },
	{ "trigger": "event.removeEventCacheableEntry\tfn. (ColdBox event)", "contents": "removeEventCacheableEntry()" },
	{ "trigger": "event.removeValue\tfn. (ColdBox event)", "contents": "removeValue( name=\"${1:}\", private=${2:true,false} )" },
	{ "trigger": "event.renderData\tfn. (ColdBox event)", "contents": "renderData( type=\"${1:}\", data=${2:any}, contentType=\"${3:}\", encoding=\"${4:}\", statusCode=${5:numeric}, statusText=\"${6:}\", location=\"${7:}\", jsonCallback=\"${8:}\", jsonQueryFormat=\"${9:}\", jsonAsText=${10:true,false}, xmlColumnList=\"${11:}\", xmlUseCDATA=${12:true,false}, xmlListDelimiter=\"${13:}\", xmlRootName=\"${14:}\", pdfArgs=${15:{}}, formats=${16:any}, formatsView=${17:any}, isBinary=${18:true,false} )" },
	{ "trigger": "event.renderWithFormats\tfn. (ColdBox event)", "contents": "renderWithFormats()" },
	{ "trigger": "event.setDefaultLayout\tfn. (ColdBox event)", "contents": "setDefaultLayout( DefaultLayout=\"${1:}\" )" },
	{ "trigger": "event.setDefaultView\tfn. (ColdBox event)", "contents": "setDefaultView( DefaultView=\"${1:}\" )" },
	{ "trigger": "event.setEventCacheableEntry\tfn. (ColdBox event)", "contents": "setEventCacheableEntry( mdCacheEntry=${1:any} )" },
	{ "trigger": "event.setHTTPHeader\tfn. (ColdBox event)", "contents": "setHTTPHeader( statusCode=\"${1:}\", statusText=\"${2:}\", name=\"${3:}\", value=\"${4:}\", charset=\"${5:}\" )" },
	{ "trigger": "event.setisSES\tfn. (ColdBox event)", "contents": "setisSES( isSES=${1:true,false} )" },
	{ "trigger": "event.setLayout\tfn. (ColdBox event)", "contents": "setLayout( name=${1:any}, module=${2:any} )" },
	{ "trigger": "event.setMemento\tfn. (ColdBox event)", "contents": "setMemento( memento=${1:any} )" },
	{ "trigger": "event.setProxyRequest\tfn. (ColdBox event)", "contents": "setProxyRequest()" },
	{ "trigger": "event.setRoutedStruct\tfn. (ColdBox event)", "contents": "setRoutedStruct( routedStruct=${1:{}} )" },
	{ "trigger": "event.setSESBaseURL\tfn. (ColdBox event)", "contents": "setSESBaseURL( sesBaseURL=\"${1:}\" )" },
	{ "trigger": "event.setValue\tfn. (ColdBox event)", "contents": "setValue( name=${1:any}, value=${2:any}, private=${3:true,false} )" },
	{ "trigger": "event.setView\tfn. (ColdBox event)", "contents": "setView( view=${1:any}, nolayout=${2:true,false}, cache=${3:true,false}, cacheTimeout=${4:any}, cacheLastAccessTimeout=${5:any}, cacheSuffix=${6:any}, cacheProvider=${7:any}, layout=${8:any}, module=${9:any}, args=${10:{}} )" },
	{ "trigger": "event.setViewCacheableEntry\tfn. (ColdBox event)", "contents": "setViewCacheableEntry( mdCacheEntry=${1:any} )" },
	{ "trigger": "event.showDebugPanel\tfn. (ColdBox event)", "contents": "showDebugPanel( show=${1:true,false} )" },
	{ "trigger": "event.throw\tfn. (ColdBox event)", "contents": "throw( message=\"${1:}\", detail=\"${2:}\", type=\"${3:}\" )" },
	{ "trigger": "event.valueExists\tfn. (ColdBox event)", "contents": "valueExists( name=${1:any}, private=${2:true,false} )" },
	// END Functions for Scope: event 

	// Functions for Scope: wirebox 
	{ "trigger": "wirebox.autowire\tfn. (ColdBox wirebox)", "contents": "autowire( target=${1:any}, mapping=${2:any}, targetID=${3:any}, annotationCheck=${4:any} )" },
	{ "trigger": "wirebox.buildBinder\tfn. (ColdBox wirebox)", "contents": "buildBinder( binder=${1:any}, properties=${2:any} )" },
	{ "trigger": "wirebox.buildInstance\tfn. (ColdBox wirebox)", "contents": "buildInstance( mapping=${1:any}, initArguments=${2:any} )" },
	{ "trigger": "wirebox.clearSingletons\tfn. (ColdBox wirebox)", "contents": "clearSingletons()" },
	{ "trigger": "wirebox.configureCacheBox\tfn. (ColdBox wirebox)", "contents": "configureCacheBox( config=${1:any} )" },
	{ "trigger": "wirebox.configureEventManager\tfn. (ColdBox wirebox)", "contents": "configureEventManager()" },
	{ "trigger": "wirebox.configureLogBox\tfn. (ColdBox wirebox)", "contents": "configureLogBox( configPath=${1:any} )" },
	{ "trigger": "wirebox.containsInstance\tfn. (ColdBox wirebox)", "contents": "containsInstance( name=${1:any} )" },
	{ "trigger": "wirebox.doScopeRegistration\tfn. (ColdBox wirebox)", "contents": "doScopeRegistration()" },
	{ "trigger": "wirebox.getBinder\tfn. (ColdBox wirebox)", "contents": "getBinder()" },
	{ "trigger": "wirebox.getBuilder\tfn. (ColdBox wirebox)", "contents": "getBuilder()" },
	{ "trigger": "wirebox.getCacheBox\tfn. (ColdBox wirebox)", "contents": "getCacheBox()" },
	{ "trigger": "wirebox.getColdbox\tfn. (ColdBox wirebox)", "contents": "getColdbox()" },
	{ "trigger": "wirebox.getEventManager\tfn. (ColdBox wirebox)", "contents": "getEventManager()" },
	{ "trigger": "wirebox.getInjectorID\tfn. (ColdBox wirebox)", "contents": "getInjectorID()" },
	{ "trigger": "wirebox.getInstance\tfn. (ColdBox wirebox)", "contents": "getInstance( name=${1:any}, dsl=${2:any}, initArguments=${3:any}, targetObject=${4:any} )" },
	{ "trigger": "wirebox.getLogBox\tfn. (ColdBox wirebox)", "contents": "getLogBox()" },
	{ "trigger": "wirebox.getObjectPopulator\tfn. (ColdBox wirebox)", "contents": "getObjectPopulator()" },
	{ "trigger": "wirebox.getParent\tfn. (ColdBox wirebox)", "contents": "getParent()" },
	{ "trigger": "wirebox.getScope\tfn. (ColdBox wirebox)", "contents": "getScope( scope=${1:any} )" },
	{ "trigger": "wirebox.getScopeRegistration\tfn. (ColdBox wirebox)", "contents": "getScopeRegistration()" },
	{ "trigger": "wirebox.getScopes\tfn. (ColdBox wirebox)", "contents": "getScopes()" },
	{ "trigger": "wirebox.getScopeStorage\tfn. (ColdBox wirebox)", "contents": "getScopeStorage()" },
	{ "trigger": "wirebox.getUtil\tfn. (ColdBox wirebox)", "contents": "getUtil()" },
	{ "trigger": "wirebox.getVersion\tfn. (ColdBox wirebox)", "contents": "getVersion()" },
	{ "trigger": "wirebox.injectTarget\tfn. (ColdBox wirebox)", "contents": "injectTarget( target=${1:any}, propertyName=${2:any}, propertyObject=${3:any}, scope=${4:any}, argName=${5:any} )" },
	{ "trigger": "wirebox.isCacheBoxLinked\tfn. (ColdBox wirebox)", "contents": "isCacheBoxLinked()" },
	{ "trigger": "wirebox.isColdBoxLinked\tfn. (ColdBox wirebox)", "contents": "isColdBoxLinked()" },
	{ "trigger": "wirebox.locateInstance\tfn. (ColdBox wirebox)", "contents": "locateInstance( name=${1:any} )" },
	{ "trigger": "wirebox.locateScopedSelf\tfn. (ColdBox wirebox)", "contents": "locateScopedSelf()" },
	{ "trigger": "wirebox.processAfterCompleteDI\tfn. (ColdBox wirebox)", "contents": "processAfterCompleteDI( targetObject=${1:any}, DICompleteMethods=${2:any} )" },
	{ "trigger": "wirebox.processInjection\tfn. (ColdBox wirebox)", "contents": "processInjection( targetObject=${1:any}, DIData=${2:any}, targetID=${3:any} )" },
	{ "trigger": "wirebox.processMixins\tfn. (ColdBox wirebox)", "contents": "processMixins( targetObject=${1:any}, mapping=${2:any} )" },
	{ "trigger": "wirebox.processProviderMethods\tfn. (ColdBox wirebox)", "contents": "processProviderMethods( targetObject=${1:any}, mapping=${2:any} )" },
	{ "trigger": "wirebox.registerDSL\tfn. (ColdBox wirebox)", "contents": "registerDSL( namespace=${1:any}, path=${2:any} )" },
	{ "trigger": "wirebox.registerListeners\tfn. (ColdBox wirebox)", "contents": "registerListeners()" },
	{ "trigger": "wirebox.registerNewInstance\tfn. (ColdBox wirebox)", "contents": "registerNewInstance( name=${1:any}, instancePath=${2:any} )" },
	{ "trigger": "wirebox.registerScopes\tfn. (ColdBox wirebox)", "contents": "registerScopes()" },
	{ "trigger": "wirebox.removeFromScope\tfn. (ColdBox wirebox)", "contents": "removeFromScope()" },
	{ "trigger": "wirebox.setParent\tfn. (ColdBox wirebox)", "contents": "setParent( injector=${1:any} )" },
	{ "trigger": "wirebox.shutdown\tfn. (ColdBox wirebox)", "contents": "shutdown()" },
	// END Functions for Scope: wirebox 

	// Functions for Scope: log 
	{ "trigger": "log.addAppender\tfn. (ColdBox log)", "contents": "addAppender( newAppender=${1:any} )" },
	{ "trigger": "log.appenderExists\tfn. (ColdBox log)", "contents": "appenderExists( name=${1:any} )" },
	{ "trigger": "log.canDebug\tfn. (ColdBox log)", "contents": "canDebug()" },
	{ "trigger": "log.canError\tfn. (ColdBox log)", "contents": "canError()" },
	{ "trigger": "log.canFatal\tfn. (ColdBox log)", "contents": "canFatal()" },
	{ "trigger": "log.canInfo\tfn. (ColdBox log)", "contents": "canInfo()" },
	{ "trigger": "log.canLog\tfn. (ColdBox log)", "contents": "canLog( level=${1:any} )" },
	{ "trigger": "log.canWarn\tfn. (ColdBox log)", "contents": "canWarn()" },
	{ "trigger": "log.debug\tfn. (ColdBox log)", "contents": "debug( message=${1:any}, extraInfo=${2:any} )" },
	{ "trigger": "log.error\tfn. (ColdBox log)", "contents": "error( message=${1:any}, extraInfo=${2:any} )" },
	{ "trigger": "log.fatal\tfn. (ColdBox log)", "contents": "fatal( message=${1:any}, extraInfo=${2:any} )" },
	{ "trigger": "log.getAppender\tfn. (ColdBox log)", "contents": "getAppender( name=${1:any} )" },
	{ "trigger": "log.getAppenders\tfn. (ColdBox log)", "contents": "getAppenders()" },
	{ "trigger": "log.getCategory\tfn. (ColdBox log)", "contents": "getCategory()" },
	{ "trigger": "log.getlevelMax\tfn. (ColdBox log)", "contents": "getlevelMax()" },
	{ "trigger": "log.getlevelMin\tfn. (ColdBox log)", "contents": "getlevelMin()" },
	{ "trigger": "log.getRootLogger\tfn. (ColdBox log)", "contents": "getRootLogger()" },
	{ "trigger": "log.hasAppenders\tfn. (ColdBox log)", "contents": "hasAppenders()" },
	{ "trigger": "log.info\tfn. (ColdBox log)", "contents": "info( message=${1:any}, extraInfo=${2:any} )" },
	{ "trigger": "log.logMessage\tfn. (ColdBox log)", "contents": "logMessage( message=${1:any}, severity=${2:any}, extraInfo=${3:any} )" },
	{ "trigger": "log.removeAllAppenders\tfn. (ColdBox log)", "contents": "removeAllAppenders()" },
	{ "trigger": "log.removeAppender\tfn. (ColdBox log)", "contents": "removeAppender( name=${1:any} )" },
	{ "trigger": "log.setCategory\tfn. (ColdBox log)", "contents": "setCategory( category=${1:any} )" },
	{ "trigger": "log.setLevelMax\tfn. (ColdBox log)", "contents": "setLevelMax( levelMax=${1:any} )" },
	{ "trigger": "log.setLevelMin\tfn. (ColdBox log)", "contents": "setLevelMin( levelMin=${1:any} )" },
	{ "trigger": "log.setRootLogger\tfn. (ColdBox log)", "contents": "setRootLogger( RootLogger=${1:any} )" },
	{ "trigger": "log.warn\tfn. (ColdBox log)", "contents": "warn( message=${1:any}, extraInfo=${2:any} )" },
	// END Functions for Scope: log 

	// Functions for Scope: cachebox 
	{ "trigger": "cachebox.addCache\tfn. (ColdBox cachebox)", "contents": "addCache( cache=${1:any} )" },
	{ "trigger": "cachebox.addDefaultCache\tfn. (ColdBox cachebox)", "contents": "addDefaultCache( name=${1:any} )" },
	{ "trigger": "cachebox.cacheExists\tfn. (ColdBox cachebox)", "contents": "cacheExists( name=${1:any} )" },
	{ "trigger": "cachebox.clearAll\tfn. (ColdBox cachebox)", "contents": "clearAll()" },
	{ "trigger": "cachebox.configureEventManager\tfn. (ColdBox cachebox)", "contents": "configureEventManager()" },
	{ "trigger": "cachebox.configureLogBox\tfn. (ColdBox cachebox)", "contents": "configureLogBox()" },
	{ "trigger": "cachebox.createCache\tfn. (ColdBox cachebox)", "contents": "createCache( name=${1:any}, provider=${2:any}, properties=${3:any} )" },
	{ "trigger": "cachebox.doScopeRegistration\tfn. (ColdBox cachebox)", "contents": "doScopeRegistration()" },
	{ "trigger": "cachebox.expireAll\tfn. (ColdBox cachebox)", "contents": "expireAll()" },
	{ "trigger": "cachebox.getCache\tfn. (ColdBox cachebox)", "contents": "getCache( name=${1:any} )" },
	{ "trigger": "cachebox.getCacheNames\tfn. (ColdBox cachebox)", "contents": "getCacheNames()" },
	{ "trigger": "cachebox.getCaches\tfn. (ColdBox cachebox)", "contents": "getCaches()" },
	{ "trigger": "cachebox.getColdbox\tfn. (ColdBox cachebox)", "contents": "getColdbox()" },
	{ "trigger": "cachebox.getConfig\tfn. (ColdBox cachebox)", "contents": "getConfig()" },
	{ "trigger": "cachebox.getDefaultCache\tfn. (ColdBox cachebox)", "contents": "getDefaultCache()" },
	{ "trigger": "cachebox.getEventManager\tfn. (ColdBox cachebox)", "contents": "getEventManager()" },
	{ "trigger": "cachebox.getFactoryID\tfn. (ColdBox cachebox)", "contents": "getFactoryID()" },
	{ "trigger": "cachebox.getLogBox\tfn. (ColdBox cachebox)", "contents": "getLogBox()" },
	{ "trigger": "cachebox.getScopeRegistration\tfn. (ColdBox cachebox)", "contents": "getScopeRegistration()" },
	{ "trigger": "cachebox.getUtil\tfn. (ColdBox cachebox)", "contents": "getUtil()" },
	{ "trigger": "cachebox.getVersion\tfn. (ColdBox cachebox)", "contents": "getVersion()" },
	{ "trigger": "cachebox.isColdBoxLinked\tfn. (ColdBox cachebox)", "contents": "isColdBoxLinked()" },
	{ "trigger": "cachebox.reapAll\tfn. (ColdBox cachebox)", "contents": "reapAll()" },
	{ "trigger": "cachebox.registerCache\tfn. (ColdBox cachebox)", "contents": "registerCache( cache=${1:any} )" },
	{ "trigger": "cachebox.registerListeners\tfn. (ColdBox cachebox)", "contents": "registerListeners()" },
	{ "trigger": "cachebox.removeAll\tfn. (ColdBox cachebox)", "contents": "removeAll()" },
	{ "trigger": "cachebox.removeCache\tfn. (ColdBox cachebox)", "contents": "removeCache( name=${1:any} )" },
	{ "trigger": "cachebox.removeFromScope\tfn. (ColdBox cachebox)", "contents": "removeFromScope()" },
	{ "trigger": "cachebox.replaceCache\tfn. (ColdBox cachebox)", "contents": "replaceCache( cache=${1:any}, decoratedCache=${2:any} )" },
	{ "trigger": "cachebox.shutdown\tfn. (ColdBox cachebox)", "contents": "shutdown()" },
	{ "trigger": "cachebox.shutdownCache\tfn. (ColdBox cachebox)", "contents": "shutdownCache( name=${1:any} )" },
	// END Functions for Scope: cachebox 

	// Functions for Scope: controller 
	{ "trigger": "controller.getAppHash\tfn. (ColdBox controller)", "contents": "getAppHash()" },
	{ "trigger": "controller.getAppKey\tfn. (ColdBox controller)", "contents": "getAppKey()" },
	{ "trigger": "controller.getAppRootPath\tfn. (ColdBox controller)", "contents": "getAppRootPath()" },
	{ "trigger": "controller.getCacheBox\tfn. (ColdBox controller)", "contents": "getCacheBox()" },
	{ "trigger": "controller.getCFMLEngine\tfn. (ColdBox controller)", "contents": "getCFMLEngine()" },
	{ "trigger": "controller.getColdboxInitiated\tfn. (ColdBox controller)", "contents": "getColdboxInitiated()" },
	{ "trigger": "controller.getColdboxOCM\tfn. (ColdBox controller)", "contents": "getColdboxOCM( cacheName=${1:any} )" },
	{ "trigger": "controller.getColdboxSettings\tfn. (ColdBox controller)", "contents": "getColdboxSettings()" },
	{ "trigger": "controller.getConfigSettings\tfn. (ColdBox controller)", "contents": "getConfigSettings()" },
	{ "trigger": "controller.getExceptionService\tfn. (ColdBox controller)", "contents": "getExceptionService()" },
	{ "trigger": "controller.getHandlerService\tfn. (ColdBox controller)", "contents": "getHandlerService()" },
	{ "trigger": "controller.getInterceptorService\tfn. (ColdBox controller)", "contents": "getInterceptorService()" },
	{ "trigger": "controller.getLoaderService\tfn. (ColdBox controller)", "contents": "getLoaderService()" },
	{ "trigger": "controller.getLogBox\tfn. (ColdBox controller)", "contents": "getLogBox()" },
	{ "trigger": "controller.getMemento\tfn. (ColdBox controller)", "contents": "getMemento()" },
	{ "trigger": "controller.getModuleService\tfn. (ColdBox controller)", "contents": "getModuleService()" },
	{ "trigger": "controller.getPlugin\tfn. (ColdBox controller)", "contents": "getPlugin( plugin=${1:any}, customPlugin=${2:any}, newInstance=${3:any}, module=${4:any}, init=${5:any} )" },
	{ "trigger": "controller.getPluginService\tfn. (ColdBox controller)", "contents": "getPluginService()" },
	{ "trigger": "controller.getRequestService\tfn. (ColdBox controller)", "contents": "getRequestService()" },
	{ "trigger": "controller.getServices\tfn. (ColdBox controller)", "contents": "getServices()" },
	{ "trigger": "controller.getSetting\tfn. (ColdBox controller)", "contents": "getSetting( name=${1:any}, FWSetting=${2:any}, defaultValue=${3:any} )" },
	{ "trigger": "controller.getSettingStructure\tfn. (ColdBox controller)", "contents": "getSettingStructure( FWSetting=${1:any}, deepCopyFlag=${2:any} )" },
	{ "trigger": "controller.getUtil\tfn. (ColdBox controller)", "contents": "getUtil()" },
	{ "trigger": "controller.getWireBox\tfn. (ColdBox controller)", "contents": "getWireBox()" },
	{ "trigger": "controller.invoker\tfn. (ColdBox controller)", "contents": "invoker( target=${1:any}, method=${2:any}, argCollection=${3:any}, private=${4:any} )" },
	{ "trigger": "controller.locateDirectoryPath\tfn. (ColdBox controller)", "contents": "locateDirectoryPath( pathToCheck=${1:any} )" },
	{ "trigger": "controller.locateFilePath\tfn. (ColdBox controller)", "contents": "locateFilePath( pathToCheck=${1:any} )" },
	{ "trigger": "controller.persistVariables\tfn. (ColdBox controller)", "contents": "persistVariables( persist=${1:any}, persistStruct=${2:any} )" },
	{ "trigger": "controller.runEvent\tfn. (ColdBox controller)", "contents": "runEvent( event=${1:any}, prepostExempt=${2:any}, private=${3:any}, default=${4:any}, eventArguments=${5:any} )" },
	{ "trigger": "controller.sendRelocation\tfn. (ColdBox controller)", "contents": "sendRelocation( url=${1:any}, addtoken=${2:any}, statusCode=${3:any} )" },
	{ "trigger": "controller.setAppHash\tfn. (ColdBox controller)", "contents": "setAppHash( appHash=${1:any} )" },
	{ "trigger": "controller.setAppRootPath\tfn. (ColdBox controller)", "contents": "setAppRootPath( appRootPath=${1:any} )" },
	{ "trigger": "controller.setCacheBox\tfn. (ColdBox controller)", "contents": "setCacheBox( cacheBox=${1:any} )" },
	{ "trigger": "controller.setColdboxInitiated\tfn. (ColdBox controller)", "contents": "setColdboxInitiated( coldboxInitiated=${1:any} )" },
	{ "trigger": "controller.setColdboxOCM\tfn. (ColdBox controller)", "contents": "setColdboxOCM( coldboxOCM=${1:any} )" },
	{ "trigger": "controller.setColdboxSettings\tfn. (ColdBox controller)", "contents": "setColdboxSettings( coldboxSettings=${1:any} )" },
	{ "trigger": "controller.setConfigSettings\tfn. (ColdBox controller)", "contents": "setConfigSettings( configSettings=${1:any} )" },
	{ "trigger": "controller.setHandlerService\tfn. (ColdBox controller)", "contents": "setHandlerService( handlerService=${1:any} )" },
	{ "trigger": "controller.setInterceptorService\tfn. (ColdBox controller)", "contents": "setInterceptorService( interceptorService=${1:any} )" },
	{ "trigger": "controller.setLoaderService\tfn. (ColdBox controller)", "contents": "setLoaderService( loaderService=${1:any} )" },
	{ "trigger": "controller.setLog\tfn. (ColdBox controller)", "contents": "setLog( logger=${1:any} )" },
	{ "trigger": "controller.setLogBox\tfn. (ColdBox controller)", "contents": "setLogBox( logBox=${1:any} )" },
	{ "trigger": "controller.setModuleService\tfn. (ColdBox controller)", "contents": "setModuleService( moduleService=${1:any} )" },
	{ "trigger": "controller.setNextEvent\tfn. (ColdBox controller)", "contents": "setNextEvent( event=\"${1:}\", queryString=\"${2:}\", addToken=${3:true,false}, persist=\"${4:}\", persistStruct=${5:{}}, ssl=${6:true,false}, baseURL=\"${7:}\", postProcessExempt=${8:true,false}, URL=\"${9:}\", URI=\"${10:}\", statusCode=${11:numeric} )" },
	{ "trigger": "controller.setPluginService\tfn. (ColdBox controller)", "contents": "setPluginService( pluginService=${1:Any} )" },
	{ "trigger": "controller.setRequestService\tfn. (ColdBox controller)", "contents": "setRequestService( requestService=${1:any} )" },
	{ "trigger": "controller.setSetting\tfn. (ColdBox controller)", "contents": "setSetting( name=${1:any}, value=${2:any} )" },
	{ "trigger": "controller.settingExists\tfn. (ColdBox controller)", "contents": "settingExists( name=${1:any}, FWSetting=${2:any} )" },
	{ "trigger": "controller.setWireBox\tfn. (ColdBox controller)", "contents": "setWireBox( wireBox=${1:any} )" },
	{ "trigger": "controller.updateSSL\tfn. (ColdBox controller)", "contents": "updateSSL( inURL=${1:any}, ssl=${2:any} )" },
	{ "trigger": "controller.validateAction\tfn. (ColdBox controller)", "contents": "validateAction( action=${1:any}, inclusion=${2:any}, exclusion=${3:any} )" }
	// END Functions for Scope: controller 

    ]
}
