"Severity","Appender","Date","Time","Category","Message"
"DEBUG","FILEAPPENDER","06/20/2014","10:15:54","coldbox.system.ioc.scopes.Singleton","Object: (interceptor-ses) constructed and stored in singleton cache. ThreadSafe=true"
"DEBUG","FILEAPPENDER","06/20/2014","10:15:54","coldbox.system.web.services.InterceptorService","Registering SES on 'onRequestCapture' interception point"
"DEBUG","FILEAPPENDER","06/20/2014","10:15:54","coldbox.system.web.services.InterceptorService","Registering ModuleConfig:cbtest1 on 'onPio' interception point"
"DEBUG","FILEAPPENDER","06/20/2014","10:15:54","coldbox.system.web.services.InterceptorService","Registering ModuleConfig:cbtest1 on 'preProcess' interception point"
"DEBUG","FILEAPPENDER","06/20/2014","10:15:54","coldbox.system.ioc.scopes.Singleton","Object: (interceptor-simple) not found in singleton cache, beggining construction."
"DEBUG","FILEAPPENDER","06/20/2014","10:15:54","coldbox.system.ioc.Injector","Instance object built: coldbox.system.Interceptor:coldbox.system.Interceptor"
"DEBUG","FILEAPPENDER","06/20/2014","10:15:54","coldbox.system.web.context.InterceptorState","Starting 'afterInstanceAutowire' chain with 1 interceptors"
"DEBUG","FILEAPPENDER","06/20/2014","10:15:54","coldbox.system.web.context.InterceptorState","Interception started for: 'afterInstanceAutowire', key: mixer"
"DEBUG","FILEAPPENDER","06/20/2014","10:15:54","coldbox.system.aop.Mixer","Aspect class matching dictionary built for mapping: coldbox.system.interceptor, aspects: []"
"DEBUG","FILEAPPENDER","06/20/2014","10:15:54","coldbox.system.web.context.InterceptorState","Interception ended for: 'afterInstanceAutowire', key: mixer"
"DEBUG","FILEAPPENDER","06/20/2014","10:15:54","coldbox.system.web.context.InterceptorState","Finished 'afterInstanceAutowire' execution chain"
"DEBUG","FILEAPPENDER","06/20/2014","10:15:54","coldbox.system.ioc.Injector","Finalized Autowire for: coldbox.system.Interceptor ExtraInfo:{METADATA={{INHERITANCETRAIL={[coldbox.system.Interceptor, coldbox.system.FrameworkSupertype, railo-context.Component]}, hint={This is the base Interceptor class}, remoteAddress={http://railocboxdev.jfetmac:80/coldbox/system/Interceptor.cfc?wsdl}, output={false}, path={/Users/lmajano/Sites/cboxdev/core/coldbox/system/Interceptor.cfc}, displayname={Component}, synchronized={false}, fullname={coldbox.system.Interceptor}, properties={[]}, name={coldbox.system.Interceptor}, accessors={false}, type={component}, persistent={false}, serializable={false}, functions={[{access={public}, hint={Get the memento of this object}, returnFormat={wddx}, returntype={any}, output={false}, closure={false}, parameters={[]}, name={getMemento}, owner={/Users/lmajano/Sites/cboxdev/core/coldbox/system/FrameworkSupertype.cfc}, description={}}, {access={public}, hint={I will return to you a datasourceBean according to the alias of the datasource you wish to get from the configstruct}, returnFormat={wddx}, returntype={any}, output={false}, closure={false}, parameters={[{required={false}, hint={The alias of the datasource to get from the configstruct (alias property in the config file)}, name={alias}, type={any}}]}, name={getDatasource}, colddoc:generic={coldbox.system.core.db.DatasourceBean}, owner={/Users/lmajano/Sites/cboxdev/core/coldbox/system/FrameworkSupertype.cfc}, description={}}, {access={public}, hint={Create or retrieve model objects by convention}, returnFormat={wddx}, returntype={any}, output={false}, closure={false}, parameters={[{required={false}, hint={The mapping name or CFC instance path to try to build up}, name={name}, type={any}}, {required={false}, hint={The dsl string to use to retrieve the instance model object, mutually exclusive with 'name'}, name={dsl}, type={any}}, {default={[runtime expression]}, required={false}, hint={The constructor structure of arguments to passthrough when initializing the instance}, colddoc:generic={struct}, name={initArguments}, type={any}}]}, name={getModel}, owner={/Users/lmajano/Sites/cboxdev/core/coldbox/system/FrameworkSupertype.cfc}, description={}}, {access={public}, hint={Create or retrieve an object from WireBox}, returnFormat={wddx}, returntype={any}, output={false}, closure={false}, parameters={[{required={false}, hint={The mapping name or CFC instance path to try to build up}, name={name}, type={any}}, {required={false}, hint={The dsl string to use to retrieve the instance model object, mutually exclusive with 'name'}, name={dsl}, type={any}}, {default={[runtime expression]}, required={false}, hint={The constructor structure of arguments to passthrough when initializing the instance}, colddoc:generic={struct}, name={initArguments}, type={any}}]}, name={getInstance}, owner={/Users/lmajano/Sites/cboxdev/core/coldbox/system/FrameworkSupertype.cfc}, description={}}, {access={public}, hint={Populate a named or instantiated model (java/cfc) from the request collection items}, returnFormat={wddx}, returntype={any}, output={false}, closure={false}, parameters={[{required={true}, hint={The name of the model to get and populate or the acutal model object. If you already have an instance of a model, then use the populateBean() method}, name={model}, type={any}}, {default={}, required={false}, hint={Use scope injection instead of setters population. Ex: scope=variables.instance.}, name={scope}, type={any}}, {default={false}, required={false}, hint={If set to true, the setter method will be called even if it does not exist in the bean}, colddoc:generic={Boolean}, name={trustedSetter}, type={boolean}}, {default={}, required={false}, hint={A list of keys to include in the population}, name={include}, type={any}}, {default={}, required={false}, hint={A list of keys to exclude in the population}, name={exclude}, type={any}}, {default={false}, required={false}, hint={Ignore empty values on populations, great for ORM population}, name={ignoreEmpty}, type={boolean}}, {default={}, required={false}, hint={A list of keys to NULL when empty}, name={nullEmptyInclude}, type={string}}, {default={}, required={false}, hint={A list of keys to NOT NULL when empty}, name={nullEmptyExclude}, type={string}}, {default={false}, required={false}, hint={Automatically attempt to compose relationships from memento}, name={composeRelationships}, type={boolean}}]}, name={populateModel}, owner={/Users/lmajano/Sites/cboxdev/core/coldbox/system/FrameworkSupertype.cfc}, description={}}, {access={public}, hint={Renders all kinds of views}, returnFormat={wddx}, returntype={any}, output={false}, closure={false}, parameters={[{required={true}, name={view}, type={any}}, {required={false}, hint={True if you want to cache the view.}, name={cache}, type={any}}, {required={false}, hint={The cache timeout}, name={cacheTimeout}, type={any}}, {required={false}, hint={The last access timeout}, name={cacheLastAccessTimeout}, type={any}}, {required={false}, hint={Add a cache suffix to the view cache entry. Great for multi-domain caching or i18n caching.}, name={cacheSuffix}, type={any}}, {required={false}, hint={Explicitly render a layout from this module}, name={module}, type={any}}, {default={[runtime expression]}, required={false}, hint={An optional set of arguments that will be available to this layouts/view rendering ONLY}, name={args}, type={struct}}, {required={false}, hint={A collection to use by this Renderer to render the view as many times as the items in the collection}, name={collection}, type={any}}, {required={false}, hint={The name of the collection variable in the partial rendering.  If not passed, we will use the name of the view by convention}, name={collectionAs}, type={any}}]}, name={renderView}, owner={/Users/lmajano/Sites/cboxdev/core/coldbox/system/FrameworkSupertype.cfc}, description={}}, {access={public}, hint={Renders external views}, returnFormat={wddx}, returntype={any}, output={false}, closure={false}, parameters={[{required={true}, hint={The full path to the view. This can be an expanded path or relative. Include extension.}, name={view}, type={any}}, {required={false}, hint={True if you want to cache the view.}, name={cache}, type={any}}, {required={false}, hint={The cache timeout}, name={cacheTimeout}, type={any}}, {required={false}, hint={The last access timeout}, name={cacheLastAccessTimeout}, type={any}}, {required={false}, hint={Add a cache suffix to the view cache entry. Great for multi-domain caching or i18n caching.}, name={cacheSuffix}, type={any}}, {default={[runtime expression]}, required={false}, hint={An optional set of arguments that will be available to this layouts/view rendering ONLY}, name={args}, type={struct}}]}, name={renderExternalView}, owner={/Users/lmajano/Sites/cboxdev/core/coldbox/system/FrameworkSupertype.cfc}, description={}}, {access={public}, hint={Renders a layout with view combinations}, returnFormat={wddx}, returntype={any}, output={false}, closure={false}, parameters={[{required={false}, hint={The explicit layout to use in rendering.}, name={layout}, type={any}}, {required={false}, hint={The name of the view to passthrough as an argument so you can refer to it as arguments.view}, name={view}, type={any}}, {required={false}, hint={Explicitly render a layout from this module}, name={module}, type={any}}, {default={[runtime expression]}, required={false}, hint={An optional set of arguments that will be available to this layouts/view rendering ONLY}, name={args}, type={struct}}]}, name={renderLayout}, owner={/Users/lmajano/Sites/cboxdev/core/coldbox/system/FrameworkSupertype.cfc}, description={}}, {access={public}, hint={Facade}, returnFormat={wddx}, returntype={any}, output={false}, closure={false}, parameters={[{required={true}, hint={The plugin name as a string}, name={plugin}, type={any}}, {default={false}, required={false}, colddoc:generic={Boolean}, name={newInstance}, type={any}}, {default={}, required={false}, hint={The module to retrieve the plugin from}, name={module}, type={any}}, {default={true}, required={false}, hint={Auto init() the plugin upon construction}, colddoc:generic={Boolean}, name={init}, type={any}}]}, name={getMyPlugin}, owner={/Users/lmajano/Sites/cboxdev/core/coldbox/system/FrameworkSupertype.cfc}, description={}}, {access={public}, hint={Facade}, returnFormat={wddx}, returntype={any}, output={false}, closure={false}, parameters={[{required={false}, hint={The Plugin object's name to instantiate, as a string}, name={plugin}, type={any}}, {default={false}, required={false}, colddoc:generic={Boolean}, name={customPlugin}, type={any}}, {default={false}, required={false}, colddoc:generic={Boolean}, name={newInstance}, type={any}}, {default={}, required={false}, hint={The module to retrieve the plugin from}, name={module}, type={any}}, {default={true}, required={false}, hint={Auto init() the plugin upon construction}, colddoc:generic={Boolean}, name={init}, type={any}}]}, name={getPlugin}, owner={/Users/lmajano/Sites/cboxdev/core/coldbox/system/FrameworkSupertype.cfc}, description={}}, {access={public}, hint={Get an interceptor}, returnFormat={wddx}, returntype={any}, output={false}, closure={false}, parameters={[{required={false}, hint={The name of the interceptor to search for}, name={interceptorName}, type={any}}, {default={false}, required={false}, hint={By default we search the cache for the interceptor reference. If true, we search all the registered interceptor states for a match.}, colddoc:generic={Boolean}, name={deepSearch}, type={any}}]}, name={getInterceptor}, owner={/Users/lmajano/Sites/cboxdev/core/coldbox/system/FrameworkSupertype.cfc}, description={}}, {access={public}, hint={Announce an interception to the system. If you use the asynchronous facilities, you will get a thread structure report as a result.}, returnFormat={wddx}, returntype={any}, output={true}, closure={false}, parameters={[{required={true}, hint={The interception state to execute}, name={state}, type={any}}, {required={false}, hint={A data structure used to pass intercepted information.}, name={interceptData}, type={any}}, {default={false}, required={false}, hint={If true, the entire interception chain will be ran in a separate thread.}, name={async}, type={boolean}}, {default={false}, required={false}, hint={If true, each interceptor in the interception chain will be ran in a separate thread and then joined together at the end.}, name={asyncAll}, type={boolean}}, {default={true}, required={false}, hint={If true, each interceptor in the interception chain will be ran in a separate thread and joined together at the end by default.  If you set this flag to false then there will be no joining and waiting for the threads to finalize.}, name={asyncAllJoin}, type={boolean}}, {default={NORMAL}, required={false}, hint={The thread priority to be used. Either LOW, NORMAL or HIGH. The default value is NORMAL}, name={asyncPriority}, type={string}}, {default={0}, required={false}, hint={The timeout in milliseconds for the join thread to wait for interceptor threads to finish.  By default there is no timeout.}, name={asyncJoinTimeout}, type={numeric}}]}, name={announceInterception}, owner={/Users/lmajano/Sites/cboxdev/core/coldbox/system/FrameworkSupertype.cfc}, description={}}, {access={public}, hint={Get a CacheBox Cache of type: coldbox.system.cache.IColdboxApplicationCache}, returnFormat={wddx}, returntype={any}, output={false}, closure={false}, parameters={[{default={default}, required={false}, hint={The cache name to retrieve}, name={cacheName}, type={any}}]}, name={getColdboxOCM}, colddoc:generic={coldbox.system.cache.IColdboxApplicationCache}, owner={/Users/lmajano/Sites/cboxdev/core/coldbox/system/FrameworkSupertype.cfc}, description={}}, {access={public}, hint={Facade}, returnFormat={wddx}, returntype={struct}, output={false}, closure={false}, parameters={[{default={false}, required={false}, name={FWSetting}, type={boolean}}, {default={false}, required={false}, name={DeepCopyFlag}, type={boolean}}]}, name={getSettingStructure}, owner={/Users/lmajano/Sites/cboxdev/core/coldbox/system/FrameworkSupertype.cfc}, description={}}, {access={public}, hint={Facade}, returnFormat={wddx}, returntype={any}, output={false}, closure={false}, parameters={[{required={true}, name={name}, type={any}}, {default={false}, required={false}, name={FWSetting}, type={boolean}}, {required={false}, hint={Default value to return if not found.}, name={defaultValue}, type={any}}]}, name={getSetting}, owner={/Users/lmajano/Sites/cboxdev/core/coldbox/system/FrameworkSupertype.cfc}, description={}}, {access={public}, hint={Facade}, returnFormat={wddx}, returntype={boolean}, output={false}, closure={false}, parameters={[{required={true}, name={name}, type={any}}, {default={false}, required={false}, name={FWSetting}, type={boolean}}]}, name={settingExists}, owner={/Users/lmajano/Sites/cboxdev/core/coldbox/system/FrameworkSupertype.cfc}, description={}}, {access={public}, hint={Facade}, returnFormat={wddx}, returntype={void}, output={false}, closure={false}, parameters={[{required={true}, name={name}, type={any}}, {required={true}, name={value}, type={any}}]}, name={setSetting}, owner={/Users/lmajano/Sites/cboxdev/core/coldbox/system/FrameworkSupertype.cfc}, description={}}, {access={public}, hint={Get a module's setting structure if it exists}, returnFormat={wddx}, returntype={any}, output={false}, closure={false}, parameters={[{required={true}, hint={The module name}, name={module}, type={any}}]}, name={getModuleSettings}, owner={/Users/lmajano/Sites/cboxdev/core/coldbox/system/FrameworkSupertype.cfc}, description={}}, {access={public}, hint={Facade}, returnFormat={wddx}, returntype={void}, output={false}, closure={false}, parameters={[{required={false}, hint={The name of the event to run, if not passed, then it will use the default event found in your configuration file.}, name={event}, type={string}}, {required={false}, hint={The query string to append, if needed. If in SES mode it will be translated to convention name value pairs}, name={queryString}, type={string}}, {required={false}, hint={Wether to add the tokens or not. Default is false}, name={addToken}, type={boolean}}, {required={false}, hint={What request collection keys to persist in flash ram}, name={persist}, type={string}}, {required={false}, hint={A structure key-value pairs to persist in flash ram.}, name={persistStruct}, type={struct}}, {required={false}, hint={Whether to relocate in SSL or not}, name={ssl}, type={boolean}}, {required={false}, hint={Use this baseURL instead of the index.cfm that is used by default. You can use this for ssl or any full base url you would like to use. Ex: https://mysite.com/index.cfm}, name={baseURL}, type={string}}, {required={false}, hint={Do not fire the postProcess interceptors}, name={postProcessExempt}, type={boolean}}, {required={false}, hint={The full URL you would like to relocate to instead of an event: ex: URL='http://www.google.com'}, name={URL}, type={string}}, {required={false}, hint={The relative URI you would like to relocate to instead of an event: ex: URI='/mypath/awesome/here'}, name={URI}, type={string}}, {required={false}, hint={The status code to use in the relocation}, name={statusCode}, type={numeric}}]}, name={setNextEvent}, owner={/Users/lmajano/Sites/cboxdev/core/coldbox/system/FrameworkSupertype.cfc}, description={}}, {access={public}, hint={Facade to controller's runEvent() method.}, returnFormat={wddx}, returntype={any}, output={false}, closure={false}, parameters={[{default={}, required={false}, name={event}, type={any}}, {default={false}, required={false}, hint={If true, pre/post handlers will not be fired. Boolean}, colddoc:generic={boolean}, name={prepostExempt}, type={any}}, {default={false}, required={false}, hint={Execute a private event or not, default is false}, colddoc:generic={boolean}, name={private}, type={any}}, {default={false}, required={false}, hint={The flag that let's this service now if it is the default set event running or not. USED BY THE FRAMEWORK ONLY}, colddoc:generic={boolean}, name={default}, type={any}}, {default={[runtime expression]}, required={false}, hint={A collection of arguments to passthrough to the calling event handler method. struct}, colddoc:generic={struct}, name={eventArguments}, type={any}}]}, name={runEvent}, owner={/Users/lmajano/Sites/cboxdev/core/coldbox/system/FrameworkSupertype.cfc}, description={}}, {access={public}, hint={Persist variables for flash redirections}, returnFormat={wddx}, returntype={void}, output={false}, closure={false}, parameters={[{default={}, required={false}, hint={What request collection keys to persist in the relocation}, name={persist}, type={string}}, {required={false}, hint={A structure key-value pairs to persist.}, name={persistStruct}, type={struct}}]}, name={persistVariables}, owner={/Users/lmajano/Sites/cboxdev/core/coldbox/system/FrameworkSupertype.cfc}, description={}}, {access={public}, hint={Get controller: coldbox.system.web.Controller}, returnFormat={wddx}, returntype={any}, output={false}, closure={false}, parameters={[]}, name={getController}, owner={/Users/lmajano/Sites/cboxdev/core/coldbox/system/FrameworkSupertype.cfc}, description={}}, {access={public}, hint={Locate the real path location of a file in a coldbox application. 3 checks: 1) inside of coldbox app, 2) expand the path, 3) Absolute location. If path not found, it returns an empty path}, returnFormat={wddx}, returntype={string}, output={false}, closure={false}, parameters={[{required={true}, hint={The path to check}, name={pathToCheck}, type={any}}]}, name={locateFilePath}, owner={/Users/lmajano/Sites/cboxdev/core/coldbox/system/FrameworkSupertype.cfc}, description={}}, {access={public}, hint={Locate the real path location of a directory in a coldbox application. 3 checks: 1) inside of coldbox app, 2) expand the path, 3) Absolute location. If path not found, it returns an empty path}, returnFormat={wddx}, returntype={string}, output={false}, closure={false}, parameters={[{required={true}, hint={The path to check}, name={pathToCheck}, type={any}}]}, name={locateDirectoryPath}, owner={/Users/lmajano/Sites/cboxdev/core/coldbox/system/FrameworkSupertype.cfc}, description={}}, {access={public}, hint={Add a js/css asset(s) to the html head section. You can also pass in a list of assets.}, returnFormat={wddx}, returntype={any}, output={false}, closure={false}, parameters={[{required={true}, hint={The asset to load, only js or css files. This can also be a comma delimmited list.}, name={asset}, type={any}}]}, name={addAsset}, owner={/Users/lmajano/Sites/cboxdev/core/coldbox/system/FrameworkSupertype.cfc}, description={}}, {access={public}, hint={Injects a UDF Library (*.cfc or *.cfm) into the target object.  It does not however, put the mixins on any of the cfc scopes. Therefore they can only be called internally.}, returnFormat={wddx}, returntype={void}, output={false}, closure={false}, parameters={[{required={true}, hint={The UDF library to inject.}, name={udflibrary}, type={any}}]}, name={includeUDF}, owner={/Users/lmajano/Sites/cboxdev/core/coldbox/system/FrameworkSupertype.cfc}, description={}}, {access={public}, hint={Load the global UDF libraries defined in the UDFLibraryFile Setting}, returnFormat={wddx}, returntype={any}, output={false}, closure={false}, parameters={[]}, name={loadGlobalUDFLibraries}, owner={/Users/lmajano/Sites/cboxdev/core/coldbox/system/FrameworkSupertype.cfc}, description={}}, {access={public}, hint={Facade to cfhtmlhead}, returnFormat={wddx}, returntype={void}, output={false}, closure={false}, parameters={[{required={true}, hint={The content to send to the head}, name={content}, type={string}}]}, name={$htmlhead}, owner={/Users/lmajano/Sites/cboxdev/core/coldbox/system/FrameworkSupertype.cfc}, description={}}, {access={public}, returnFormat={wddx}, returntype={any}, output={false}, closure={false}, parameters={[{required={true}, hint={The ColdBox controller reference: coldbox.system.web.Controller}, colddoc:generic={coldbox.system.web.Controller}, name={controller}, type={any}}, {required={true}, hint={The Interceptor properties}, colddoc:generic={struct}, name={properties}, type={any}}]}, name={init}, owner={/Users/lmajano/Sites/cboxdev/core/coldbox/system/Interceptor.cfc}, description={}}, {access={public}, hint={This is the configuration method for your interceptors. THIS IS EXECUTED BEFORE THE ASPECTS ARE LOADED.}, returnFormat={wddx}, returntype={void}, output={false}, closure={false}, parameters={[]}, name={Configure}, owner={/Users/lmajano/Sites/cboxdev/core/coldbox/system/Interceptor.cfc}, description={}}, {access={public}, hint={Get the entire properties structure}, returnFormat={wddx}, returntype={struct}, output={false}, closure={false}, parameters={[]}, name={getProperties}, owner={/Users/lmajano/Sites/cboxdev/core/coldbox/system/Interceptor.cfc}, description={}}, {access={public}, hint={Set the entire properties structure}, returnFormat={wddx}, returntype={void}, output={false}, closure={false}, parameters={[{required={true}, name={properties}, type={struct}}]}, name={setProperties}, owner={/Users/lmajano/Sites/cboxdev/core/coldbox/system/Interceptor.cfc}, description={}}, {access={public}, hint={Get an interceptor property, throws exception if not found.}, returnFormat={wddx}, returntype={any}, output={false}, closure={false}, parameters={[{required={true}, hint={The key of the property to return.}, name={property}, type={any}}]}, name={getProperty}, owner={/Users/lmajano/Sites/cboxdev/core/coldbox/system/Interceptor.cfc}, description={}}, {access={public}, hint={Set an interceptor property}, returnFormat={wddx}, returntype={void}, output={false}, closure={false}, parameters={[{required={true}, hint={The property name to set.}, name={property}, type={any}}, {required={true}, hint={The value of the property.}, name={value}, type={any}}]}, name={setProperty}, owner={/Users/lmajano/Sites/cboxdev/core/coldbox/system/Interceptor.cfc}, description={}}, {access={public}, hint={Checks wether a given interceptor property exists or not.}, returnFormat={wddx}, returntype={boolean}, output={false}, closure={false}, parameters={[{required={true}, hint={The property name}, name={property}, type={any}}]}, name={propertyExists}, owner={/Users/lmajano/Sites/cboxdev/core/coldbox/system/Interceptor.cfc}, description={}}, {access={public}, hint={Unregister this interceptor from a passed state. If the state does not exists, it returns false}, returnFormat={wddx}, returntype={boolean}, output={false}, closure={false}, parameters={[{required={true}, hint={The named state to unregister this interceptor from}, name={state}, type={any}}]}, name={unregister}, owner={/Users/lmajano/Sites/cboxdev/core/coldbox/system/Interceptor.cfc}, description={}}, {access={public}, returnFormat={wddx}, returntype={any}, output={false}, closure={false}, parameters={[]}, name={getInterceptorService}, colddoc:generic={coldbox.system.web.services.InterceptorService}, owner={/Users/lmajano/Sites/cboxdev/core/coldbox/system/Interceptor.cfc}, description={}}, {access={public}, hint={Clear the interceptor buffer}, returnFormat={wddx}, returntype={any}, output={false}, closure={false}, parameters={[]}, name={clearBuffer}, owner={/Users/lmajano/Sites/cboxdev/core/coldbox/system/Interceptor.cfc}, description={}}, {access={public}, hint={Append to the interceptor buffer.}, returnFormat={wddx}, returntype={void}, output={false}, closure={false}, parameters={[{required={true}, hint={The string to append}, name={str}, type={any}}]}, name={appendToBuffer}, owner={/Users/lmajano/Sites/cboxdev/core/coldbox/system/Interceptor.cfc}, description={}}, {access={public}, hint={Get the string representation of the buffer}, returnFormat={wddx}, returntype={any}, output={false}, closure={false}, parameters={[]}, name={getBufferString}, owner={/Users/lmajano/Sites/cboxdev/core/coldbox/system/Interceptor.cfc}, description={}}, {access={public}, hint={Get the request buffer object: coldbox.system.core.util.RequestBuffer}, returnFormat={wddx}, returntype={any}, output={false}, closure={false}, parameters={[]}, name={getBufferObject}, owner={/Users/lmajano/Sites/cboxdev/core/coldbox/system/Interceptor.cfc}, description={}}]}, hashCode={1980890592}}}, MIXINS={[]}, AUTOASPECTBINDING={true}, CACHE={{PROVIDER={}, KEY={}, LASTACCESSTIMEOUT={}, TIMEOUT={}}}, CONSTRUCTOR={init}, DIPROPERTIES={[]}, ONDICOMPLETE={[]}, NAME={coldbox.system.Interceptor}, SCOPE={noscope}, VALUE={}, EXTRAATTRIBUTES={{}}, METHOD={}, AUTOWIRE={false}, PROVIDERMETHODS={[]}, DIMETHODARGS={[]}, THREADSAFE={false}, ALIAS={[]}, AUTOINIT={true}, PATH={coldbox.system.Interceptor}, VIRTUALINHERITANCE={}, EAGERINIT={false}, DSL={}, DISETTERS={[]}, TYPE={cfc}, DICONSTRUCTORARGS={[{REF={null}, REQUIRED={true}, ARGNAME={}, DSL={null}, JAVACAST={null}, NAME={controller}, VALUE={{GETSERVICES={getServices()}, SETCOLDBOXSETTINGS={setColdboxSettings(any coldboxSettings)}, GETLOGBOX={getLogBox()}, GETWIREBOX={getWireBox()}, SETNEXTEVENT={setNextEvent([string event, [string queryString, [boolean addToken, [string persist, [struct persistStruct, [boolean ssl, [string baseURL, [boolean postProcessExempt, [string URL, [string URI, [numeric statusCode]]]]]]]]]]])}, GETCOLDBOXSETTINGS={getColdboxSettings()}, GETCOLDBOXOCM={getColdboxOCM([any cacheName])}, GETREQUESTSERVICE={getRequestService()}, SETCONFIGSETTINGS={setConfigSettings(any configSettings)}, SETCACHEBOX={setCacheBox(any cacheBox)}, SETSETTING={setSetting([any name, [any value]])}, CONFIGURE={configure()}, GETAPPROOTPATH={getAppRootPath()}, SETCOLDBOXOCM={setColdboxOCM(any coldboxOCM)}, SETPLUGINSERVICE={setPluginService(Any pluginService)}, GETHANDLERSERVICE={getHandlerService()}, LOCATEDIRECTORYPATH={locateDirectoryPath(any pathToCheck)}, SETWIREBOX={setWireBox(any wireBox)}, GETSETTINGSTRUCTURE={getSettingStructure([any FWSetting, [any deepCopyFlag]])}, GETMODULESERVICE={getModuleService()}, GETCOLDBOXINITIATED={getColdboxInitiated()}, GETAPPHASH={getAppHash()}, DECORATOR={true}, SETTINGEXISTS={settingExists(any name, [any FWSetting])}, SETLOADERSERVICE={setLoaderService(any loaderService)}, SETREQUESTSERVICE={setRequestService(any requestService)}, GETPLUGIN={getPlugin(any plugin, [any customPlugin, [any newInstance, [any module, [any init]]]])}, GETMEMENTO={getMemento()}, GETCACHEBOX={getCacheBox()}, SETHANDLERSERVICE={setHandlerService(any handlerService)}, SETCOLDBOXINITIATED={setColdboxInitiated(any coldboxInitiated)}, GETLOADERSERVICE={getLoaderService()}, SETLOGBOX={setLogBox(any logBox)}, GETCONTROLLER={getController()}, GETSETTING={getSetting([any name, [any FWSetting, [any defaultValue]]])}, GETPLUGINSERVICE={getPluginService()}, GETINTERCEPTORSERVICE={getInterceptorService()}, GETCONFIGSETTINGS={getConfigSettings()}, LOCATEFILEPATH={locateFilePath(any pathToCheck)}, SETMODULESERVICE={setModuleService(any moduleService)}, SETLOG={setLog(any logger)}, GETAPPKEY={getAppKey()}, SETINTERCEPTORSERVICE={setInterceptorService(any interceptorService)}, SETAPPROOTPATH={setAppRootPath(any appRootPath)}, INIT={init(any controller)}, SETAPPHASH={setAppHash(any appHash)}, GETEXCEPTIONSERVICE={getExceptionService()}, GETCFMLENGINE={getCFMLEngine()}, RUNEVENT={runEvent()}, PERSISTVARIABLES={persistVariables([any persist, [any persistStruct]])}}}, SCOPE={variables}}, {REF={null}, REQUIRED={true}, ARGNAME={}, DSL={null}, JAVACAST={null}, NAME={properties}, VALUE={{}}, SCOPE={variables}}]}, DISCOVERED={true}, ASPECT={false}}"
"DEBUG","FILEAPPENDER","06/20/2014","10:15:54","coldbox.system.ioc.Injector","Instance object built: interceptor-Simple:/cbTestHarness/modules/test1.interceptors.Simple"
"DEBUG","FILEAPPENDER","06/20/2014","10:15:54","coldbox.system.ioc.Injector","Dependency: {REF={null}, REQUIRED={true}, ARGNAME={}, DSL={cachebox}, JAVACAST={null}, NAME={cache}, VALUE={null}, SCOPE={instance}} --> injected into interceptor-Simple"
"DEBUG","FILEAPPENDER","06/20/2014","10:15:54","coldbox.system.web.context.InterceptorState","Starting 'afterInstanceAutowire' chain with 1 interceptors"
"DEBUG","FILEAPPENDER","06/20/2014","10:15:54","coldbox.system.web.context.InterceptorState","Interception started for: 'afterInstanceAutowire', key: mixer"
"DEBUG","FILEAPPENDER","06/20/2014","10:15:54","coldbox.system.aop.Mixer","Aspect class matching dictionary built for mapping: interceptor-simple, aspects: []"
"DEBUG","FILEAPPENDER","06/20/2014","10:15:54","coldbox.system.web.context.InterceptorState","Interception ended for: 'afterInstanceAutowire', key: mixer"
"DEBUG","FILEAPPENDER","06/20/2014","10:15:54","coldbox.system.web.context.InterceptorState","Finished 'afterInstanceAutowire' execution chain"
"DEBUG","FILEAPPENDER","06/20/2014","10:15:54","coldbox.system.ioc.Injector","Finalized Autowire for: interceptor-Simple ExtraInfo:{METADATA={{INHERITANCETRAIL={[cbtestharness.modules.test1.interceptors.simple, railo-context.Component]}, hint={This is a simple error observer}, remoteAddress={http://railocboxdev.jfetmac:80/cbModuleTest1/interceptors/simple.cfc?wsdl}, output={false}, path={/Users/lmajano/Sites/cboxdev/core/coldbox/test-harness/modules/test1/interceptors/simple.cfc}, displayname={Component}, synchronized={false}, fullname={cbtestharness.modules.test1.interceptors.simple}, properties={[{inject={cachebox}, name={cache}, type={any}, scope={instance}}]}, name={cbtestharness.modules.test1.interceptors.simple}, accessors={false}, type={component}, persistent={false}, functions={[{access={public}, hint={Configuration}, returnFormat={wddx}, returntype={void}, output={false}, closure={false}, parameters={[]}, name={Configure}, owner={/Users/lmajano/Sites/cboxdev/core/coldbox/test-harness/modules/test1/interceptors/simple.cfc}, description={}}, {access={public}, hint={My very own custom interception point. }, returnFormat={wddx}, returntype={void}, output={false}, closure={false}, parameters={[{required={false}, name={event}, type={any}}, {required={false}, name={interceptData}, type={any}}]}, name={preProcess}, owner={/Users/lmajano/Sites/cboxdev/core/coldbox/test-harness/modules/test1/interceptors/simple.cfc}, description={}}]}, hashCode={829409224}}}, MIXINS={[]}, AUTOASPECTBINDING={true}, CACHE={{PROVIDER={}, KEY={}, LASTACCESSTIMEOUT={}, TIMEOUT={}}}, CONSTRUCTOR={init}, DIPROPERTIES={[{REF={null}, REQUIRED={true}, ARGNAME={}, DSL={cachebox}, JAVACAST={null}, NAME={cache}, VALUE={null}, SCOPE={instance}}]}, ONDICOMPLETE={[]}, NAME={interceptor-Simple}, SCOPE={singleton}, VALUE={}, EXTRAATTRIBUTES={{}}, METHOD={}, AUTOWIRE={true}, PROVIDERMETHODS={[]}, DIMETHODARGS={[]}, THREADSAFE={true}, ALIAS={[]}, AUTOINIT={true}, PATH={/cbTestHarness/modules/test1.interceptors.Simple}, VIRTUALINHERITANCE={coldbox.system.Interceptor}, EAGERINIT={false}, DSL={}, DISETTERS={[]}, TYPE={cfc}, DICONSTRUCTORARGS={[{REF={null}, REQUIRED={true}, ARGNAME={}, DSL={null}, JAVACAST={null}, NAME={controller}, VALUE={{GETSERVICES={getServices()}, SETCOLDBOXSETTINGS={setColdboxSettings(any coldboxSettings)}, GETLOGBOX={getLogBox()}, GETWIREBOX={getWireBox()}, SETNEXTEVENT={setNextEvent([string event, [string queryString, [boolean addToken, [string persist, [struct persistStruct, [boolean ssl, [string baseURL, [boolean postProcessExempt, [string URL, [string URI, [numeric statusCode]]]]]]]]]]])}, GETCOLDBOXSETTINGS={getColdboxSettings()}, GETCOLDBOXOCM={getColdboxOCM([any cacheName])}, GETREQUESTSERVICE={getRequestService()}, SETCONFIGSETTINGS={setConfigSettings(any configSettings)}, SETCACHEBOX={setCacheBox(any cacheBox)}, SETSETTING={setSetting([any name, [any value]])}, CONFIGURE={configure()}, GETAPPROOTPATH={getAppRootPath()}, SETCOLDBOXOCM={setColdboxOCM(any coldboxOCM)}, SETPLUGINSERVICE={setPluginService(Any pluginService)}, GETHANDLERSERVICE={getHandlerService()}, LOCATEDIRECTORYPATH={locateDirectoryPath(any pathToCheck)}, SETWIREBOX={setWireBox(any wireBox)}, GETSETTINGSTRUCTURE={getSettingStructure([any FWSetting, [any deepCopyFlag]])}, GETMODULESERVICE={getModuleService()}, GETCOLDBOXINITIATED={getColdboxInitiated()}, GETAPPHASH={getAppHash()}, DECORATOR={true}, SETTINGEXISTS={settingExists(any name, [any FWSetting])}, SETLOADERSERVICE={setLoaderService(any loaderService)}, SETREQUESTSERVICE={setRequestService(any requestService)}, GETPLUGIN={getPlugin(any plugin, [any customPlugin, [any newInstance, [any module, [any init]]]])}, GETMEMENTO={getMemento()}, GETCACHEBOX={getCacheBox()}, SETHANDLERSERVICE={setHandlerService(any handlerService)}, SETCOLDBOXINITIATED={setColdboxInitiated(any coldboxInitiated)}, GETLOADERSERVICE={getLoaderService()}, SETLOGBOX={setLogBox(any logBox)}, GETCONTROLLER={getController()}, GETSETTING={getSetting([any name, [any FWSetting, [any defaultValue]]])}, GETPLUGINSERVICE={getPluginService()}, GETINTERCEPTORSERVICE={getInterceptorService()}, GETCONFIGSETTINGS={getConfigSettings()}, LOCATEFILEPATH={locateFilePath(any pathToCheck)}, SETMODULESERVICE={setModuleService(any moduleService)}, SETLOG={setLog(any logger)}, GETAPPKEY={getAppKey()}, SETINTERCEPTORSERVICE={setInterceptorService(any interceptorService)}, SETAPPROOTPATH={setAppRootPath(any appRootPath)}, INIT={init(any controller)}, SETAPPHASH={setAppHash(any appHash)}, GETEXCEPTIONSERVICE={getExceptionService()}, GETCFMLENGINE={getCFMLEngine()}, RUNEVENT={runEvent()}, PERSISTVARIABLES={persistVariables([any persist, [any persistStruct]])}}}, SCOPE={variables}}, {REF={null}, REQUIRED={true}, ARGNAME={}, DSL={null}, JAVACAST={null}, NAME={properties}, VALUE={{}}, SCOPE={variables}}]}, DISCOVERED={true}, ASPECT={false}}"
"DEBUG","FILEAPPENDER","06/20/2014","10:15:54","coldbox.system.ioc.scopes.Singleton","Object: (interceptor-simple) constructed and stored in singleton cache. ThreadSafe=true"
"DEBUG","FILEAPPENDER","06/20/2014","10:15:54","coldbox.system.web.services.InterceptorService","Registering Simple on 'preProcess' interception point"
"DEBUG","FILEAPPENDER","06/20/2014","10:15:54","coldbox.system.ioc.Injector","Dependency: {REF={null}, REQUIRED={true}, ARGNAME={}, DSL={cachebox}, JAVACAST={null}, NAME={cache}, VALUE={null}, SCOPE={instance}} --> injected into /cbTestHarness/modules/test1.interceptors.Simple"
"DEBUG","FILEAPPENDER","06/20/2014","10:15:54","coldbox.system.web.context.InterceptorState","Starting 'afterInstanceAutowire' chain with 1 interceptors"
"DEBUG","FILEAPPENDER","06/20/2014","10:15:54","coldbox.system.web.context.InterceptorState","Interception started for: 'afterInstanceAutowire', key: mixer"
"DEBUG","FILEAPPENDER","06/20/2014","10:15:54","coldbox.system.aop.Mixer","Aspect class matching dictionary built for mapping: /cbtestharness/modules/test1.interceptors.simple, aspects: []"
"DEBUG","FILEAPPENDER","06/20/2014","10:15:54","coldbox.system.web.context.InterceptorState","Interception ended for: 'afterInstanceAutowire', key: mixer"
"DEBUG","FILEAPPENDER","06/20/2014","10:15:54","coldbox.system.web.context.InterceptorState","Finished 'afterInstanceAutowire' execution chain"
"DEBUG","FILEAPPENDER","06/20/2014","10:15:54","coldbox.system.ioc.Injector","Finalized Autowire for: /cbTestHarness/modules/test1.interceptors.Simple ExtraInfo:{METADATA={{INHERITANCETRAIL={[cbtestharness.modules.test1.interceptors.simple, railo-context.Component]}, hint={This is a simple error observer}, remoteAddress={http://railocboxdev.jfetmac:80/cbModuleTest1/interceptors/simple.cfc?wsdl}, output={false}, path={/Users/lmajano/Sites/cboxdev/core/coldbox/test-harness/modules/test1/interceptors/simple.cfc}, displayname={Component}, synchronized={false}, fullname={cbtestharness.modules.test1.interceptors.simple}, properties={[{inject={cachebox}, name={cache}, type={any}, scope={instance}}]}, name={cbtestharness.modules.test1.interceptors.simple}, accessors={false}, type={component}, persistent={false}, functions={[{access={public}, hint={Configuration}, returnFormat={wddx}, returntype={void}, output={false}, closure={false}, parameters={[]}, name={Configure}, owner={/Users/lmajano/Sites/cboxdev/core/coldbox/test-harness/modules/test1/interceptors/simple.cfc}, description={}}, {access={public}, hint={My very own custom interception point. }, returnFormat={wddx}, returntype={void}, output={false}, closure={false}, parameters={[{required={false}, name={event}, type={any}}, {required={false}, name={interceptData}, type={any}}]}, name={preProcess}, owner={/Users/lmajano/Sites/cboxdev/core/coldbox/test-harness/modules/test1/interceptors/simple.cfc}, description={}}]}, hashCode={829409224}}}, MIXINS={[]}, AUTOASPECTBINDING={true}, CACHE={{PROVIDER={}, KEY={}, LASTACCESSTIMEOUT={}, TIMEOUT={}}}, CONSTRUCTOR={init}, DIPROPERTIES={[{REF={null}, REQUIRED={true}, ARGNAME={}, DSL={cachebox}, JAVACAST={null}, NAME={cache}, VALUE={null}, SCOPE={instance}}]}, ONDICOMPLETE={[]}, NAME={/cbTestHarness/modules/test1.interceptors.Simple}, SCOPE={noscope}, VALUE={}, EXTRAATTRIBUTES={{}}, METHOD={}, AUTOWIRE={true}, PROVIDERMETHODS={[]}, DIMETHODARGS={[]}, THREADSAFE={false}, ALIAS={[]}, AUTOINIT={true}, PATH={/Users/lmajano/Sites/cboxdev/core/coldbox/test-harness/modules/test1/interceptors/simple.cfc}, VIRTUALINHERITANCE={}, EAGERINIT={false}, DSL={}, DISETTERS={[]}, TYPE={cfc}, DICONSTRUCTORARGS={[]}, DISCOVERED={true}, ASPECT={false}}"
"INFO","FILEAPPENDER","06/20/2014","10:15:54","cbtestharness.modules.test1.ModuleConfig","onLoad called on module: cbtestharness.modules.test1.ModuleConfig"
"DEBUG","FILEAPPENDER","06/20/2014","10:15:54","coldbox.system.web.services.ModuleService","Module cbtest1 activated sucessfully."
"DEBUG","FILEAPPENDER","06/20/2014","10:15:54","coldbox.system.web.services.ModuleService","Module moduleLookup activated sucessfully."
"DEBUG","FILEAPPENDER","06/20/2014","10:15:54","coldbox.system.web.services.ModuleService","Module forgebox activated sucessfully."
"DEBUG","FILEAPPENDER","06/20/2014","10:15:54","coldbox.system.web.services.ModuleService","Module mod1 activated sucessfully."
"DEBUG","FILEAPPENDER","06/20/2014","10:15:54","coldbox.system.web.services.ModuleService","Module test1 already activated, skipping activation."
"DEBUG","FILEAPPENDER","06/20/2014","10:15:54","coldbox.system.web.services.ModuleService","Module layouttest activated sucessfully."
"DEBUG","FILEAPPENDER","06/20/2014","10:15:54","coldbox.system.web.services.ModuleService","Module mod2 activated sucessfully."
"DEBUG","FILEAPPENDER","06/20/2014","10:15:54","coldbox.system.web.services.ModuleService","Module conventionsTest activated sucessfully."
"DEBUG","FILEAPPENDER","06/20/2014","10:15:54","coldbox.system.web.services.ModuleService","Module parentLookup activated sucessfully."
