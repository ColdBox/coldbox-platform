<!-----------------------------------------------------------------------********************************************************************************Copyright Since 2005 ColdBox Framework by Luis Majano and Ortus Solutions, Corpwww.coldbox.org | www.luismajano.com | www.ortussolutions.com********************************************************************************Author 	 :	Luis MajanoDate     :	September 23, 2005Description :	A cool utility that helps you when working with HTMLModification History:-----------------------------------------------------------------------><cfcomponent hint="A cool utility that helps you when working with HTML, from creating doc types, to managing your js/css assets, to rendering tables and lists from data"       		 output="false"       		 singleton><!------------------------------------------- CONSTRUCTOR ------------------------------------------->	<cffunction name="init" access="public" returntype="HTMLHelper" output="false">		<cfscript>						setpluginName("HTMLHelper");			setpluginVersion("1.0");			setpluginDescription("A cool utility that helps you when working with HTML");			setpluginAuthor("Luis Majano");			setpluginAuthorURL("http://www.coldbox.org");						return this;		</cfscript>	</cffunction><!------------------------------------------- PUBLIC HELPER METHODS ------------------------------------------>	<!--- addJSContent --->    <cffunction name="addJSContent" output="false" access="public" returntype="any" hint="Open and close xhtml javascript tags so you can easily just add content">    	<cfargument name="content" 		type="any" 		required="true" hint="The content to render out"/>		<cfargument name="addToHeader"	type="boolean" 	required="false" default="false" hint="Send to header or return content"/>    	<cfscript>    		var str = '<script type="text/javascript"><![CDATA[#arguments.content#//]]></script>';    		if( arguments.addToHeader ){	    		$htmlhead( str );			}	    	return str;		</cfscript>    </cffunction>	<!--- addCSSContent --->    <cffunction name="addStyleContent" output="false" access="public" returntype="any" hint="Open and close xhtml style tags so you can easily just add content">    	<cfargument name="content" 		type="any" 		required="true" hint="The content to render out"/>    	<cfargument name="addToHeader"	type="boolean" 	required="false" default="false" hint="Send to header or return content"/>    	<cfscript>    		var str = '<style type="text/css">#arguments.content#</style>';			if( arguments.addToHeader ){	    		$htmlhead( str );			}	    	return str;		</cfscript>    </cffunction>	<!--- addAsset --->	<cffunction name="addAsset" output="false" access="public" returntype="any" hint="Add a js/css asset(s) to the html head section. You can also pass in a list of assets via the asset argument to try to load all of them.  You can also make this method return the string that will be sent to the header instead.">		<cfargument name="asset" 		type="any" 		required="true" hint="The asset(s) to load, only js or css files. This can also be a comma delimmited list."/>		<cfargument name="sendToHeader" type="boolean"  required="false" default="true" hint="Send to the header via htmlhead by default, else it returns the content"/>		<cfscript>			var sb 			= createObject("java","java.lang.StringBuffer").init('');			var x 			= 1;			var thisAsset   = "";			var event		= controller.getRequestService().getContext();						// request assets storage			event.paramValue(name="cbox_assets",value="",private=true);						for(x=1; x lte listLen(arguments.asset); x=x+1){				thisAsset = listGetAt(arguments.asset,x);				// Is asset already loaded				if( NOT listFindNoCase(event.getValue(name="cbox_assets",private=true),thisAsset) ){										// Load Asset					if( listLast(thisAsset,".") eq "js" ){						sb.append('<script src="#thisAsset#" type="text/javascript"></script>');					}					else{						sb.append('<link href="#thisAsset#" type="text/css" rel="stylesheet" />');					}										// Store It as Loaded					event.setValue(name="cbox_assets",value=listAppend(event.getValue(name="cbox_assets",private=true),thisAsset),private=true);				}			}						//Load it			if( len(sb.toString()) and arguments.sendToHeader ){				$htmlhead(sb.toString());			}			else{				return sb.toString();			}		</cfscript>	</cffunction>		<!--- br --->    <cffunction name="br" output="false" access="public" returntype="any" hint="Generate line breaks">    	<cfargument name="count" type="numeric" required="false" default="1" hint="The number of breaks"/>    	<cfreturn repeatString("<br/>",arguments.count)>    </cffunction>		<!--- nbs --->    <cffunction name="nbs" output="false" access="public" returntype="any" hint="Generate non-breaking spaces (&nbsp;)">    	<cfargument name="count" type="numeric" required="false" default="1" hint="The number of spaces"/>    	<cfreturn repeatString("&nbsp;",arguments.count)>    </cffunction>	<!--- heading --->    <cffunction name="heading" output="false" access="public" returntype="any" hint="Generate header tags">		<cfargument name="title" type="string" required="true"  hint="The header content"/>		<cfargument name="size" type="numeric" required="false" default="1" hint="The header size: h1, h2, hx"/>		<cfreturn "<h#arguments.size#>#arguments.title#</h#arguments.size#>">    </cffunction>		<!--- tag --->    <cffunction name="tag" output="false" access="public" returntype="any" hint="Surround content with a tag">		<cfargument name="tag" 		  type="string" required="true"  hint="The tag to generate"/>		<cfargument name="content"    type="string" required="false" default=""  hint="The content of the tag"/>		<cfargument name="attributes" type="struct" required="false" default="#structnew()#" hint="The attributes to use in the tag"/>		<cfscript>			return '<#arguments.tag##flattenAttributes(arguments.attributes)#>#arguments.content#</#arguments.tag#>';		</cfscript>    </cffunction>		<!--- link --->    <cffunction name="link" output="false" access="public" returntype="any" hint="Create link tags, using the SES base URL or not">    	<cfargument name="href" 	 	type="any" 		required="true" hint="The href link or a structure of name-value pairs to render: keys [href,rel,type,title,media]"/>		<cfargument name="rel" 		 	type="any"  	required="false"	default="stylesheet" hint="The rel attribute"/>		<cfargument name="type" 	 	type="any"  	required="false" 	default="text/css" hint="The type attribute"/>		<cfargument name="title"	 	type="any" 		required="false" 	default="" hint="The title attribute"/>		<cfargument name="media" 	 	type="any"  	required="false" 	default="" hint="The media attribute"/>		<cfargument name="noBaseURL" 	type="boolean" 	required="false" 	default="false" hint="Prepends the setting of baseURL if false"/>		<cfargument name="charset" 		type="any" 		required="false" 	default="UTF-8" hint="The charset to add, defaults to utf-8"/>		<cfscript>			var link 		= createObject("java","java.lang.StringBuffer").init("<link");			var srcParams 	= arguments;			var key 		= "";						// src check			if( NOT isSimpleValue(arguments.href) ){				srcParams = arguments.href;			}						// Check if we have a base URL			if( settingExists("htmlBaseURL") and noBaseURL eq FALSE and NOT find("://",arguments.href) ){				srcParams["href"] = getSetting("htmlBaseURL") & "/" & srcParams["href"];			}						// create link			for(key in srcParams){				if( key neq "noBaseURL" and len(srcParams[key]) ){					link.append(' #lcase(key)#="#srcParams[key]#"');				}			}						link.append('/>');						return link.toString();					</cfscript>			</cffunction>		<!--- img --->    <cffunction name="img" output="false" access="public" returntype="any" hint="Create image tags using the SES base URL or not">    	<cfargument name="src" 		 type="any" 	required="true" hint="The source URL to link to or a structure of name-value pairs to use to construct the image: [src,alt,class,width,height,title,rel]"/>		<cfargument name="alt" 		 type="string"  required="false" default="" hint="The alt tag"/>		<cfargument name="class" 	 type="string"  required="false" default="" hint="The class tag"/>		<cfargument name="width" 	 type="string"  required="false" default="" hint="The width tag"/>		<cfargument name="height"    type="string"  required="false" default="" hint="The height tag"/>		<cfargument name="title" 	 type="string"  required="false" default="" hint="The title tag"/>		<cfargument name="rel" 		 type="string"  required="false" default="" hint="The rel tag"/>		<cfargument name="noBaseURL" type="boolean" required="false" default="false" hint="Prepends the setting of baseURL if false"/>		<cfscript>			var img 		= createObject("java","java.lang.StringBuffer").init("<img");			var srcParams 	= arguments;			var key			= "";						// src check			if( NOT isSimpleValue(arguments.src) ){				srcParams = arguments.src;			}						// Check if we have a base URL			if( settingExists("htmlBaseURL") and noBaseURL eq FALSE and NOT find("://",arguments.src)){				srcParams["src"] = getSetting("htmlBaseURL") & "/" & srcParams["src"];			}						// create image			for(key in srcParams){				if( key neq "noBaseURL" and len(srcParams[key]) ){					img.append(' #lcase(key)#="#srcParams[key]#"');				}			}						img.append(" />");						return img.toString();		</cfscript>    </cffunction>	<!--- ul --->    <cffunction name="ul" output="false" access="public" returntype="any" hint="Create un-ordered lists according to passed in values and arguments, compressed HTML">    	<cfargument name="values" 		type="any" 	  required="true"  default="" hint="An array of values or list of values"/>		<cfargument name="attributes" 	type="struct" required="false" default="#structnew()#" hint="Attributes for the enclosing UL tags"/>		<cfargument name="column"  	 	type="string" required="false" default="" hint="If the values is a query, this is the name of the column to get the data from to create the list"/>		<cfset arguments.tag = "ul">		<cfreturn toHTMLList(argumentCollection=arguments)>    </cffunction>		<!--- ol --->    <cffunction name="ol" output="false" access="public" returntype="any" hint="Create ordered lists according to passed in values and arguments, compressed HTML">    	<cfargument name="values" 		type="any" 	  required="true"  default="" hint="An array of values or list of values"/>		<cfargument name="attributes" 	type="struct" required="false" default="#structnew()#" hint="Attributes for the enclosing OL tags"/>		<cfargument name="column"  	 	type="string" required="false" default="" hint="If the values is a query, this is the name of the column to get the data from to create the list"/>		<cfset arguments.tag = "ol">		<cfreturn toHTMLList(argumentCollection=arguments)>    </cffunction>		<!--- toHTMLList --->    <cffunction name="toHTMLList" output="false" access="private" returntype="any" hint="Convert a sent in tag type to an HTML list">    	<cfargument name="tag"   		type="string" required="true" hint="The list tag type"/>    	<cfargument name="values" 		type="any"    required="true" default="" hint="An array of values or list of values"/>		<cfargument name="attributes" 	type="struct" required="false" default="#structnew()#" hint="Attributes for the enclosing list tag"/>		<cfargument name="column"  	 	type="string" required="false" default="" hint="If the values is a query, this is the name of the column to get the data from to create the list"/>		<cfscript>    		var val 	= arguments.values;			var x   	= 1;			var str 	= createObject("java","java.lang.StringBuffer").init("");			var br  	= chr(13);						// list or array or query?			if( isSimpleValue(val) ){ val = listToArray(val); }			if( isQuery(val) ){ val = getPlugin("QueryHelper").getColumnArray(val,arguments.column); }						str.append("<#arguments.tag##flattenAttributes(arguments.attributes)#>");			for(x=1; x lte arrayLen(val); x=x+1){								if( isArray(val[x]) ){					str.append( toHTMLList(arguments.tag,val[x], arguments.attributes) );				}				else{					str.append("<li>#val[x]#</li>");				}							}						str.append("</#arguments.tag#>");			return str.toString();		</cfscript>    </cffunction>		<!--- table --->    <cffunction name="table" output="false" access="public" returntype="any" hint="Convert a table out of data (either a query or array of structures or array of entities)">    	<cfargument name="data" 		type="any"    	 required="true"  hint="The query or array of structures or array of entities to convert into a table"/>		<cfargument name="includes" 	type="string"    required="false" default=""  hint="The columns to include in the rendering"/>		<cfargument name="excludes" 	type="string"    required="false" default=""  hint="The columns to exclude in the rendering"/>		<cfargument name="attributes" 	type="struct" 	 required="false" default="#structnew()#" hint="Attributes for the enclosing table tag"/>		<cfscript>    		var str    = createObject("java","java.lang.StringBuffer").init('');			var attrs  = "";			var key    = "";						// Start Table			str.append("<table#flattenAttributes(arguments.attributes)#><thead><tr>");			// Buffer Reference			arguments.buffer = str;						// Convert Query To Table Body			if( isQuery(arguments.data) ){				queryToTable(argumentCollection=arguments);			}			// Convert Array to Table Body			else if( isArray(arguments.data) and arrayLen(arguments.data) ){							// Check first element for an object, if it is then convert to query				if( isObject(arguments.data[1]) ){					arguments.data = entityToQuery(arguments.data);					queryToTable(argumentCollection=arguments);				}				else{					arrayToTable(argumentCollection=arguments);				}			}						// Finalize table			str.append("</tbody></table>");    		    		return str.toString();		</cfscript>    </cffunction>		<!--- arrayToTable --->    <cffunction name="arrayToTable" output="false" access="private" returntype="void" hint="Convert a table out of an array">    	<cfargument name="data" 		type="any"    	 required="true"  hint="The array to convert into a table"/>		<cfargument name="includes" 	type="string"    required="false" default=""  hint="The columns to include in the rendering"/>		<cfargument name="excludes" 	type="string"    required="false" default=""  hint="The columns to exclude in the rendering"/>		<cfargument name="buffer" 		type="any" 	 	 required="true"/>		<cfscript>    		var str    = arguments.buffer;			var attrs  = "";			var x      = 1;			var y	   = 1;			var key    = "";			var cols   = listToArray(structKeyList(data[1]));						// Render Headers			for(x=1; x lte arrayLen(cols); x=x+1){				// Display?				if( passIncludeExclude(cols[x],arguments.includes,arguments.excludes) ){ 					str.append("<th>#cols[x]#</th>");				}			}			str.append("</tr></thead>");						// Render Body			str.append("<tbody>");			for(x=1; x lte arrayLen(arguments.data); x=x+1){				str.append("<tr>");				for(y=1; y lte arrayLen(cols); y=y+1){					// Display?					if( passIncludeExclude(cols[y],arguments.includes,arguments.excludes) ){ 						str.append("<td>#arguments.data[x][cols[y]]#</td>");					}				}				str.append("</tr>");			}		</cfscript>    </cffunction>		<!--- queryToTable --->    <cffunction name="queryToTable" output="false" access="private" returntype="void" hint="Convert a table out of an array of structures">    	<cfargument name="data" 		type="any"    	 required="true"  hint="The query to convert into a table"/>		<cfargument name="includes" 	type="string"    required="false" default=""  hint="The columns to include in the rendering"/>		<cfargument name="excludes" 	type="string"    required="false" default=""  hint="The columns to exclude in the rendering"/>		<cfargument name="buffer" 		type="any" 	 	 required="true"/>		<cfscript>    		var str    = arguments.buffer;			var cols   = listToArray(arguments.data.columnList);			var x      = 1;			var y	   = 1;						// Render Headers			for(x=1; x lte arrayLen(cols); x=x+1){				// Display?				if( passIncludeExclude(cols[x],arguments.includes,arguments.excludes) ){ 					str.append("<th>#cols[x]#</th>");				}			}			str.append("</tr></thead>");						// Render Body			str.append("<tbody>");			for(x=1; x lte arguments.data.recordcount; x=x+1){				str.append("<tr>");				for(y=1; y lte arrayLen(cols); y=y+1){					// Display?					if( passIncludeExclude(cols[y],arguments.includes,arguments.excludes) ){ 						str.append("<td>#arguments.data[cols[y]][x]#</td>");					}				}				str.append("</tr>");			}		</cfscript>    </cffunction>	<!--- meta --->    <cffunction name="meta" output="false" access="public" returntype="any" hint="Helps you generate meta tags">    	<cfargument name="name" 	type="any" 		required="true" hint="A name for the meta tag or an array of struct data to convert to meta tags.Keys [name,content,type]"/>		<cfargument name="content" 	type="any" 		required="false" default="" hint="The content attribute"/>		<cfargument name="type" 	type="string"   required="false" default="name" hint="Either ''name'' or ''equiv'' which produces http-equiv instead of the name"/>		<cfscript>			var x 		= 1;			var buffer  = createObject("java","java.lang.StringBuffer").init("");			var tmpType = "";						// prep type    		if( arguments.type eq "equiv" ){ arguments.type = "http-equiv"; };						// Array of structs or simple value			if( isSimpleValue(arguments.name) ){				return '<meta #arguments.type#="#arguments.name#" content="#arguments.content#" />';			}						for(x=1; x lte arrayLen(arguments.name); x=x+1 ){				if( NOT structKeyExists(arguments.name[x], "type") ){					arguments.name[x].type = "name";				}				if(  arguments.name[x].type eq "equiv" ){					arguments.name[x].type = "http-equiv";				}								buffer.append('<meta #arguments.name[x].type#="#arguments.name[x].name#" content="#arguments.name[x].content#" />');			}						return buffer.toString();		</cfscript>    </cffunction>	<!--- docType --->    <cffunction name="docType" output="false" access="public" returntype="any" hint="Render a doctype by type name: xhtml11,xhtml1-strict,xhtml-trans,xthml-frame,html5,html4-strict,html4-trans,html4-frame">    	<cfargument name="type" type="string" required="false" default="xhtml1-trans" hint="The doctype to generate"/>    	<cfscript>    		switch( arguments.type ){				case 'xhtml11' 		 : { return '<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.1//EN" "http://www.w3.org/TR/xhtml11/DTD/xhtml11.dtd">'; }				case 'xhtml1-strict' : { return '<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">'; }				case 'xhtml1-trans' : default	 : { return '<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">'; }				case 'xhtml1-frame'	 : { return '<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Frameset//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-frameset.dtd">'; }				case 'html5'		 : { return '<!DOCTYPE html>'; }				case 'html4-strict'	 : { return '<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01//EN" "http://www.w3.org/TR/html4/strict.dtd">'; }				case 'html4-trans'	 : { return '<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd">'; }				case 'html4-frame'	 : { return '<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Frameset//EN" "http://www.w3.org/TR/html4/frameset.dtd">'; }			}		</cfscript>    </cffunction>	<!--- slugify --->
    <cffunction name="slugify" output="false" access="public" returntype="string" hint="Create a URL safe slug from a string">
    	<cfargument name="str" type="string" required="true" hint="The string to slugify"/>		<cfscript>	    	// Cleanup and slugify the string			var slug = lcase(trim(arguments.str));						slug = reReplace(slug,"[^a-z0-9-]","-","all");			slug = reReplace(slug,"-{2,}","-","all");						// check starting -			if( left(slug,1) eq "-" ){ slug = right(slug, len(slug)-1); }			if( right(slug,1) eq "-" ){ slug = left(slug, len(slug)-1); }						return slug;		</cfscript>    			</cffunction>		<!--- autoDiscoveryLink --->
    <cffunction name="autoDiscoveryLink" output="false" access="public" returntype="any" hint="Creates auto discovery links for RSS and ATOM feeds.">
    	<cfargument name="type" 		type="string" 	required="false" default="RSS" hint="Type of feed: RSS or ATOM or Custom Type"/>    	<cfargument name="href" 	 	type="any" 		required="false" hint="The href link to discover"/>		<cfargument name="rel" 		 	type="any"  	required="false" default="alternate" hint="The rel attribute"/>		<cfargument name="title"	 	type="any" 		required="false" default="" hint="The title attribute"/>		<cfscript>			var link 		= createObject("java","java.lang.StringBuffer").init("<link");			var srcParams 	= arguments;						// type: determination			switch(arguments.type){				case "rss"  : { srcParams.type = "application/rss+xml";  break;}				case "atom" : { srcParams.type = "application/atom+xml"; break;}				default 	: { srcParams.type = arguments.type; }			}							// create link			for(key in srcParams){				if( len(srcParams[key]) ){					link.append(' #lcase(key)#="#srcParams[key]#"');				}			}						link.append('/>');						return link.toString();				</cfscript>
    </cffunction>
<!------------------------------------------- PRIVATE ------------------------------------------>		<!--- passIncludeExclude --->	<cffunction name="passIncludeExclude" output="false" access="private" returntype="boolean" hint="checks if a list include exclude check passes">		<cfargument name="value" 		type="string"    required="true" hint="The value to test"/>		<cfargument name="includes" 	type="string"    required="false" default=""  hint="The columns to include in the rendering"/>		<cfargument name="excludes" 	type="string"    required="false" default=""  hint="The columns to exclude in the rendering"/>		<cfscript>			var disp = true;			// Include List?			if( len(arguments.includes) AND NOT listFindNoCase(arguments.includes,arguments.value) ){				disp = false;			}			// Exclude List?			if( len(arguments.excludes) AND listFindNoCase(arguments.excludes,arguments.value) ){				disp = false;			}			return disp;		</cfscript>	</cffunction>		<!--- flattenAttributes --->	<cffunction name="flattenAttributes" output="false" access="private" returntype="string" hint="flatten a struct of attributes to strings">		<cfargument name="target" type="struct" required="true">		<cfscript>			var key   = "";			var attrs = "";						for(key in arguments.target){				attrs = attrs & ' #key#="#arguments.target[key]#"';			}						return attrs;		</cfscript>	</cffunction></cfcomponent>