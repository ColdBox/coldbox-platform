<?xml version="1.0"?>
<!-- ====================================================================== 
     ColdBox Platform Build (www.coldbox.org)                                                               
     ====================================================================== -->
<project name="coldbox-platform-build" default="build.all" basedir="../">
	<description>
    	Build a new distribution of ColdBox Platform with standalone
		versions of CacheBox, WireBox and LogBox
    </description>
	
	<!-- UPDATE ON EACH VERSION CYCLE -->
	<property name="groupID"				value="ortussolutions" />
	<property name="coldbox.version" 		value="4.2.0" />
	<property name="coldbox.stableversion" 	value="4.1.0" />
	<property name="coldbox.slug"	 		value="coldbox"/>
	<property name="cachebox.version" 		value="2.1.0" />
	<property name="cachebox.slug"	 		value="cachebox"/>
	<property name="logbox.version" 		value="2.1.0" />
	<property name="logbox.slug"	 		value="logbox"/>
	<property name="wirebox.version" 		value="2.1.0" />
	<property name="wirebox.slug"	 		value="wirebox"/>
	
	<!-- Build Labels -->
	<tstamp prefix="start"/>
	<!-- Load Contrib Tasks -->
	<path id="cp">
		<fileset dir="build/lib">
			<include name="**/*.jar" />
		</fileset>
	</path>
	<!-- Define Tasks -->
	<taskdef resource="net/sf/antcontrib/antlib.xml" classpathref="cp" />
	<!-- Import Box-Repo Tasks -->
	<import><url url="https://raw.githubusercontent.com/Ortus-Solutions/box-tasks/master/box-repo.xml"/></import>
	
	<!-- Init -->
	<target name="init" description="Init the build" unless="src.isInit">
		<!-- Default environment check, if not passed via -Denvironment -->
		<condition property="environment" value="local">
			<not><isset property="environment" /></not>
		</condition>
		<if>
			<available file="build/coldbox-${environment}.properties" />
			<then>
				<!-- Load env properties -->
				<echo>Loading properties from environment: ${environment}</echo>
				<loadproperties srcFile="build/coldbox-${environment}.properties"/>
			</then>
		</if>
		<!-- Load root properties -->
		<echo>Loading base properties</echo>
		<loadproperties srcFile="build/coldbox.properties"/>

		<!-- Build Number -->
		<propertyfile file="build/build.number" comment="Build Number for ANT. Edit not!">
			<entry key="build.number" 
					type="int" 
			     	operation="+"
					pattern="00000"
			     	default="1" />
		</propertyfile>
		<property file="build/build.number"/>
		
		<!-- Cleanup + Init -->
		<delete dir="${dir.build}" />
		<mkdir dir="${dir.build}" />
		<!-- Update Permissions -->
		<antcall target="update.permissions" />
		<!-- Mark as init -->
		<property name="src.isInit" value="true" />
	</target>
	
	<!-- update permissions on reports -->
	<target name="update.permissions" description="Update staging server permissions">
		<!-- Integration permissions -->
		<if>
			<equals arg1="${environment}" arg2="auto" />
			<then>
				<chmod file="${dir.build}/**" perm="go+wrs" type="both" verbose="true" />
				<chown owner="stg-ortus" verbose="true">
					<fileset dir="${dir.build}" />
				</chown>
			</then>
			<else>
			</else>
		</if>
	</target>
	
	<!-- Run Tests For Platform -->
    <target name="run-tests" description="Runs the tests for entire suite" depends="init" if="tests.execute">
        <!-- Runs are chunked to avoid ANT timeouts -->
    	<!-- Run for Core -->
    	<subant target="run-junit">
          	<fileset dir="tests" includes="automation/test-coldbox.xml"/>
    		<property name="environment" value="${environment}" />
        </subant>
    	<!-- Run for CacheBox -->
    	<subant target="run-junit">
          	<fileset dir="tests" includes="automation/test-cachebox.xml"/>
    		<property name="environment" value="${environment}" />
        </subant>
    	<!-- Run for LogBox -->
    	<subant target="run-junit">
          	<fileset dir="tests" includes="automation/test-logbox.xml"/>
    		<property name="environment" value="${environment}" />
        </subant>
    	<!-- Run for WireBox -->
    	<subant target="run-junit">
          	<fileset dir="tests" includes="automation/test-wirebox.xml"/>
    		<property name="environment" value="${environment}" />
        </subant>
    </target>
	
	<!-- Build All Releases -->
	<target name="build.all" description="Builds ColdBox + Standalone Libraries" depends="run-tests,build.coldbox,build.cachebox,build.wirebox,build.logbox">
	</target>
	
	<!-- Build ColdBox Distribution -->
	<target name="build.coldbox" description="Build a new ColdBox Platform distribution" depends="init">
		<!-- Init Platform Dirs -->
		<mkdir dir="${dir.build}/apidocs"/>
		<property name="dir.coldbox.exports"	value="${dir.exports}/${coldbox.slug}/${coldbox.version}" />
		<property name="be.coldbox.exports" 	value="${be.exports}/${coldbox.slug}" />
		
		<!-- Cleanup Old Code -->
		<delete verbose="true" failonerror="false">
			<fileset dir="${dir.coldbox.exports}" />
			<fileset dir="${dir.exports}/${coldbox.slug}">
				<include name="coldbox-be*" />
			</fileset>
		</delete>
		
		<!-- Update Permissions -->
		<antcall target="update.permissions" />
				
		<!-- Build Label -->
		<property name="build.label" value="coldbox-${coldbox.version}+${build.number}-${start.DSTAMP}${start.TSTAMP}"/>
		<concat destfile="${dir.build}/${build.label}">Built on ${start.TODAY}</concat>
		
		<!-- Copy Src -->	
      	<copy todir="${dir.build}/system" encoding="UTF-8">
        	<fileset dir="system">
        	</fileset>
        </copy>

		<!-- Move Install folder -->
		<copy todir="${dir.build}/install" encoding="UTF-8">
        	<fileset dir="install">
        		<exclude name="ColdboxCheatSheet.*" />
        	</fileset>
        </copy>
		
		<!--AppTemplate-->
		<copy todir="${dir.build}/ApplicationTemplates" encoding="UTF-8">
        	<fileset dir="ApplicationTemplates" />
        </copy>
		
		<!--Copy text files to install folder-->
		<copy todir="${dir.build}" encoding="UTF-8">
			<fileset file="license.txt" />
			<fileset file="readme.md" />						
		</copy>
		
		<!-- Copy box.json to build -->
		<copy file="box.json" toFile="${dir.build}/box.json" encoding="UTF-8"/>
		
		<!-- Replace Build Numbers -->
		<replaceregexp match='@build.number@' replace="${build.number}" flags="ig" byline="true" encoding="UTF-8">
		  <fileset dir="${dir.build}" />
		</replaceregexp>
		
		<!-- Execute IDE Dictionaries -->
		<get dest="${dir.build}/install/IDE Extras/CFBuilder Dictionary/coldbox.builder.xml" src="${url.dictionaries}/builderDictionary.cfm?text=true" verbose="true"/>

		<!-- Execute Api Docs -->
		<get dest="${dir.build}/colddoc.html" src="${url.coldbox.api}${coldbox.version}&amp;path=${dir.build}/apidocs&amp;coldbox_root=${dir.build}" verbose="true"/>
		<delete file="${dir.build}/colddoc.html" />
		
		<!-- Zip API Docs -->
		<zip destfile="${dir.coldbox.exports}/coldbox-apidocs-${coldbox.version}.zip" basedir="${dir.build}/apidocs" />

		<!-- Zip IDE Extras -->
		<zip destfile="${dir.coldbox.exports}/coldbox-ide-${coldbox.version}.zip" basedir="${dir.build}/install/IDE Extras" />
		
		<!-- Zip ColdBox Bundle -->
		<zip destfile="${dir.coldbox.exports}/coldbox-${coldbox.version}.zip" basedir="${dir.build}" />
		
		<!-- Cleanup for StandAlone Build -->
		<delete dir="${dir.build}/ApplicationTemplates"/>
		<delete dir="${dir.build}/apidocs" />
		<delete dir="${dir.build}/test-runner" />
		<delete dir="${dir.build}/test-browser" />
		<delete dir="${dir.build}/install" />
		
		<!-- Zip Standalone -->
		<zip destfile="${dir.coldbox.exports}/coldbox-standalone-${coldbox.version}.zip" basedir="${dir.build}" />
		
		<!-- Build Checksum -->
		<checksum forceoverwrite="true" fileext=".md5">
			<fileset dir="${dir.coldbox.exports}">
				<include name="*.zip" />
			</fileset>
		</checksum>
		
		<!-- Move Bleeding Edge to Root -->
		<copy file="${dir.coldbox.exports}/coldbox-${coldbox.version}.zip" 					
			  tofile="${be.coldbox.exports}/${coldbox.slug}-be.zip" 
			  overwrite="true"
			  encoding="UTF-8"/>
		<copy file="${dir.coldbox.exports}/coldbox-${coldbox.version}.zip.md5" 				
			  tofile="${be.coldbox.exports}/${coldbox.slug}-be.zip.md5" 
			  overwrite="true"
			  encoding="UTF-8"/>
		<copy file="${dir.coldbox.exports}/coldbox-standalone-${coldbox.version}.zip" 		
			  tofile="${be.coldbox.exports}/${coldbox.slug}-be-standalone.zip" 
			  overwrite="true"
			  encoding="UTF-8"/>
		<copy file="${dir.coldbox.exports}/coldbox-standalone-${coldbox.version}.zip.md5" 	
			  tofile="${be.coldbox.exports}/${coldbox.slug}-be-standalone.zip.md5" 
			  overwrite="true"
			  encoding="UTF-8"/>
		
		<!-- Create Box Repo From macrodef -->
		<box-repo location="${dir.exports}/${coldbox.slug}" 
				  artifactID="${coldbox.slug}" 
				  buildID="${build.number}"
				  groupID="${groupID}"
				  latest="${coldbox.version}"
				  stableVersion="${coldbox.stableversion}"
				  classifiers="standalone,apidocs,ide"/>
		
		<!-- More Cleanup -->
		<delete dir="${dir.build}" />
    </target>
	
	<!-- Build CacheBox Distribution -->
	<target name="build.cachebox" description="Builds a standalone version of CacheBox" depends="init">
		<!-- Init Platform Dirs -->
		<mkdir dir="${dir.build}/apidocs"/>
		<property name="dir.cachebox.exports"	value="${dir.exports}/${cachebox.slug}/${cachebox.version}" />
		<property name="be.cachebox.exports" 	value="${be.exports}/${cachebox.slug}" />
		<!-- Cleanup Old Code -->
		<delete verbose="true" failonerror="false">
			<fileset dir="${dir.cachebox.exports}" />
			<fileset dir="${dir.exports}/${cachebox.slug}">
				<include name="cachebox-be*" />
			</fileset>
		</delete>
		<!-- Update Permissions -->
		<antcall target="update.permissions" />
				
		<!-- Build Label -->
		<property name="build.label" value="cachebox-${cachebox.version}+${build.number}-${start.DSTAMP}${start.TSTAMP}"/>
		<concat destfile="${dir.build}/${build.label}">Built on ${start.TODAY}</concat>
		
		<!-- Copy src to cachebox namespace-->	
      	<copy todir="${dir.build}/system/cache" encoding="UTF-8">
        	<fileset dir="system/cache" />
        </copy>
		<copy todir="${dir.build}/system/core" encoding="UTF-8">
        	<fileset dir="system/core">
        		<exclude name="mail/*" />
        		<exclude name="db/*" />
        	</fileset>
        </copy>
		<copy todir="${dir.build}/system/logging" encoding="UTF-8">
        	<fileset dir="system/logging" />
        </copy>
		
		<!--Copy text files to root folder-->
		<copy todir="${dir.build}" encoding="UTF-8">
			<fileset file="license.txt" />
			<fileset file="system/cache/readme.md" />						
		</copy>
		
		<!--Copy box.json to root -->
		<copy toFile="${dir.build}/box.json" file="box-cachebox.json"  encoding="UTF-8"/>

		<!-- Replace Build Numbers -->
		<replaceregexp match='@build.number@' replace="${build.number}" flags="ig" byline="true" encoding="UTF-8">
		  <fileset dir="${dir.build}" />
		</replaceregexp>

		<!-- Refactor cachebox namespace -->
		<echo>Refactoring for coldbox absolute paths</echo>
		<replace dir="${dir.build}" value="/cachebox/system/" summary="yes" encoding="UTF-8">
		  	<include name="**/*.cfc" />
			<include name="**/*.cfm" />
			<include name="**/*.xml" />
			<include name="**/*.css" />
			<replacetoken>/coldbox/system/</replacetoken>
		</replace>
		<echo>Refactoring for coldbox instantitation and cfc paths</echo>
		<replace dir="${dir.build}" value="cachebox.system." summary="yes" encoding="UTF-8">
		  	<include name="**/*.cfc" />
			<include name="**/*.cfm" />
			<include name="**/*.xml" />
			<include name="**/*.css" />
			<replacetoken>coldbox.system.</replacetoken>
		</replace>
		
		<!-- Execute ColdDoc -->
		<get dest="${dir.build}/colddoc.html" src="${url.cachebox.api}${cachebox.version}&amp;path=${dir.build}/apidocs&amp;cachebox_root=${dir.build}" verbose="true"/>
		<delete file="${dir.build}/colddoc.html" />
		
		<!-- Zip API Docs -->
		<zip destfile="${dir.cachebox.exports}/cachebox-apidocs-${cachebox.version}.zip" basedir="${dir.build}/apidocs" />
		<!-- Zip Bundle -->
		<zip destfile="${dir.cachebox.exports}/cachebox-${cachebox.version}.zip" basedir="${dir.build}" />
		<!-- Copy box.json to exports -->
		<copy file="${dir.build}/box.json" toFile="${dir.cachebox.exports}/box.json" encoding="UTF-8" />
				
		<!-- Build Checksum -->
		<checksum forceoverwrite="true" fileext=".md5">
			<fileset dir="${dir.cachebox.exports}">
				<include name="*.zip" />
			</fileset>
		</checksum>
		
		<!-- Move BE to root -->
		<copy file="${dir.cachebox.exports}/cachebox-${cachebox.version}.zip" 		
			  tofile="${be.cachebox.exports}/${cachebox.slug}-be.zip" 
			  overwrite="true"
			  encoding="UTF-8"/>
		<copy file="${dir.cachebox.exports}/cachebox-${cachebox.version}.zip.md5" 	
			  tofile="${be.cachebox.exports}/${cachebox.slug}-be.zip.md5" 
			  overwrite="true"
			  encoding="UTF-8"/>
		
		<!-- Create Box Repo From macrodef -->
		<box-repo location="${dir.exports}/${cachebox.slug}" 
				  artifactID="${cachebox.slug}" 
				  groupID="${groupID}"
				  buildID="${build.number}"
				  latest="${cachebox.version}"
				  classifiers="apidocs"/>
		
		<!-- Cleanup -->
		<delete dir="${dir.build}" />
	</target>

	<!-- Build LogBox Distribution -->
	<target name="build.logbox" description="Builds a standalone version of LogBox" depends="init">
		<!-- Init Platform Dirs -->
		<mkdir dir="${dir.build}/apidocs"/>
		<property name="dir.logbox.exports"	value="${dir.exports}/${logbox.slug}/${logbox.version}" />
		<property name="be.logbox.exports" 	value="${be.exports}/${logbox.slug}" />
		<!-- Cleanup Old Code -->
		<delete verbose="true" failonerror="false">
			<fileset dir="${dir.logbox.exports}" />
			<fileset dir="${dir.exports}/${logbox.slug}">
				<include name="logbox-be*" />
			</fileset>
		</delete>
		<!-- Update Permissions -->
		<antcall target="update.permissions" />
				
		<!-- Build Label -->
		<property name="build.label" value="logbox-${logbox.version}+${build.number}-${start.DSTAMP}${start.TSTAMP}"/>
		<concat destfile="${dir.build}/${build.label}">Built on ${start.TODAY}</concat>
		
		<!-- Copy src to logbox namespace-->	
      	<copy todir="${dir.build}/system/logging" encoding="UTF-8">
        	<fileset dir="system/logging" />
        </copy>
		<copy todir="${dir.build}/system/core" encoding="UTF-8">
        	<fileset dir="system/core">
        		<include name="util/*" />
        		<include name="dynamic/*" />
        		<include name="collections/*" />
        		<include name="conversion/*" />
        	</fileset>
        </copy>
        <!--Copy text files to root folder-->
		<copy todir="${dir.build}" encoding="UTF-8">
			<fileset file="license.txt" />
			<fileset file="system/logging/readme.md" />						
		</copy>
		<!--Copy box.json to root -->
		<copy toFile="${dir.build}/box.json" file="box-logbox.json"  encoding="UTF-8"/>

        <!-- Replace Build Numbers -->
		<replaceregexp match='@build.number@' replace="${build.number}" flags="ig" byline="true" encoding="UTF-8">
		  <fileset dir="${dir.build}" />
		</replaceregexp>
		
		<!-- Refactor logbox namespace -->
		<echo>Refactoring for coldbox absolute paths</echo>
		<replace dir="${dir.build}" value="/logbox/system/" summary="yes" encoding="UTF-8">
		  	<include name="**/*.cfc" />
			<include name="**/*.cfm" />
			<include name="**/*.xml" />
			<replacetoken>/coldbox/system/</replacetoken>
		</replace>
		<echo>Refactoring for coldbox instantitation and cfc paths</echo>
		<replace dir="${dir.build}" value="logbox.system." summary="yes" encoding="UTF-8">
		  	<include name="**/*.cfc" />
			<include name="**/*.cfm" />
			<include name="**/*.xml" />
			<replacetoken>coldbox.system.</replacetoken>
		</replace>
		
		<!-- Execute ColdDoc -->
		<get dest="${dir.build}/colddoc.html" src="${url.logbox.api}${logbox.version}&amp;path=${dir.build}/apidocs&amp;logbox_root=${dir.build}" verbose="true"/>
		<delete file="${dir.build}/colddoc.html" />
		
		<!-- Zip API Docs -->
		<zip destfile="${dir.logbox.exports}/logbox-apidocs-${logbox.version}.zip" basedir="${dir.build}/apidocs" />
		<!-- Zip Bundle -->
		<zip destfile="${dir.logbox.exports}/logbox-${logbox.version}.zip" basedir="${dir.build}" />
		
		<!-- Copy box.json to exports -->
		<copy file="${dir.build}/box.json" toFile="${dir.logbox.exports}/box.json"  encoding="UTF-8"/>
		<!-- Build Checksum -->
		<checksum forceoverwrite="true" fileext=".md5">
			<fileset dir="${dir.logbox.exports}">
				<include name="*.zip" />
			</fileset>
		</checksum>
		
		<!-- Move BE to root -->
		<copy file="${dir.logbox.exports}/logbox-${logbox.version}.zip" 		
			  tofile="${be.logbox.exports}/${logbox.slug}-be.zip" 
			  overwrite="true"
			  encoding="UTF-8"/>
		<copy file="${dir.logbox.exports}/logbox-${logbox.version}.zip.md5" 	
			  tofile="${be.logbox.exports}/${logbox.slug}-be.zip.md5" 
			  overwrite="true"
			  encoding="UTF-8"/>
		
		<!-- Create Box Repo From macrodef -->
		<box-repo location="${dir.exports}/${logbox.slug}" 
				  artifactID="${logbox.slug}" 
				  groupID="${groupID}"
				  buildID="${build.number}"
				  latest="${logbox.version}"
				  classifiers="apidocs"/>

		<!-- Cleanup -->
		<delete dir="${dir.build}" />
	</target>
	
	<!-- Build WireBox Distribution -->
	<target name="build.wirebox" description="Builds a standalone version of WireBox" depends="init">
		<!-- Init Platform Dirs -->
		<mkdir dir="${dir.build}/apidocs"/>
		<property name="dir.wirebox.exports"	value="${dir.exports}/${wirebox.slug}/${wirebox.version}" />
		<property name="be.wirebox.exports" 	value="${be.exports}/${wirebox.slug}" />
		<!-- Cleanup Old Code -->
		<delete verbose="true" failonerror="false">
			<fileset dir="${dir.wirebox.exports}" />
			<fileset dir="${dir.exports}/${wirebox.slug}">
				<include name="wirebox-be*" />
			</fileset>
		</delete>
		<!-- Update Permissions -->
		<antcall target="update.permissions" />
				
		<!-- Build Label -->
		<property name="build.label" value="wirebox-${wirebox.version}+${build.number}-${start.DSTAMP}${start.TSTAMP}"/>
		<concat destfile="${dir.build}/${build.label}">Built on ${start.TODAY}</concat>
		
		<!-- Copy src to WireBox namespace-->	
      	<copy todir="${dir.build}/system/ioc" encoding="UTF-8">
        	<fileset dir="system/ioc" />
        </copy>
		<copy todir="${dir.build}/system/aop" encoding="UTF-8">
			 <fileset dir="system/aop" />
		</copy>
		<copy todir="${dir.build}/system/cache" encoding="UTF-8">
        	<fileset dir="system/cache" />
        </copy>
		<copy todir="${dir.build}/system/core" encoding="UTF-8">
        	<fileset dir="system/core">
        		<include name="collections/"/>
        		<include name="conversion/"/>
        		<include name="util/"/>
        		<include name="dynamic/"/>
        		<include name="events/"/>
        	</fileset>
        </copy>
		<copy todir="${dir.build}/system/logging" encoding="UTF-8">
        	<fileset dir="system/logging" />
        </copy>
		<!--Copy text files to root folder-->
		<copy todir="${dir.build}" encoding="UTF-8">
			<fileset file="license.txt" />
			<fileset file="system/ioc/readme.md" />						
		</copy>
		<!--Copy box.json to root -->
		<copy toFile="${dir.build}/box.json" file="box-wirebox-cachebox.json"  encoding="UTF-8"/>
		<!-- Replace Build Numbers -->
		<replaceregexp match='@build.number@' replace="${build.number}" flags="ig" byline="true" encoding="UTF-8">
		  <fileset dir="${dir.build}" />
		</replaceregexp>
		
		<!-- Refactor cachebox namespace -->
		<echo>Refactoring for coldbox absolute paths</echo>
		<replace dir="${dir.build}" value="/wirebox/system/" summary="yes" encoding="UTF-8">
		  	<include name="**/*.cfc" />
			<include name="**/*.cfm" />
			<include name="**/*.xml" />
			<include name="**/*.css" />
			<replacetoken>/coldbox/system/</replacetoken>
		</replace>
		<echo>Refactoring for coldbox instantitation and cfc paths</echo>
		<replace dir="${dir.build}" value="wirebox.system." summary="yes" encoding="UTF-8">
		  	<include name="**/*.cfc" />
			<include name="**/*.cfm" />
			<include name="**/*.xml" />
			<include name="**/*.css" />
			<replacetoken>coldbox.system.</replacetoken>
		</replace>

		<!-- Execute ApiDocs -->
		<get dest="${dir.build}/colddoc.html" src="${url.wirebox.api}${wirebox.version}&amp;path=${dir.build}/apidocs&amp;wirebox_root=${dir.build}" verbose="true"/>
		<delete file="${dir.build}/colddoc.html" />
		
		<!-- Zip API Docs -->
		<zip destfile="${dir.wirebox.exports}/wirebox-apidocs-${wirebox.version}.zip" basedir="${dir.build}/apidocs"></zip>
		<!-- Zip Bundle -->
		<zip destfile="${dir.wirebox.exports}/wirebox-cachebox-${wirebox.version}.zip" basedir="${dir.build}"></zip>
		<!-- Copy box.json to exports -->
		<copy file="${dir.build}/box.json" toFile="${dir.wirebox.exports}/box.json" overwrite="true"  encoding="UTF-8"/>
		
		<!-- No CacheBox NOW -->
		<delete dir="${dir.build}/system/cache" />
		<!--Copy box.json to root -->
		<copy toFile="${dir.build}/box.json" file="box-wirebox.json" overwrite="true"  encoding="UTF-8"/>
		<!-- Replace Build Numbers -->
		<replaceregexp match='@build.number@' replace="${build.number}" flags="ig" byline="true">
		  <fileset dir="${dir.build}" />
		</replaceregexp>
		
		<!-- Execute ColdDoc -->
		<get dest="${dir.build}/colddoc.html" src="${url.wirebox.api}${wirebox.version}&amp;path=${dir.build}/apidocs&amp;wirebox_root=${dir.build}" verbose="true"/>
		<delete file="${dir.build}/colddoc.html" />
		<!-- Zip Without CacheBox -->
		<zip destfile="${dir.wirebox.exports}/wirebox-${wirebox.version}.zip" basedir="${dir.build}"></zip>
		
		<!-- Build Checksum -->
		<checksum forceoverwrite="true" fileext=".md5">
			<fileset dir="${dir.wirebox.exports}">
				<include name="*.zip" />
			</fileset>
		</checksum>
		
		<!-- Move BE to root -->
		<copy file="${dir.wirebox.exports}/wirebox-${wirebox.version}.zip"				
			  tofile="${be.wirebox.exports}/${wirebox.slug}-be.zip" 
			  overwrite="true"
			  encoding="UTF-8"/>
		<copy file="${dir.wirebox.exports}/wirebox-${wirebox.version}.zip.md5" 			
			  tofile="${be.wirebox.exports}/${wirebox.slug}-be.zip.md5" 
			  overwrite="true"
			  encoding="UTF-8"/>
		<copy file="${dir.wirebox.exports}/wirebox-cachebox-${wirebox.version}.zip" 	
			  tofile="${be.wirebox.exports}/${wirebox.slug}-cachebox-be.zip" 
			  overwrite="true"
			  encoding="UTF-8"/>
		<copy file="${dir.wirebox.exports}/wirebox-cachebox-${wirebox.version}.zip.md5" 
			  tofile="${be.wirebox.exports}/${wirebox.slug}-cachebox-be.zip.md5" 
			  overwrite="true"
			  encoding="UTF-8"/>
		
		<!-- Create Box Repo From macrodef -->
		<box-repo location="${dir.exports}/${wirebox.slug}" 
				  artifactID="${wirebox.slug}" 
				  groupID="${groupID}"
				  buildID="${build.number}"
				  latest="${wirebox.version}"
				  classifiers="cachebox,apidocs"/>
		
		<!-- Cleanup -->
		<delete dir="${dir.build}" />
	</target>
	
</project>